/*
UNISTDX — C++ library for Linux system calls.
© 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef DWX_DW
#define DWX_DW

#include <elfutils/libdwfl.h>
#include <unistd.h>

#include <system_error>

namespace dw {

    using address = ::Dwarf_Addr;
    using context_type = ::Dwfl;
    using line_type = ::Dwfl_Line;
    using module_type = ::Dwfl_Module;

    enum struct errc: int {
        invalid_tag=DW_TAG_invalid,
    };

    class error_category: public std::error_category {
    public:
        const char* name() const noexcept override;
        std::string message(int ev) const noexcept override;
    };

    extern error_category dwarf_category;

    inline std::error_condition
    make_error_condition(errc e) noexcept {
        return std::error_condition(static_cast<int>(e), dwarf_category);
    }

    inline int call(int ret) {
        if (ret == -1) { throw std::system_error(dwarf_errno(), dwarf_category); }
        return ret;
    }

    template <class T>
    inline T* call(T* ret) {
        if (!ret) { throw std::system_error(dwarf_errno(), dwarf_category); }
        return ret;
    }

    class context {

    private:
        ::Dwfl_Callbacks _callbacks{};
        context_type* _ptr{};

    public:
        inline context() noexcept {
            this->_callbacks.find_elf = ::dwfl_linux_proc_find_elf;
            this->_callbacks.find_debuginfo = ::dwfl_standard_find_debuginfo;
            this->_ptr = call(::dwfl_begin(&this->_callbacks));
        }
        inline ~context() noexcept {
            if (this->_ptr) { ::dwfl_end(this->_ptr); this->_ptr = nullptr; }
        }
        inline context_type* get() noexcept { return this->_ptr; }
        inline const context_type* get() const noexcept { return this->_ptr; }
        inline explicit operator bool() const noexcept { return this->_ptr != nullptr; }
        inline bool operator!() const noexcept { return !operator bool(); }

        inline void report() {
            call(::dwfl_linux_proc_report(get(), ::getpid()));
            call(::dwfl_report_end(get(), nullptr, nullptr));
        }
        inline const char* version() const noexcept { return dwfl_version(this->_ptr); }

        context(const context&) = delete;
        context& operator=(const context&) = delete;
        inline context(context&& rhs) noexcept: _ptr(rhs._ptr) { rhs._ptr = nullptr; }
        inline context& operator=(context&& rhs) noexcept {
            swap(rhs);
            return *this;
        }

        inline void swap(context& rhs) noexcept {
            std::swap(this->_ptr, rhs._ptr);
        }

    };

    inline void swap(context& a, context& b) noexcept { a.swap(b); }

    class line {

    private:
        line_type* _ptr{};

    public:
        inline line(context& ctx, address addr):
        _ptr(call(::dwfl_getsrc(ctx.get(), addr))) {}

        inline std::pair<const char*,int> location() const {
            address addr{};
            int line_number = 0;
            auto filename = call(::dwfl_lineinfo(this->_ptr, &addr, &line_number,
                                                 nullptr, nullptr, nullptr));
            return std::make_pair(filename, line_number);
        }

        inline line_type* get() noexcept { return this->_ptr; }
        inline const line_type* get() const noexcept { return this->_ptr; }

        line(const line&) = delete;
        line& operator=(const line&) = delete;
        inline line(line&& rhs) noexcept: _ptr(rhs._ptr) { rhs._ptr = nullptr; }
        inline line& operator=(line&& rhs) noexcept {
            swap(rhs);
            return *this;
        }

        inline void swap(line& rhs) noexcept {
            std::swap(this->_ptr, rhs._ptr);
        }

    };

    inline void swap(line& a, line& b) noexcept { a.swap(b); }

    class module {

    private:
        module_type* _ptr{};

    public:
        inline module(context& ctx, address addr):
        _ptr(call(::dwfl_addrmodule(ctx.get(), addr))) {}

        inline const char* name() const {
            return call(::dwfl_module_info(this->_ptr, nullptr, nullptr, nullptr,
                                           nullptr, nullptr, nullptr, nullptr));
        }

        inline const char* function_name(address addr) const {
            return call(::dwfl_module_addrname(this->_ptr, addr));
        }

        inline module_type* get() noexcept { return this->_ptr; }
        inline const module_type* get() const noexcept { return this->_ptr; }

        module(const module&) = delete;
        module& operator=(const module&) = delete;
        inline module(module&& rhs) noexcept: _ptr(rhs._ptr) { rhs._ptr = nullptr; }
        inline module& operator=(module&& rhs) noexcept {
            swap(rhs);
            return *this;
        }

        inline void swap(module& rhs) noexcept {
            std::swap(this->_ptr, rhs._ptr);
        }

    };

    inline void swap(module& a, module& b) noexcept { a.swap(b); }

}

#endif // vim:filetype=cpp
