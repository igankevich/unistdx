/*
UNISTDX — C++ library for Linux system calls.
© 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_SYSTEM_CLOCK
#define UNISTDX_SYSTEM_CLOCK

#include <sys/time.h>
#include <time.h>

#include <chrono>

#include <unistdx/base/check>
#include <unistdx/base/flag>
#include <unistdx/io/fildes>
#include <unistdx/system/time>

namespace sys {

    enum class clocks: ::clockid_t {
        #if defined(CLOCK_REALTIME)
        realtime=CLOCK_REALTIME,
        #endif
        #if defined(CLOCK_MONOTONIC)
        monotonic=CLOCK_MONOTONIC,
        #endif
        #if defined(CLOCK_PROCESS_CPUTIME_ID)
        process_cpu_time=CLOCK_PROCESS_CPUTIME_ID,
        #endif
        #if defined(CLOCK_THREAD_CPUTIME_ID)
        thread_cpu_time=CLOCK_THREAD_CPUTIME_ID,
        #endif
        #if defined(CLOCK_MONOTONIC_RAW)
        monotonic_raw=CLOCK_MONOTONIC_RAW,
        #endif
        #if defined(CLOCK_REALTIME_COARSE)
        realtime_coarse=CLOCK_REALTIME_COARSE,
        #endif
        #if defined(CLOCK_MONOTONIC_COARSE)
        monotonic_coarse=CLOCK_MONOTONIC_COARSE,
        #endif
        #if defined(CLOCK_BOOTTIME)
        boottime=CLOCK_BOOTTIME,
        #endif
        #if defined(CLOCK_REALTIME_ALARM)
        realtime_alarm=CLOCK_REALTIME_ALARM,
        #endif
        #if defined(CLOCK_BOOTTIME_ALARM)
        boottime_alarm=CLOCK_BOOTTIME_ALARM,
        #endif
        #if defined(CLOCK_TAI)
        tai=CLOCK_TAI,
        #endif
    };

    class clock {

    public:
        using duration = std::chrono::nanoseconds;
        using time_point = std::chrono::time_point<clock,duration>;
        using rep = duration::rep;
        using period = duration::period;
        static constexpr const bool is_steady = false;

    private:
        static constexpr const int clock_fd = 3;
        inline constexpr clocks fd_to_clock_id(fd_type fd) noexcept {
            return clocks((~::clockid_t(int(fd)) << 3) | clock_fd);
        }
        inline constexpr fd_type clock_id_to_fd(clocks clk) noexcept {
            return fd_type((unsigned int) ~((::clockid_t(clk)) >> 3));
        }

    private:
        fildes _fd;
        clocks _id = clocks::realtime;

    public:
        inline explicit clock(clocks id) noexcept: _id(id) {}
        inline explicit clock(fildes&& fd) noexcept:
        _fd(std::move(fd)), _id(fd_to_clock_id(_fd.fd())) {}

        inline duration resolution() const {
            time_spec t;
            UNISTDX_CHECK(::clock_getres(downcast(this->_id), &t));
            return t.duration();
        }

        inline time_point time() const {
            time_spec t;
            UNISTDX_CHECK(::clock_gettime(downcast(this->_id), &t));
            return time_point(t.duration());
        }

        inline void time(time_point rhs) {
            time_spec t{rhs};
            UNISTDX_CHECK(::clock_settime(downcast(this->_id), &t));
        }

        inline duration sleep_for(duration amount) {
            time_spec t(amount);
            time_spec t_remaining;
            check(::clock_nanosleep(downcast(this->_id), 0, &t, &t_remaining));
            return t_remaining.duration();
        }

        inline void sleep_until(time_point tp) {
            time_spec t(tp);
            check(::clock_nanosleep(downcast(this->_id), TIMER_ABSTIME, &t, nullptr));
        }

        clock() = default;
        ~clock() = default;
        clock(const clock&) = default;
        clock& operator=(const clock&) = default;
        clock(clock&&) = default;
        clock& operator=(clock&&) = default;

    };

    class time_of_day {

    public:
        using duration = std::chrono::nanoseconds;
        using time_point = std::chrono::time_point<time_of_day,duration>;
        using rep = duration::rep;
        using period = duration::period;
        static constexpr const bool is_steady = false;

        static inline time_point now() {
            time_value t;
            UNISTDX_CHECK(::gettimeofday(&t, nullptr));
            return time_point(t.duration());
        }

        static inline void now(time_point rhs) {
            time_value t{rhs.time_since_epoch()};
            UNISTDX_CHECK(::settimeofday(&t, nullptr));
        }

        static inline duration adjust(duration delta) {
            time_value old_dt;
            time_value dt{delta};
            UNISTDX_CHECK(::adjtime(&dt, &old_dt));
            return old_dt.duration();
        }

    };

}

#endif // vim:filetype=cpp
