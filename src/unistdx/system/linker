/*
UNISTDX — C++ library for Linux system calls.
© 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_SYSTEM_LINKER
#define UNISTDX_SYSTEM_LINKER

#include <unistdx/config>

#if defined(UNISTDX_HAVE_DLFCN_H)

#include <dlfcn.h>

#include <system_error>

#include <unistdx/base/flag>

namespace dl {

    enum struct errc: int {
        // no error codes
    };

    class error_category: public std::error_category {
    public:
        const char* name() const noexcept override;
        std::string message(int ev) const noexcept override;
    };

    extern error_category dl_category;

    inline std::error_condition
    make_error_condition(errc e) noexcept {
        return std::error_condition(static_cast<int>(e), dl_category);
    }

    inline int call(int ret) {
        if (ret < 0) {
            if (const char* what = ::dlerror()) {
                throw std::system_error(-1, dl_category, what);
            }
        }
        return ret;
    }

    template <class T>
    inline T* call(T* ret) {
        if (!ret) {
            if (const char* what = ::dlerror()) {
                throw std::system_error(-1, dl_category, what);
            }
        }
        return ret;
    }

    class symbol: public ::Dl_info {

    public:
        inline symbol() noexcept: ::Dl_info{} {}
        inline symbol(const void* address) noexcept: ::Dl_info{} { ::dladdr(address, this); }

        inline const char* filename() const noexcept { return this->dli_fname; }
        inline void* load_address() const noexcept { return this->dli_fbase; }
        inline const char* name() const noexcept { return this->dli_sname; }
        inline void* address() const noexcept { return this->dli_saddr; }

        inline explicit operator bool() const noexcept { return address() != nullptr; }
        inline bool operator !() const noexcept { return !this->operator bool(); }

        ~symbol() = default;
        symbol(const symbol&) = default;
        symbol& operator=(const symbol&) = default;
        symbol(symbol&&) = default;
        symbol& operator=(symbol&&) = default;

    };

    class object {

    public:
        enum class modes: int {
            #if defined(RTLD_LAZY)
            lazy=RTLD_LAZY,
            #endif
            #if defined(RTLD_NOW)
            now=RTLD_NOW,
            #endif
            #if defined(RTLD_NOLOAD)
            no_load=RTLD_NOLOAD,
            #endif
            #if defined(RTLD_DEEPBIND)
            deep_bind=RTLD_DEEPBIND,
            #endif
            #if defined(RTLD_GLOBAL)
            global=RTLD_GLOBAL,
            #endif
            #if defined(RTLD_LOCAL)
            local=RTLD_LOCAL,
            #endif
            #if defined(RTLD_NODELETE)
            no_delete=RTLD_NODELETE,
            #endif
        };

    private:
        void* _ptr{};

    public:
        inline explicit object(const char* path, modes mode):
        _ptr(call(::dlopen(path, int(mode)))) {}

        inline ~object() noexcept { close(); }

        inline void close() { call(::dlclose(this->_ptr)); this->_ptr = nullptr; }

        inline void* symbol_address(const char* name) const {
            return call(::dlsym(this->_ptr, name));
        }

        object() = default;
        object(const object&) = default;
        object& operator=(const object&) = default;
        object(object&&) = default;
        object& operator=(object&&) = default;

    };

    UNISTDX_FLAGS(object::modes);

}

#endif

#if defined(UNISTDX_HAVE_DL_ITERATE_PHDR)

#include <link.h>

namespace sys {

    using elf_address = ElfW(Addr);
    using elf_half = ElfW(Half);
    using elf_header = ElfW(Phdr);
    using elf_word = ElfW(Word);
    using elf_sword = ElfW(Sword);
    using elf_dynamic = ElfW(Dyn);
    using elf_symbol = ElfW(Sym);

    enum class segment_types: elf_word {
        #if defined(PT_LOAD)
        loadable=PT_LOAD,
        #endif
        #if defined(PT_DYNAMIC)
        dynamic=PT_DYNAMIC,
        #endif
        #if defined(PT_INTERP)
        interpreter=PT_INTERP,
        #endif
        #if defined(PT_NOTE)
        note=PT_NOTE,
        #endif
        #if defined(PT_SHLIB)
        shlib=PT_SHLIB,
        #endif
        #if defined(PT_PHDR)
        header_table=PT_PHDR,
        #endif
        #if defined(PT_TLS)
        thread_local_storate=PT_TLS,
        #endif
        #if defined(PT_GNU_EH_FRAME)
        eh_frame=PT_GNU_EH_FRAME,
        #endif
        #if defined(PT_GNU_STACK)
        executable_stack=PT_GNU_STACK,
        #endif
        #if defined(PT_GNU_RELRO)
        read_only_after_relocation=PT_GNU_RELRO,
        #endif
    };

    UNISTDX_FLAGS(segment_types);

    enum class dynamic_section_tags: elf_sword {
        #if defined(DT_NULL)
        null=DT_NULL,
        #endif
        #if defined(DT_NEEDED)
        needed=DT_NEEDED,
        #endif
        #if defined(DT_PLTRELSZ)
        pltrelsz=DT_PLTRELSZ,
        #endif
        #if defined(DT_PLTGOT)
        pltgot=DT_PLTGOT,
        #endif
        #if defined(DT_HASH)
        hash=DT_HASH,
        #endif
        #if defined(DT_STRTAB)
        string_table=DT_STRTAB,
        #endif
        #if defined(DT_SYMTAB)
        symbol_table=DT_SYMTAB,
        #endif
        #if defined(DT_RELA)
        rela=DT_RELA,
        #endif
        #if defined(DT_RELASZ)
        relasz=DT_RELASZ,
        #endif
        #if defined(DT_RELAENT)
        relaent=DT_RELAENT,
        #endif
        #if defined(DT_STRSZ)
        string_table_size=DT_STRSZ,
        #endif
        #if defined(DT_SYMENT)
        symbol_table_entry_size=DT_SYMENT,
        #endif
        #if defined(DT_INIT)
        init=DT_INIT,
        #endif
        #if defined(DT_FINI)
        fini=DT_FINI,
        #endif
        #if defined(DT_SONAME)
        soname=DT_SONAME,
        #endif
        #if defined(DT_RPATH)
        rpath=DT_RPATH,
        #endif
        #if defined(DT_SYMBOLIC)
        symbolic=DT_SYMBOLIC,
        #endif
        #if defined(DT_REL)
        rel=DT_REL,
        #endif
        #if defined(DT_RELSZ)
        relsz=DT_RELSZ,
        #endif
        #if defined(DT_RELENT)
        relent=DT_RELENT,
        #endif
        #if defined(DT_PLTREL)
        pltrel=DT_PLTREL,
        #endif
        #if defined(DT_DEBUG)
        debug=DT_DEBUG,
        #endif
        #if defined(DT_TEXTREL)
        textrel=DT_TEXTREL,
        #endif
        #if defined(DT_JMPREL)
        jmprel=DT_JMPREL,
        #endif
        #if defined(DT_BIND_NOW)
        bind_now=DT_BIND_NOW,
        #endif
        #if defined(DT_INIT_ARRAY)
        init_array=DT_INIT_ARRAY,
        #endif
        #if defined(DT_FINI_ARRAY)
        fini_array=DT_FINI_ARRAY,
        #endif
        #if defined(DT_INIT_ARRAYSZ)
        init_arraysz=DT_INIT_ARRAYSZ,
        #endif
        #if defined(DT_FINI_ARRAYSZ)
        fini_arraysz=DT_FINI_ARRAYSZ,
        #endif
        #if defined(DT_RUNPATH)
        runpath=DT_RUNPATH,
        #endif
        #if defined(DT_FLAGS)
        flags=DT_FLAGS,
        #endif
        #if defined(DT_ENCODING)
        encoding=DT_ENCODING,
        #endif
        #if defined(DT_PREINIT_ARRAY)
        preinit_array=DT_PREINIT_ARRAY,
        #endif
        #if defined(DT_PREINIT_ARRAYSZ)
        preinit_arraysz=DT_PREINIT_ARRAYSZ,
        #endif
        #if defined(DT_SYMTAB_SHNDX)
        symtab_shndx=DT_SYMTAB_SHNDX,
        #endif
        #if defined(DT_NUM)
        num=DT_NUM,
        #endif
        #if defined(DT_LOOS)
        loos=DT_LOOS,
        #endif
        #if defined(DT_HIOS)
        hios=DT_HIOS,
        #endif
        #if defined(DT_LOPROC)
        loproc=DT_LOPROC,
        #endif
        #if defined(DT_HIPROC)
        hiproc=DT_HIPROC,
        #endif
        #if defined(DT_PROCNUM)
        procnum=DT_PROCNUM,
        #endif
    };

    class program_header: public elf_header {
    public:
        inline segment_types type() const noexcept { return segment_types(this->p_type); }
        inline elf_address virtual_address() const noexcept { return this->p_vaddr; }
    };

    class dynamic_section: public elf_dynamic {
    public:
        inline dynamic_section_tags tag() const noexcept {
            return dynamic_section_tags(this->d_tag);
        }
        inline elf_address address() const noexcept { return this->d_un.d_ptr; }

        template <class T> inline const T* address() const noexcept {
            return reinterpret_cast<const T*>(this->d_un.d_ptr);
        }

        template <class T> inline T* address() noexcept {
            return reinterpret_cast<T*>(this->d_un.d_ptr);
        }

        inline elf_word integer() const noexcept { return this->d_un.d_val; }
        inline explicit operator bool() const noexcept { return this->d_tag != DT_NULL; }
    };

    class symbol: public elf_symbol {
    public:
        inline elf_word name() const noexcept { return this->st_name; }
    };

    class shared_object: public ::dl_phdr_info {
    public:
        inline elf_address base_address() const noexcept { return this->dlpi_addr; }
        inline const char* name() const noexcept { return this->dlpi_name; }
        inline elf_half size() const noexcept { return this->dlpi_phnum; }
        inline const program_header* data() const noexcept {
            return static_cast<const program_header*>(this->dlpi_phdr);
        }
        inline const program_header* begin() const noexcept { return data(); }
        inline const program_header* end() const noexcept { return data() + size(); }
    };

    namespace bits {
        template <class Callback> int
        dl_iterate_phdr_callback(struct dl_phdr_info* info, size_t size, void* data) {
            auto* callback = reinterpret_cast<Callback*>(data);
            return (*callback)(static_cast<shared_object&>(*info), size);
        }
    }

    template <class Callback>
    inline void for_each_shared_object(Callback callback) {
        ::dl_iterate_phdr(bits::dl_iterate_phdr_callback<Callback>, &callback);
    }

}

#endif


#endif // vim:filetype=cpp
