/*
UNISTDX — C++ library for Linux system calls.
© 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_SYSTEM_ERROR
#define UNISTDX_SYSTEM_ERROR

#include <array>
#include <exception>
#include <iosfwd>
#include <string>
#include <tuple>
#include <vector>

#include <unistdx/base/string>
#include <unistdx/config>

#if defined(UNISTDX_WITH_LIBDW)
#include <dwx/dw>
#include <unistd.h>
#endif

#if defined(UNISTDX_HAVE_BACKTRACE)
#include <execinfo.h>
#endif

namespace sys {

    /**
    \brief Print calling process function call trace (if supported).
    \date 2018-05-25
    \see \man{backtrace,3}
    \details
    \arg Does not throw exceptions.
    \arg Handles memory allocation errors, degrading output
    to mangled function names.
    */
    void backtrace(int fd) noexcept;
    void backtrace_on_signal(int sig) noexcept;
    void backtrace_on_terminate();

    /**
    \brief Dump core.
    \date 2020-12-29
    \details
    Provoke kernel to dump the core by resetting abort signal handler to the
    default value and sending the signal to the process. Also raises resource
    limits to infinity.
    */
    void dump_core() noexcept;

    const char* demangle(const char* symbol, string& buf);

    struct backtrace_symbol {

        std::string object;
        std::string filename;
        std::string name;
        int line{};
        uintptr_t address{};

        inline backtrace_symbol(std::string&& filename, std::string&& name, int line):
        filename(filename), name(name), line(line) {}

        #if defined(UNISTDX_WITH_LIBDW)
        inline backtrace_symbol(std::string&& name, dw::context& context, dw::address addr):
        name(std::move(name)), address(addr) {
            try {
                dw::module mod(context, addr);
                this->object = mod.name();
                dw::line line(context, addr);
                std::tie(this->filename, this->line) = line.location();
            } catch (...) {
                // ignore the absense of line information
            }
        }
        #endif

    };

    std::ostream& operator<<(std::ostream& out, const backtrace_symbol& rhs);

    class stack_trace {

    public:
        using value_type = void*;
        using const_pointer = const void*;
        using pointer_array = std::array<value_type,64>;
        using iterator = void**;

    private:
        mutable pointer_array _addresses;
        int _size = 0;

    public:
        inline explicit stack_trace(bool) {}
        inline stack_trace() noexcept {
            #if defined(UNISTDX_HAVE_BACKTRACE)
            this->_size = ::backtrace(this->_addresses.data(), this->_addresses.size());
            #endif
        }
        inline iterator data() const noexcept { return this->_addresses.data(); }
        inline int size() const noexcept { return this->_size; }
        inline iterator begin() const noexcept { return data(); }
        inline iterator end() const noexcept { return data()+size(); }
        inline bool empty() const noexcept { return size() == 0; }
        inline value_type front() const noexcept { return *begin(); }
        inline value_type back() const noexcept { return *(end()-1); }
        inline void clear() noexcept { this->_size = 0; }
        inline std::vector<backtrace_symbol> symbols() const noexcept;

        ~stack_trace() = default;
        stack_trace(const stack_trace&) = default;
        stack_trace& operator=(const stack_trace&) = default;
        stack_trace(stack_trace&&) = default;
        stack_trace& operator=(stack_trace&&) = default;
    };

    std::ostream& operator<<(std::ostream& out, const stack_trace& rhs);

    class error: public std::exception {

    private:
        stack_trace _backtrace;
        mutable std::string _message;
        mutable bool _init = false;

    public:
        inline explicit error(const std::string& message) noexcept: _message(message) {}
        inline explicit error(const std::string& message, const stack_trace& backtrace) noexcept:
        _backtrace(backtrace), _message(message) {}
        const char* what() const noexcept override;
        inline const stack_trace& backtrace() const noexcept { return this->_backtrace; }

        error() = default;
        ~error() = default;
        error(const error&) = default;
        error& operator=(const error&) = default;
        error(error&&) = default;
        error& operator=(error&&) = default;

    private:
        void init() const noexcept;

    };

}

#endif // vim:filetype=cpp
