/*
UNISTDX — C++ library for Linux system calls.
© 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_SYSTEM_ERROR
#define UNISTDX_SYSTEM_ERROR

#include <exception>
#include <iosfwd>
#include <string>
#include <tuple>
#include <vector>

#include <unistdx/base/string>

#if defined(UNISTDX_WITH_LIBDW)
#include <dwx/dw>
#include <unistd.h>
#endif

namespace sys {

    /**
    \brief Print calling process function call trace (if supported).
    \date 2018-05-25
    \see \man{backtrace,3}
    \details
    \arg Does not throw exceptions.
    \arg Handles memory allocation errors, degrading output
    to mangled function names.
    */
    void backtrace(int fd) noexcept;
    void backtrace_on_signal(int sig) noexcept;

    const char* demangle(const char* symbol, string& buf);

    struct backtrace_symbol {

        std::string object;
        std::string filename;
        std::string name;
        int line{};
        uintptr_t address{};

        inline backtrace_symbol(std::string&& filename, std::string&& name, int line):
        filename(filename), name(name), line(line) {}

        #if defined(UNISTDX_WITH_LIBDW)
        inline backtrace_symbol(std::string&& name, dw::context& context, dw::address addr):
        name(std::move(name)), address(addr) {
            try {
                dw::module mod(context, addr);
                this->object = mod.name();
                dw::line line(context, addr-4);
                std::tie(this->filename, this->line) = line.location();
            } catch (...) {
                // ignore the absense of line information
            }
        }
        #endif

    };

    std::ostream& operator<<(std::ostream& out, const backtrace_symbol& rhs);

    std::vector<backtrace_symbol> backtrace_symbols() noexcept;
    std::vector<backtrace_symbol> backtrace_symbols(void** addresses, int size) noexcept;

    class error: public std::exception {

    private:
        std::string _message;
        std::vector<backtrace_symbol> _symbols;

    public:
        inline explicit error(const std::string& message) noexcept {
            this->_symbols = backtrace_symbols();
            init(message);
        }
        inline explicit error(const std::string& message,
                              void** addresses, int size) noexcept {
            this->_symbols = backtrace_symbols(addresses, size);
            init(message);
        }
        error() = default;
        ~error() = default;
        error(const error&) = default;
        error& operator=(const error&) = default;
        error(error&&) = default;
        error& operator=(error&&) = default;

        const char* what() const noexcept override;

        inline const std::vector<backtrace_symbol>& symbols() const noexcept {
            return this->_symbols;
        }

    private:
        void init(const std::string& message) noexcept;

    };

}

#endif // vim:filetype=cpp
