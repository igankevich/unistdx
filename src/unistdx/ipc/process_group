/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IPC_PROCESS_GROUP
#define UNISTDX_IPC_PROCESS_GROUP

#include <algorithm>
#include <vector>

#include <unistdx/base/unlock_guard>
#include <unistdx/bits/no_copy_and_move>
#include <unistdx/ipc/process>

namespace sys {

	namespace this_process {

		inline pid_type
		process_group_id() noexcept { return ::getpgrp(); }

		inline void
		set_process_group_id(pid_type rhs) {
			UNISTDX_CHECK(::setpgid(this_process::id(), rhs));
		}

	}

	class process_group {

	public:
		typedef std::vector<process>::iterator iterator;
		typedef std::vector<process>::const_iterator const_iterator;

	private:
		std::vector<process> _procs;
		pid_type _gid = 0;

	public:

		process_group() = default;
		~process_group() = default;

		UNISTDX_NO_COPY_AND_MOVE(process_group)

		template<class F>
		const process&
		emplace(F&& childmain, process_flag pf=process_flag::fork) {
			const bool has_gid = !this->_procs.empty();
			this->_procs.emplace_back([this,&childmain,has_gid] () {
				this_process::set_group_id(
					has_gid ? this->_gid : this_process::id()
				);
				return childmain();
			}, pf);
			process& proc = this->_procs.back();
			if (!has_gid) {
				this->_gid = proc.id();
			}
			return proc;
		}

		int
		wait();

		template<class Lock, class F>
		void
		wait(Lock& lock, F callback, wait_flags flags=proc_exited) {
			sys::siginfo_type info;
			sys::proc_info status;
			const_iterator result;
			while (!this->_procs.empty()) {
				{
					unlock_guard<Lock> g(lock);
					UNISTDX_CHECK_IF_NOT(
						EINTR,
						::waitid(P_PGID, this->_gid, &info, flags)
					);
				}
				status = sys::proc_info(info);
				result = std::find_if(
					this->_procs.begin(), this->_procs.end(),
					[&status] (const process& p) {
						return p.id() == status.pid();
					}
				);
				if (result != this->_procs.end()) {
					callback(*result, status);
					this->_procs.erase(result);
				}
			}
		}

		inline void
		send(signal s) {
			if (this->_gid > 0) {
		    	UNISTDX_CHECK(::killpg(this->_gid, signal_type(s)));
			}
		}

		inline void
		terminate() {
			this->send(signal::terminate);
		}

		inline pid_type
		id() const noexcept {
			return this->_gid;
		}

		const process&
		operator[](size_t i) const noexcept {
			return this->_procs[i];
		}

		inline process&
		operator[](size_t i) noexcept {
			return this->_procs[i];
		}

		inline size_t
		size() const noexcept {
			return this->_procs.size();
		}

		inline iterator
		begin() noexcept {
			return this->_procs.begin();
		}

		inline iterator
		end() noexcept {
			return this->_procs.end();
		}

		inline const process&
		front() const noexcept {
			return this->_procs.front();
		}

		inline process&
		front() noexcept {
			return this->_procs.front();
		}

		inline const process&
		back() const noexcept {
			return this->_procs.back();
		}

		inline process&
		back() noexcept {
			return this->_procs.back();
		}

		inline bool
		empty() const noexcept {
			return this->_procs.empty();
		}

		friend std::ostream&
		operator<<(std::ostream& out, const process_group& rhs);

	};

	std::ostream&
	operator<<(std::ostream& out, const process_group& rhs);

}

#endif // vim:filetype=cpp
