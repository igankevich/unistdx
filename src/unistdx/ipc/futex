/*
UNISTDX — C++ library for Linux system calls.
© 2021 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IPC_FUTEX
#define UNISTDX_IPC_FUTEX

#include <linux/futex.h>

#include <atomic>
#include <condition_variable>

#include <unistdx/base/check>
#include <unistdx/base/unlock_guard>
#include <unistdx/system/call>
#include <unistdx/system/time>

namespace sys {

    class futex {

    public:
        enum class flag: int {
            #if defined(FUTEX_PRIVATE_FLAG)
            process_private=FUTEX_PRIVATE_FLAG,
            #endif
            #if defined(FUTEX_CLOCK_REALTIME)
            realtime_clock=FUTEX_CLOCK_REALTIME,
            #endif
        };

    private:
        std::atomic<int> _value{0};

    public:
        inline explicit futex(int value) noexcept: _value{value} {}

        inline int value() const noexcept { return this->_value; }

        inline void wait() {
            while (true) {
                int one = 1;
                if (std::atomic_compare_exchange_strong(&this->_value, &one, 0)) {
                    break;
                }
                auto ret = run(FUTEX_WAIT, 0);
                if (ret == -1 && errno != EAGAIN) {
                    throw bad_call();
                }
            }
        }

        inline void notify(int count) {
            int nought = 0;
            if (std::atomic_compare_exchange_strong(&this->_value, &nought, 1)) {
                check(run(FUTEX_WAKE, count));
            }
        }

        inline void notify_one() { notify(1); }
        inline void notify_all() { notify(std::numeric_limits<int>::max()); }

        inline void lock() { wait(); }
        inline void unlock() { notify_one(); }

        inline bool try_lock() noexcept {
            int one = 1;
            return std::atomic_compare_exchange_strong(&this->_value, &one, 0);
        }

        template <class Rep, class Period> inline bool
        try_lock_for(const std::chrono::duration<Rep,Period>& dur) {
            using namespace std::chrono;
            const time_spec timeout{std::max(duration<Rep,Period>::zero(), dur)};
            while (true) {
                int one = 1;
                if (std::atomic_compare_exchange_strong(&this->_value, &one, 0)) {
                    break;
                }
                auto ret = run_for(FUTEX_WAIT, 0, &timeout);
                if (ret == -1) {
                    if (errno == ETIMEDOUT) { return false; }
                    if (errno != EAGAIN) { throw bad_call(); }
                }
            }
            return true;
        }

        template <class Clock, class Duration> inline bool
        try_lock_until(const std::chrono::time_point<Clock,Duration>& tp) {
            return try_lock_for(tp-Clock::now());
        }

        template <class Lock>
        inline void wait(Lock& lock) {
            unlock_guard<Lock> unlock(lock);
            this->wait();
        }

        template <class Lock, class Pred>
        inline void wait(Lock& lock, Pred pred) {
            while (!pred()) {
                this->wait(lock);
            }
        }

        template <class Lock, class Rep, class Period>
        inline std::cv_status
        wait_for(Lock& lock, const std::chrono::duration<Rep,Period>& dur) {
            unlock_guard<Lock> unlock(lock);
            /*
            using namespace std::chrono;
            const auto d = std::max(duration<Rep,Period>::zero(), dur);
            const time_spec timeout{d};
            while (true) {
                int one = 1;
                if (std::atomic_compare_exchange_strong(&this->_value, &one, 0)) {
                    break;
                }
                auto ret = run_for(FUTEX_WAIT, 0, &timeout);
                if (ret == -1) {
                    if (errno == ETIMEDOUT) { return std::cv_status::timeout; }
                    if (errno != EAGAIN) { throw bad_call(); }
                }
            }
            return std::cv_status::no_timeout;
            */
            return try_lock_for(dur) ? std::cv_status::no_timeout : std::cv_status::timeout;
        }

        template <class Lock, class Rep, class Period, class Pred>
        inline bool
        wait_for(Lock& lock, const std::chrono::duration<Rep,Period>& dur, Pred pred) {
            while (!pred()) {
                if (this->wait_for(lock, dur) == std::cv_status::timeout) {
                    return pred();
                }
            }
            return true;
        }

        template <class Lock, class Clock, class Duration>
        inline std::cv_status
        wait_until(Lock& lock, const std::chrono::time_point<Clock,Duration>& tp) {
            return wait_for(lock, tp-Clock::now());
        }

        template <class Lock>
        inline std::cv_status
        wait_until(Lock& lock, time_spec timeout) {
            unlock_guard<Lock> unlock(lock);
            while (true) {
                int one = 1;
                if (std::atomic_compare_exchange_strong(&this->_value, &one, 0)) {
                    break;
                }
                auto ret = run_until(0, &timeout);
                if (ret == -1) {
                    if (errno == ETIMEDOUT) { return std::cv_status::timeout; }
                    if (errno != EAGAIN) { throw bad_call(); }
                }
            }
            return std::cv_status::no_timeout;
        }

        template <class Lock, class Clock, class Duration, class Pred>
        inline bool
        wait_until(Lock& lock, const std::chrono::time_point<Clock,Duration>& tp, Pred pred) {
            return wait_for(lock, tp-Clock::now(), pred);
        }

        futex() = default;
        ~futex() = default;
        futex(const futex&) = delete;
        futex& operator=(const futex&) = delete;
        futex(futex&&) = delete;
        futex& operator=(futex&&) = delete;

    private:

        inline int run(int operation, int value) {
            return call(calls::futex, &this->_value, operation, value, nullptr, nullptr, 0);
        }

        inline int run_for(int operation, int value, const time_spec* timeout) {
            return call(calls::futex, &this->_value, operation, value, timeout, nullptr, 0);
        }

        inline int run_until(int value, const time_spec* timepoint) {
            return call(calls::futex, &this->_value, FUTEX_WAIT_BITSET, value, timepoint,
                        nullptr, FUTEX_BITSET_MATCH_ANY);
        }

    };

    class mutex: public futex {

    public:
        inline mutex() noexcept: futex{1} {}
        ~mutex() = default;
        mutex(const mutex&) = delete;
        mutex& operator=(const mutex&) = delete;
        mutex(mutex&&) = delete;
        mutex& operator=(mutex&&) = delete;

    };

    class condition_variable: public futex {

    public:
        inline condition_variable() noexcept: futex{0} {}
        ~condition_variable() = default;
        condition_variable(const condition_variable&) = delete;
        condition_variable& operator=(const condition_variable&) = delete;
        condition_variable(condition_variable&&) = delete;
        condition_variable& operator=(condition_variable&&) = delete;

    };

}

#endif // vim:filetype=cpp
