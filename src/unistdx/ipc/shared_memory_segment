#ifndef UNISTDX_IPC_SHARED_MEMORY_SEGMENT
#define UNISTDX_IPC_SHARED_MEMORY_SEGMENT

#include <sys/shm.h>
#include <unistd.h>

#include <algorithm>
#include <chrono>
#include <cstring>

#include <unistdx/base/check>
#include <unistdx/base/make_object>
#include <unistdx/config>

namespace sys {

    /**
    \brief Alias for shared memory ID type.
    \date 2018-05-21
    \author Ivan Gankevich
    \ingroup ipc
    */
    typedef int shm_type;
    typedef ::mode_t mode_type;
    typedef ::pid_t pid_type;

    /**
    \brief
    A wrapper for \c shmid_ds system structure.
    \date 2018-05-21
    \author Ivan Gankevich
    */
    class shared_memory_segment_status: public ::shmid_ds {

    public:
        /// Clock type used in this class.
        typedef std::chrono::system_clock clock_type;
        /// Return type of \link last_attach\endlink.
        typedef clock_type::time_point tp_type;
        /// Return type of \link num_attaches\endlink.
        typedef ::shmatt_t num_attaches_type;

    public:

        /// Size type. Alias to \link std::size_t\endlink.
        typedef std::size_t size_type;

        /**
        \brief Get status for shared memory segment with ID \p id.
        \throws bad_call
        \see \man{shmctl,2}
        */
        inline explicit
        shared_memory_segment_status(shm_type id) {
            this->getstat(id);
        }

        /// Size of shared memory segment in bytes.
        inline size_type
        segment_size() const noexcept {
            return this->shm_segsz;
        }

        /// The process that created this segment.
        inline pid_type
        creator() const noexcept {
            return this->shm_cpid;
        }

        /// The last process that accessed this segment.
        inline pid_type
        last_user() const noexcept {
            return this->shm_lpid;
        }

        /// Last attach time.
        inline tp_type
        last_attach() const noexcept {
            return clock_type::from_time_t(this->shm_atime);
        }

        /// Last detach time.
        inline tp_type
        last_detach() const noexcept {
            return clock_type::from_time_t(this->shm_dtime);
        }

        /// Last change time.
        inline tp_type
        last_change() const noexcept {
            return clock_type::from_time_t(this->shm_ctime);
        }

        /// The current number of attaches.
        inline num_attaches_type
        num_attaches() const noexcept {
            return this->shm_nattch;
        }

    private:

        inline void
        getstat(shm_type id) {
            UNISTDX_CHECK(::shmctl(id, IPC_STAT, this));
        }

    };

    namespace ipc {

        enum ipc_mode_type {
            create = IPC_CREAT,
            exclusive = IPC_EXCL,
            no_wait = IPC_NOWAIT
        };

    }

    namespace shm {

        enum shm_flags_type {
            #if defined(UNISTDX_HAVE_SHM_HUGETLB)
            huge_pages = SHM_HUGETLB
            #endif
            #if defined(UNISTDX_HAVE_SHM_HUGE_2MB)
            , huge_2mb = SHM_HUGE_2MB
            #endif
            #if defined(UNISTDX_HAVE_SHM_HUGE_1GB)
            , huge_1gb = SHM_HUGE_1GB
            #endif
            #if defined(UNISTDX_HAVE_SHM_NORESERVE)
            , no_reserve = SHM_NORESERVE
            #endif
        };

    }

    /**
    \brief A container that stores its elements in shared memory.
    \date 2018-05-21
    \author Ivan Gankevich
    \ingroup ipc container
    \details
    \arg Elements can be accessed in both parent and child processes.
    \arg The container does not provide syncrhonisation.
    */
    template <class T>
    class shared_memory_segment {

    private:
        typedef ::key_t key_type;

    public:
        /// Size type. Alias to \link std::size_t\endlink.
        typedef std::size_t size_type;
        /// Raw pointer type.
        typedef void* addr_type;
        /// Container element type.
        typedef T value_type;
        /// Container iterator type.
        typedef T* iterator;
        /// Container const iterator type.
        typedef const T* const_iterator;

        /**
        \brief
        Create and attach shared memory segment with mode \p mode
        and minimum size \p guaranteed_size.
        \throws bad_call
        \see \man{shmget,2}
        \see \man{shmat,2}
        */
        inline
        shared_memory_segment(mode_type mode, size_type guaranteed_size) {
            this->open_as_owner(mode|ipc::create, guaranteed_size);
        }

        /**
        \brief Attach shared memory segment with id \p shm.
        \see \man{shmat,2}
        */
        inline explicit
        shared_memory_segment(shm_type shm) {
            this->open_as_user(shm);
        }

        /// Move-constructor.
        inline
        shared_memory_segment(shared_memory_segment&& rhs):
        _shm(rhs._shm),
        _addr(rhs._addr),
        _size(rhs._size),
        _owner(rhs._owner) {
            rhs._addr = nullptr;
            rhs._owner = false;
        }

        inline
        shared_memory_segment() = default;

        shared_memory_segment(const shared_memory_segment&) = delete;

        /// Terminates on system error.
        inline
        ~shared_memory_segment() {
            this->close();
        }

        shared_memory_segment&
        operator=(const shared_memory_segment&) = delete;

        /// Move-assigment.
        inline shared_memory_segment&
        operator=(shared_memory_segment&& rhs) noexcept {
            this->swap(rhs);
            return *this;
        }

        /// Swap with \p rhs.
        inline void
        swap(shared_memory_segment& rhs) {
            std::swap(this->_shm, rhs._shm);
            std::swap(this->_addr, rhs._addr);
            std::swap(this->_size, rhs._size);
            std::swap(this->_owner, rhs._owner);
        }

        /// Get raw pointer to the contents of shared memory segment.
        inline addr_type
        ptr() noexcept {
            return this->_addr;
        }

        /// Get raw pointer to the contents of shared memory segment.
        inline addr_type
        ptr() const noexcept {
            return this->_addr;
        }

        /// Get the number of elements in the container.
        inline size_type
        size() const noexcept {
            return this->_size;
        }

        /// Get the size of shared memory segment in bytes.
        inline size_type
        size_in_bytes() const noexcept {
            return this->_size*sizeof(value_type);
        }

        /// Check if the segment is owned by this process.
        inline bool
        owner() const noexcept {
            return this->_owner;
        }

        /// Returns iterator to the beginning of the container.
        inline iterator
        begin() noexcept {
            return static_cast<iterator>(this->_addr);
        }

        /// Returns iterator to the end of the container.
        inline iterator
        end() noexcept {
            return static_cast<iterator>(this->_addr) + this->_size;
        }

        /// Returns iterator to the beginning of the container.
        inline const_iterator
        begin() const noexcept {
            return static_cast<iterator>(this->_addr);
        }

        /// Returns iterator to the end of the container.
        inline const_iterator
        end() const noexcept {
            return static_cast<iterator>(this->_addr) + this->_size;
        }

        /// Get segment ID.
        inline shm_type
        id() const noexcept {
            return this->_shm;
        }

        /**
        \brief Checks if the segement is attached.
        \return true if the segment is attached
        */
        inline explicit
        operator bool() const noexcept {
            return this->_addr && this->_shm != -1;
        }

        /**
        \brief Checks if the segement is attached.
        \return false if the segment is attached
        */
        inline bool
        operator!() const noexcept {
            return !this->operator bool();
        }

        /**
        \brief Compare shared memory segments element-wise. ID is not important.
        \return true if segments have the same size and the same elements
        */
        inline bool
        operator==(const shared_memory_segment& rhs) const noexcept {
            return this->_size == rhs._size
                   && std::equal(this->begin(), this->end(), rhs.begin());
        }

        /**
        \brief Compare shared memory segments element-wise. ID is not important.
        \return false if segments have the same size and the same elements
        */
        inline bool
        operator!=(const shared_memory_segment& rhs) const noexcept {
            return !operator==(rhs);
        }

        /**
        \brief Attach shared memory segment.
        \throws bad_call
        \see \man{shmat,2}
        \see \man{shmctl,2}
        */
        inline void
        open_as_user(shm_type id) {
            this->_shm = id;
            this->_addr = this->attach(id);
            this->_size = this->getsize();
        }

        /**
        \brief Create and attach shared memory segment.
        \throws bad_call
        \see \man{shmget,2}
        \see \man{shmat,2}
        */
        inline void
        open_as_owner(mode_type mode, size_type size) {
            this->_shm = this->open(IPC_PRIVATE, size, mode);
            this->_addr = this->attach(this->_shm);
            this->_size = this->getsize();
            this->_owner = true;
            this->memzero();
        }

        /**
        \brief Detach and remove (if owner) shared memory segment.
        \throws bad_call
        \see \man{shmdt,2}
        \see \man{shmctl,2}
        */
        inline void
        close() {
            this->detach();
            this->remove();
        }

    private:

        inline void
        remove() {
            if (this->owner() && this->_shm != -1) {
                UNISTDX_CHECK(::shmctl(this->_shm, IPC_RMID, 0));
                this->_shm = -1;
            }
        }

        inline void
        memzero() noexcept {
            std::memset(this->ptr(), 0, this->size_in_bytes());
        }

        inline static shm_type
        open(key_type key, size_type size, int shmflags) {
            int ret;
            UNISTDX_CHECK(ret = ::shmget(key, size, shmflags));
            return ret;
        }

        inline static addr_type
        attach(shm_type s) {
            addr_type ret;
            UNISTDX_CHECK2(ret = ::shmat(s, nullptr, 0), nullptr);
            return ret;
        }

        inline void
        detach() {
            if (this->_addr) {
                UNISTDX_CHECK(::shmdt(this->_addr));
                this->_addr = nullptr;
            }
        }

        inline size_type
        getsize() const {
            shared_memory_segment_status stat(this->_shm);
            return stat.segment_size() / sizeof(value_type);
        }

        inline friend std::ostream&
        operator<<(std::ostream& out, const shared_memory_segment& rhs) {
            return out << make_object(
                "addr",
                rhs.ptr(),
                "size",
                rhs.size(),
                "owner",
                rhs.owner(),
                "shm",
                rhs.id()
                );
        }

        shm_type _shm = -1;
        addr_type _addr = nullptr;
        size_type _size = 0;
        bool _owner = false;

    };

    /// Overload of \link std::swap\endlink for \link shared_memory_segment\endlink.
    template <class T>
    inline void
    swap(shared_memory_segment<T>& lhs, shared_memory_segment<T>& rhs) {
        lhs.swap(rhs);
    }

}

#endif // vim:filetype=cpp
