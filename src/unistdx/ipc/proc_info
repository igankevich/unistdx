/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IPC_PROC_INFO
#define UNISTDX_IPC_PROC_INFO

#include <sys/wait.h>

#include <unistdx/ipc/basic_status>
#include <unistdx/ipc/signal>

namespace sys {

	typedef ::siginfo_t siginfo_type;
	typedef ::pid_t pid_type;

	template<>
	struct basic_status<siginfo_type> {

		enum struct st {
			exited = CLD_EXITED,
			killed = CLD_KILLED,
			core_dumped = CLD_DUMPED,
			stopped = CLD_STOPPED,
			trapped = CLD_TRAPPED,
			continued = CLD_CONTINUED
		};

		inline explicit constexpr
		basic_status(const siginfo_type& rhs) noexcept:
		stat(static_cast<st>(rhs.si_code)),
		code(rhs.si_status),
		_pid(rhs.si_pid) {}

		inline constexpr
		basic_status() noexcept = default;

		inline constexpr
		basic_status(const basic_status&) noexcept = default;

		inline constexpr bool
		exited() const noexcept {
			return stat == st::exited;
		}

		inline constexpr bool
		killed() const noexcept {
			return stat == st::killed;
		}

		inline constexpr bool
		stopped() const noexcept {
			return stat == st::stopped;
		}

		inline constexpr bool
		core_dumped() const noexcept {
			return stat == st::core_dumped;
		}

		inline constexpr bool
		trapped() const noexcept {
			return stat == st::trapped;
		}

		inline constexpr bool
		continued() const noexcept {
			return stat == st::continued;
		}

		inline constexpr code_type
		exit_code() const noexcept {
			return code;
		}

		inline constexpr signal
		term_signal() const noexcept {
			return signal(code);
		}

		inline constexpr signal
		stop_signal() const noexcept {
			return signal(code);
		}

		inline constexpr pid_type
		pid() const noexcept {
			return _pid;
		}

		inline constexpr const char*
		status_string() const noexcept {
			return exited() ? "exited" :
			       killed() ? "killed" :
			       core_dumped() ? "core_dumped" :
			       stopped() ? "stopped" :
			       continued() ? "continued" :
			       trapped() ? "trapped" :
			       "unknown";
		}

		st stat = static_cast<st>(0);
		code_type code = 0;
		pid_type _pid = 0;
	};

	typedef basic_status<siginfo_type> proc_info;

	std::ostream&
	operator<<(std::ostream& out, const proc_info& rhs);

}

#endif // vim:filetype=cpp
