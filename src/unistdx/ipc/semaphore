/*
UNISTDX — C++ library for Linux system calls.
© 2016, 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IPC_SEMAPHORE
#define UNISTDX_IPC_SEMAPHORE

#include <signal.h>
#include <unistd.h>

#include <unistdx/config>
#if defined(UNISTDX_HAVE_SEMAPHORE_H)
#include <semaphore.h>
#endif
#if defined(UNISTDX_HAVE_SYS_SEM_H)
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/types.h>
#endif

#include <chrono>
#include <cmath>
#include <condition_variable>

#include <unistdx/base/contracts>
#include <unistdx/base/unlock_guard>
#include <unistdx/io/fildes>
#include <unistdx/ipc/process>

namespace sys {

    /**
    \brief The scope of semaphore (process/thread).
    \date 2018-05-21
    */
    enum struct semaphore_type: int {
        /// Semaphore that may synchronise threads only.
        thread = 0,
        /// Semaphore that may synchronise threads and processes.
        process = 1
    };

    #if defined(UNISTDX_HAVE_SYS_SEM_H)
    /**
    \brief Semaphore, implemented using System V system calls.
    \date 2018-05-21
    \ingroup ipc semaphore
    \details Suitable for both processes and threads.
    */
    class sysv_semaphore {

    private:
        typedef struct ::sembuf sembuf_type;
        typedef struct ::timespec timespec_type;

        union argument_type {
            int val;
            struct semid_ds* buf = nullptr;
            unsigned short int *array;
            struct seminfo* info;
        };

    public:
        /// Alias to system semaphore type (int).
        typedef int sem_type;
        /// Clock type used in this class.
        typedef std::chrono::system_clock clock_type;

        /**
        \brief
        Construct semaphore with specified \p mode.
        \throws bad_call
        \see \man{semget,2}
        \details The semaphore is owned by the calling process/thread.
        */
        inline explicit
        sysv_semaphore(mode_type mode=0600):
        _owner(true)
        {
            UNISTDX_CHECK(
                this->_sem = ::semget(IPC_PRIVATE, 1, IPC_CREAT|mode)
            );
        }

        /**
        \brief
        Construct semaphore with ID \p sem.
        \details The semaphore is not owned by the calling process/thread.
        */
        inline explicit
        sysv_semaphore(sem_type sem):
        _sem(sem),
        _owner(false)
        {}

        /**
        \brief Remove semaphore (if owner). Terminates on system error.
        \see \man{semctl,2}
        */
        inline
        ~sysv_semaphore() {
            if (this->_owner) {
                this->remove();
            }
        }

        /// Get semaphore ID.
        inline sem_type
        id() const noexcept {
            return this->_sem;
        }

        /// Check if this semaphore is owned by this process.
        inline bool
        owner() const noexcept {
            return this->_owner;
        }

        /**
        \brief
        Wait until other process/thread calls
        \link sysv_semaphore::notify_one \endlink
        or \link sysv_semaphore::notify \endlink on this semaphore.
        \throws bad_call
        \see \man{semop,2}
        */
        inline void
        wait() {
            this->increment(-1);
        }

        /**
        \brief Notify one process that wait on this semaphore.
        \throws bad_call
        \see \man{semop,2}
        */
        inline void
        notify_one() {
            this->notify(1);
        }

        /**
        \brief Notify \p n processes that wait on this semaphore.
        \throws bad_call
        \see \man{semop,2}
        */
        inline void
        notify(int n) {
            this->increment(n);
        }

        /**
        \brief Wait on the semaphore unlocking \p lock for the duration of the wait.
        \throws bad_call
        \see \man{semop,2}
        */
        template<class Lock>
        void wait(Lock& lock) {
            unlock_guard<Lock> unlock(lock);
            this->wait();
        }

        /**
        \brief
        Wait on the semaphore unlocking \p lock for the duration of the wait until
        predicate \p pred becomes true.
        \throws bad_call
        \see \man{semop,2}
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Pred>
        void wait(Lock& lock, Pred pred) {
            while (!pred()) {
                this->wait(lock);
            }
        }

        #if defined(UNISTDX_HAVE_SEMTIMEDOP)
        /**
        \brief
        Wait on the semaphore specified amount of time \p dur
        unlocking \p lock for the duration of the wait.
        \throws bad_call
        \see \man{semtimedop,2}
        */
        template<class Lock, class Rep, class Period>
        std::cv_status
        wait_for(Lock& lock, const std::chrono::duration<Rep,Period>& dur) {
            using namespace std::chrono;
            const auto d = std::max(duration<Rep,Period>::zero(), dur);
            const auto s = duration_cast<seconds>(d);
            const auto ns = duration_cast<nanoseconds>(d - s);
            const timespec_type timeout{static_cast<std::time_t>(s.count()), ns.count()};
            unlock_guard<Lock> unlock(lock);
            return this->increment(-1, &timeout);
        }

        /**
        \brief
        Wait on the semaphore specified amount of time \p dur
        unlocking \p lock for the duration of the wait until
        predicate \p pred becomes true or timeout occurs.
        \return predicate value
        \throws bad_call
        \see \man{semtimedop,2}
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Rep, class Period, class Pred>
        bool
        wait_for(Lock& lock, const std::chrono::duration<Rep,Period>& dur, Pred pred) {
            while (!pred()) {
                if (this->wait_for(lock, dur) == std::cv_status::timeout) {
                    return pred();
                }
            }
            return true;
        }

        /**
        \brief
        Wait on the semaphore until specified time \p tp
        unlocking \p lock for the duration of the wait.
        \throws bad_call
        \see \man{semtimedop,2}
        */
        template<class Lock, class Duration>
        std::cv_status
        wait_until(Lock& lock, const std::chrono::time_point<clock_type,Duration>& tp) {
            return this->wait_for(lock, tp - clock_type::now());
        }

        /**
        \brief
        Wait on the semaphore until specified time \p tp
        unlocking \p lock for the duration of the wait until
        predicate \p pred becomes true.
        \return predicate value
        \throws bad_call
        \see \man{semtimedop,2}
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Duration, class Pred>
        bool
        wait_until(Lock& lock, const std::chrono::time_point<clock_type,Duration>& tp, Pred pred) {
            return this->wait_for(lock, tp - clock_type::now(), pred);
        }

        /**
        \brief
        Wait on the semaphore until specified time \p tp
        unlocking \p lock for the duration of the wait.
        \throws bad_call
        \see \man{semtimedop,2}
        */
        template<class Lock, class Clock, class Duration>
        std::cv_status
        wait_until(Lock& lock, const std::chrono::time_point<Clock,Duration>& tp) {
            return this->wait_for(lock, tp - Clock::now());
        }

        /**
        \brief
        Wait on the semaphore until specified time \p dur
        unlocking \p lock for the duration of the wait until
        predicate \p pred becomes true or timeout occurs.
        \return predicate value
        \throws bad_call
        \see \man{semtimedop,2}
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Clock, class Duration, class Pred>
        bool
        wait_until(Lock& lock, const std::chrono::time_point<Clock,Duration>& tp, Pred pred) {
            return this->wait_for(lock, tp - Clock::now(), pred);
        }
        #endif

    private:

        inline void
        remove() {
            UNISTDX_CHECK(::semctl(this->_sem, IPC_RMID, 0));
        }

        inline void
        increment(int how) {
            UNISTDX_PRECONDITION(how != 0);
            sembuf_type buf;
            buf.sem_num = 0;
            buf.sem_op = how;
            buf.sem_flg = SEM_UNDO;
            UNISTDX_CHECK(::semop(this->_sem, &buf, 1));
        }

        #if defined(UNISTDX_HAVE_SEMTIMEDOP)
        inline std::cv_status
        increment(int how, const timespec_type* t) {
            UNISTDX_PRECONDITION(how != 0);
            sembuf_type buf;
            buf.sem_num = 0;
            buf.sem_op = how;
            buf.sem_flg = SEM_UNDO;
            int ret = ::semtimedop(this->_sem, &buf, 1, t);
            std::cv_status st = std::cv_status::no_timeout;
            if (ret == -1) {
                if (errno == EAGAIN) {
                    st = std::cv_status::timeout;
                } else {
                    UNISTDX_THROW_BAD_CALL(); // LCOV_EXCL_LINE
                }
            }
            return st;
        }
        #endif

        sem_type _sem;
        bool _owner;
    };
    #endif

    #if defined(UNISTDX_HAVE_SEMAPHORE_H)
    /**
    \brief Semaphore, implemented using POSIX system calls.
    \date 2018-05-21
    \ingroup ipc semaphore
    \details Suitable for both processes and threads.
    */
    class posix_semaphore {

    private:
        typedef ::sem_t sem_type;
        typedef struct ::timespec timespec_type;

    public:
        /// Clock type used in this class.
        typedef std::chrono::system_clock clock_type;

        /**
        \brief Construct semaphore with specified \p type.
        \throws bad_call
        */
        inline explicit
        posix_semaphore(semaphore_type type):
        _sem()
        { this->init_sem(type); }

        inline
        ~posix_semaphore() {
            this->destroy();
        }

        /**
        \copydoc sysv_semaphore::wait()
        \see \man{sem_wait,2}
        */
        inline void
        wait() {
            UNISTDX_CHECK(::sem_wait(&_sem));
        }

        /**
        \copydoc sysv_semaphore::wait(Lock&)
        \see \man{sem_wait,2}
        */
        template<class Lock>
        void wait(Lock& lock) {
            unlock_guard<Lock> unlock(lock);
            this->wait();
        }

        /**
        \copydoc sysv_semaphore::wait(Lock&,Pred)
        \see \man{sem_wait,2}
        */
        template<class Lock, class Pred>
        void wait(Lock& lock, Pred pred) {
            while (!pred()) {
                this->wait(lock);
            }
        }

        #if defined(UNISTDX_HAVE_SEM_TIMEDWAIT)
        /**
        \copydoc sysv_semaphore::wait_for(Lock&,const std::chrono::duration<Rep,Period>&)
        \see \man{sem_timedwait,2}
        */
        template<class Lock, class Rep, class Period>
        std::cv_status
        wait_for(Lock& lock, const std::chrono::duration<Rep,Period>& dur) {
            return this->wait_until(lock, clock_type::now() + dur);
        }

        /**
        \copydoc sysv_semaphore::wait_for(Lock&,const std::chrono::duration<Rep,Period>&,Pred)
        \see \man{sem_timedwait,2}
        */
        template<class Lock, class Rep, class Period, class Pred>
        bool
        wait_for(Lock& lock, const std::chrono::duration<Rep,Period>& dur, Pred pred) {
            return this->wait_until(lock, clock_type::now() + dur, pred);
        }

        /**
        \brief
        Wait on the semaphore until specified time \p tp
        unlocking \p lock for the duration of the wait.
        \throws bad_call
        \see \man{sem_timedwait,2}
        */
        template<class Lock, class Duration>
        std::cv_status
        wait_until(Lock& lock, const std::chrono::time_point<clock_type,Duration>& tp) {
            using namespace std::chrono;
            const auto s = time_point_cast<seconds>(tp);
            const auto ns = duration_cast<nanoseconds>(tp - s);
            const timespec_type
                timeout{static_cast<std::time_t>(s.time_since_epoch().count()), ns.count()};
            unlock_guard<Lock> unlock(lock);
            std::cv_status st = std::cv_status::no_timeout;
            int ret = ::sem_timedwait(&this->_sem, &timeout);
            if (ret == -1) {
                if (errno == ETIMEDOUT) {
                    st = std::cv_status::timeout;
                } else {
                    UNISTDX_THROW_BAD_CALL(); // LCOV_EXCL_LINE
                }
            }
            return st;
        }

        /**
        \brief
        Wait on the semaphore until specified time \p tp
        unlocking \p lock for the duration of the wait until
        predicate \p pred becomes true.
        \return predicate value
        \throws bad_call
        \see \man{sem_timedwait,2}
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Duration, class Pred>
        bool
        wait_until(Lock& lock, const std::chrono::time_point<clock_type,Duration>& tp, Pred pred) {
            while (!pred()) {
                if (this->wait_until(lock, tp) == std::cv_status::timeout) {
                    return pred();
                }
            }
            return true;
        }

        /**
        \copydoc sysv_semaphore::wait_until(Lock&,const std::chrono::time_point<Clock,Duration>&)
        \see \man{sem_timedwait,2}
        */
        template<class Lock, class Clock, class Duration>
        std::cv_status
        wait_until(Lock& lock, const std::chrono::time_point<Clock,Duration>& tp) {
            typedef Clock other_clock;
            const auto delta = tp - other_clock::now();
            const auto new_tp = clock_type::now() + delta;
            return this->wait_until(lock, new_tp);
        }

        /**
        \copydoc sysv_semaphore::wait_until(Lock&,const std::chrono::time_point<Clock,Duration>&,Pred)
        */
        template<class Lock, class Clock, class Duration, class Pred>
        bool
        wait_until(Lock& lock, const std::chrono::time_point<Clock,Duration>& tp, Pred pred) {
            typedef Clock other_clock;
            const auto delta = tp - other_clock::now();
            const auto new_tp = clock_type::now() + delta;
            return this->wait_until(lock, new_tp, pred);
        }
        #endif

        /// \copydoc sysv_semaphore::notify_one
        inline void
        notify_one() {
            UNISTDX_CHECK(::sem_post(&_sem));
        }

        /// \copydoc sysv_semaphore::notify(int)
        inline void
        notify(int n) {
            for (int i=0; i<n; ++i) {
                this->notify_one();
            }
        }

    private:

        inline void
        destroy() {
            UNISTDX_CHECK(::sem_destroy(&_sem));
        }

        inline void
        init_sem(semaphore_type type) {
            UNISTDX_CHECK(::sem_init(&this->_sem, static_cast<int>(type), 0));
        }

        sem_type _sem;
    };
    #endif

}

#endif // vim:filetype=cpp
