#ifndef SYS_IPC_SHMEMBUF
#define SYS_IPC_SHMEMBUF

#include "sharedmem"
#include "process_semaphore"
#include <unistdx/base/packetbuf>
#include <unistdx/base/log_message>

namespace sys {

	template<class Ch, class Tr=std::char_traits<Ch> >
	struct basic_shmembuf: public basic_packetbuf<Ch,Tr> {

		using typename basic_packetbuf<Ch,Tr>::int_type;
		using typename basic_packetbuf<Ch,Tr>::traits_type;
		using typename basic_packetbuf<Ch,Tr>::char_type;
		using typename basic_packetbuf<Ch,Tr>::pos_type;
		using typename basic_packetbuf<Ch,Tr>::off_type;

		typedef typename sys::shared_mem<char_type> shared_mem_type;
		typedef typename shared_mem_type::size_type size_type;
		//typedef sysv_semaphore sem_type;
		typedef process_semaphore sem_type;

		struct shmem_header {
			sem_type read_sem;
			sem_type write_sem;
			pos_type goff = 0;
			pos_type poff = 0;
		};

		inline explicit
		basic_shmembuf(shared_mem_type&& rhs):
		_sharedmem(std::move(rhs)),
		_sharedpart(this->init_shared_part()) {
			this->reset();
			if (this->owner()) {
				this->read_sem().notify_one();
			}
		}

		inline shmem_header*
		init_shared_part() {
			return this->owner()
				? new (this->_sharedmem.ptr())shmem_header
				: static_cast<shmem_header*>(this->_sharedmem.ptr());
		}

		inline
		basic_shmembuf(basic_shmembuf&& rhs):
		_sharedmem(std::move(rhs._sharedmem)),
		_sharedpart(rhs._sharedpart)
		{}

		~basic_shmembuf() = default;

		inline const shared_mem_type&
		mem() const noexcept {
			return this->_sharedmem;
		}

		int_type
		overflow(int_type c = traits_type::eof()) override {
			int_type ret;
			if (c != traits_type::eof()) {
				this->grow_sharedmem();
				*this->pptr() = c;
				this->pbump(1);
				this->setg(this->eback(), this->gptr(), this->egptr()+1);
				ret = traits_type::to_int_type(c);
			} else {
				ret = traits_type::eof();
			}
			return ret;
		}

		int_type
		underflow() override {
			int_type ret;
			if (this->egptr() < this->pptr()) {
				this->setg(this->eback(), this->gptr(), this->pptr());
				ret = traits_type::to_int_type(*this->gptr());
			} else {
				ret = traits_type::eof();
			}
			return ret;
		}

		std::streamsize
		xsputn(const char_type* s, std::streamsize n) override {
			#ifndef NDEBUG
			this->debug(__func__);
			#endif
			// if buffer content was fully read by the consumer process
			if (this->egptr() == this->pptr()) {
				this->reset();
			}
			const char_type* first = s;
			const char_type* last = first + n;
			while (first != last) {
				if (this->epptr() == this->pptr()) {
					this->overflow(*first);
					++first;
				}
				const std::streamsize
				    m = std::min(last-first, this->epptr() - this->pptr());
				traits_type::copy(this->pptr(), first, m);
				this->pbump(m);
				first += m;
			}
			return n;
		}

		inline void
		reset() {
			char_type* ptr = this->_sharedmem.begin() + sizeof(shmem_header);
			this->setg(ptr, ptr, ptr);
			this->setp(ptr, this->_sharedmem.end());
			#ifndef NDEBUG
			this->debug(__func__);
			#endif
		}

		inline void
		lock() {
			if (this->owner()) {
				#ifndef NDEBUG
				this->debug("locking read");
				#endif
				this->read_sem().wait();
			} else {
				#ifndef NDEBUG
				this->debug("locking write");
				#endif
				this->write_sem().wait();
			}
			this->sync_sharedmem();
			#ifndef NDEBUG
			this->debug("locked");
			#endif
		}

		inline void
		unlock() {
			this->writeoffs();
			if (this->owner()) {
				this->write_sem().notify_one();
			} else {
				this->read_sem().notify_one();
			}
			#ifndef NDEBUG
			this->debug("unlock");
			#endif
		}

		inline bool
		owner() const noexcept {
			return this->mem().owner();
		}

	private:

		inline sem_type&
		read_sem() {
			return this->_sharedpart->read_sem;
		}

		inline sem_type&
		write_sem() {
			return this->_sharedpart->write_sem;
		}

		#ifndef NDEBUG
		void
		debug(const char* func) {
			log_message(
				"shmembuf",
				"_ _: goff=_,poff=_,gptr=_,pptr=_,shmem=_",
				::getpid(),
				func,
				this->_sharedpart->goff,
				this->_sharedpart->poff,
			    static_cast<std::ptrdiff_t>(this->gptr() - this->eback()),
			    static_cast<std::ptrdiff_t>(this->pptr() - this->pbase()),
				this->_sharedmem
			);
		}

		#endif

		inline void
		grow_sharedmem() {
			#ifndef NDEBUG
			debug("grow");
			#endif
			/*
			_sharedmem.resize(_sharedmem.size() * size_type(2));
			_sharedpart = static_cast<shmem_header*>(_sharedmem.ptr());
			*/
			this->updatebufs();
			#ifndef NDEBUG
			debug("after grow");
			#endif
		}

		inline void
		sync_sharedmem() {
			//this->_sharedmem.sync();
			this->_sharedpart = static_cast<shmem_header*>(_sharedmem.ptr());
			this->readoffs();
		}

		inline void
		updatebufs() {
			const std::ptrdiff_t poff = this->pptr() - this->pbase();
			const std::ptrdiff_t goff = this->gptr() - this->eback();
			char_type* base = _sharedmem.begin() + sizeof(shmem_header);
			char_type* end = _sharedmem.end();
			this->setp(base, end);
			this->pbump(poff);
			this->setg(base, base + goff, base + poff);
		}

		inline void
		writeoffs() {
			_sharedpart->goff = static_cast<pos_type>(this->gptr() -
			                                          this->eback());
			_sharedpart->poff = static_cast<pos_type>(this->pptr() -
			                                          this->pbase());
			#ifndef NDEBUG
			this->debug(__func__);
			#endif
		}

		inline void
		readoffs() {
			const pos_type goff = _sharedpart->goff;
			const pos_type poff = _sharedpart->poff;
			char_type* base = _sharedmem.begin() + sizeof(shmem_header);
			char_type* end = _sharedmem.end();
			this->setp(base, end);
			this->pbump(poff);
			this->setg(base, base + goff, base + poff);
			#ifndef NDEBUG
			this->debug(__func__);
			#endif
		}

		sys::shared_mem<char_type> _sharedmem;
		shmem_header* _sharedpart = nullptr;

	};

	typedef basic_shmembuf<char> shmembuf;

}

#endif // SYS_IPC_SHMEMBUF vim:filetype=cpp
