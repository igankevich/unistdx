/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IPC_PROCESS_STATUS
#define UNISTDX_IPC_PROCESS_STATUS

#include <sys/wait.h>

#include <unistdx/ipc/signal>

namespace sys {

    /// Process exit code type.
    typedef int code_type;

    /**
    \brief Alias for signinfo_t;
    \date 2018-05-21
    \ingroup ipc
    */
    typedef ::siginfo_t siginfo_type;

    /**
    \brief Alias for pid_t;
    \date 2018-05-21
    \ingroup ipc
    */
    typedef ::pid_t pid_type;

    /**
    \brief
    A \link process_status \endlink object that tells how the process
    was terminated.
    \date 2018-05-21
    \ingroup ipc wrapper
    \details Wraps \link siginfo_type \endlink.
    */
    struct process_status {

    public:
        /// \brief Reasons for process status change.
        /// \see \man{wait,2}
        enum struct reason {
            /// Process exited by calling \man{exit,2}.
            exited = CLD_EXITED,
            /// Process was killed by a signal.
            killed = CLD_KILLED,
            /// Process was killed by a signal and dumped a core.
            core_dumped = CLD_DUMPED,
            /// Process execution was stopped by a signal.
            stopped = CLD_STOPPED,
            /// Traced process was trapped.
            trapped = CLD_TRAPPED,
            /**
            Process execution was continued with \link signal::resume \endlink signal.
            */
            continued = CLD_CONTINUED
        };

    private:
        reason _reason = static_cast<reason>(0);
        code_type _code = 0;
        pid_type _pid = 0;

    public:

        /// Construct process info from signal info.
        inline explicit constexpr
        process_status(const siginfo_type& rhs) noexcept:
        _reason(static_cast<reason>(rhs.si_code)),
        _code(rhs.si_status),
        _pid(rhs.si_pid) {}

        inline constexpr
        process_status() noexcept = default;

        /// Copy-constructor.
        inline constexpr
        process_status(const process_status&) noexcept = default;

        /// Get process status code.
        inline constexpr reason
        what() const noexcept {
            return this->_reason;
        }

        /// \copydoc what
        inline constexpr reason
        status() const noexcept {
            return this->_reason;
        }

        /// Process has exited.
        inline constexpr bool
        exited() const noexcept {
            return this->_reason == reason::exited;
        }

        /// Process has beed killed.
        inline constexpr bool
        killed() const noexcept {
            return this->_reason == reason::killed;
        }

        /// Process has beed stopped.
        inline constexpr bool
        stopped() const noexcept {
            return this->_reason == reason::stopped;
        }

        /// Process has dumped the core.
        inline constexpr bool
        core_dumped() const noexcept {
            return this->_reason == reason::core_dumped;
        }

        /// Process has been trapped.
        inline constexpr bool
        trapped() const noexcept {
            return this->_reason == reason::trapped;
        }

        /// Process received a signal to continue execution after a stop.
        inline constexpr bool
        continued() const noexcept {
            return this->_reason == reason::continued;
        }

        /// Get process exit code.
        inline constexpr code_type
        exit_code() const noexcept {
            return this->_code;
        }

        /// Get process termination signal.
        inline constexpr signal
        term_signal() const noexcept {
            return signal(this->_code);
        }

        /// Get process stop signal.
        inline constexpr signal
        stop_signal() const noexcept {
            return signal(this->_code);
        }

        /// Get process ID.
        inline constexpr pid_type
        pid() const noexcept {
            return this->_pid;
        }

        /// Get process status string.
        inline const char*
        status_string() const noexcept {
            switch (this->_reason) {
                case reason::exited: return "exited";
                case reason::killed: return "killed";
                case reason::core_dumped: return "core_dumped";
                case reason::stopped: return "stopped";
                case reason::continued: return "continued";
                case reason::trapped: return "trapped";
                default: return "unknown";
            }
        }

    };

    /**
    \brief Output PID, exit status, exit code/termination signal.
    \date 2018-05-21
    */
    std::ostream&
    operator<<(std::ostream& out, const process_status& rhs);

}

#endif // vim:filetype=cpp
