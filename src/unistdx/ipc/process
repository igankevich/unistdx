/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IPC_PROCESS
#define UNISTDX_IPC_PROCESS

#include <unistdx/config>

#include <unistd.h>
#if defined(UNISTDX_HAVE_CLONE)
#include <sched.h>
#endif
#if defined(UNISTDX_HAVE_PRCTL)
#include <sys/prctl.h>
#endif

#include <unistdx/base/check>
#include <unistdx/bits/safe_calls>
#include <unistdx/ipc/proc_info>
#include <unistdx/ipc/proc_status>
#include <unistdx/ipc/signal>

namespace sys {

	typedef ::pid_t pid_type;

	inline void
	send(signal s, pid_type p) {
		UNISTDX_CHECK(::kill(p, signal_type(s)));
	}

	namespace this_process {

		inline pid_type
		id() noexcept { return ::getpid(); }

		inline pid_type
		parent_id() noexcept { return ::getppid(); }

		inline pid_type
		fork() {
			bits::global_lock_type lock(bits::__forkmutex);
			return ::fork();
		}

		inline void
		send(signal sig) {
			UNISTDX_CHECK(::kill(::sys::this_process::id(), signal_type(sig)));
		}

		inline void
		workdir(const char* wd) {
			UNISTDX_CHECK(::chdir(wd));
		}

		inline void
		set_group_id(pid_type rhs) {
			UNISTDX_CHECK(::setpgid(::sys::this_process::id(), rhs));
		}

		#if defined(UNISTDX_HAVE_PRCTL)
		inline void
		set_name(const char* name) {
			UNISTDX_CHECK(::prctl(PR_SET_NAME, name));
		}

		inline std::string
		name() {
			std::string nm(16, '\0');
			UNISTDX_CHECK(::prctl(PR_GET_NAME, nm.data()));
			return nm;
		}
		#endif

	}

	enum wait_flags {
		proc_exited = WEXITED,
		proc_stopped = WSTOPPED,
		proc_continued = WCONTINUED
	};

	enum class process_flag {
		fork
		#if defined(UNISTDX_HAVE_CLONE)
		, wait_for_exec
		#endif
	};

	template <class F>
	int
	child_main(void* arg) {
		F* func = reinterpret_cast<F*>(arg);
		int ret;
		try {
			ret = (*func)();
		} catch (...) {
			ret = 1;
		}
		std::exit(ret);
	}


	struct process {

		template<class F>
		inline explicit
		process(F f, process_flag pf=process_flag::fork) {
			if (pf == process_flag::fork) {
				this->_pid = this_process::fork();
				if (this->_pid == 0) {
					int ret;
					try {
						ret = f();
					} catch (...) {
						ret = 1;
					}
					std::exit(ret);
				}
			#if defined(UNISTDX_HAVE_CLONE)
			} else if (pf == process_flag::wait_for_exec) {
				char stack[4096] = {0};
				UNISTDX_CHECK(this->_pid = ::clone(
					&child_main<F>,
					stack + sizeof(stack),
					CLONE_VFORK | SIGCHLD,
					&f
				));
			#endif
			}
		}

		inline explicit
		process(pid_type rhs) noexcept:
		_pid(rhs)
		{}

		inline process() = default;
		process(const process&) = delete;

		inline
		process(process&& rhs) noexcept:
		_pid(rhs._pid)
		{
			rhs._pid = 0;
		}

		inline
		~process() {
			if (_pid > 0) {
				this->do_kill(sys::signal::terminate);
			}
		}

		inline process&
		operator=(process&& rhs) noexcept {
			std::swap(_pid, rhs._pid);
			return *this;
		}

		inline void terminate() { this->send(sys::signal::terminate); }
		inline void kill() { this->send(sys::signal::kill); }
		inline void interrupt() { this->send(sys::signal::keyboard_interrupt); }
		inline void hang_up() { this->send(sys::signal::hang_up); }

		inline void
		send(sys::signal sig) {
			if (this->_pid > 0) {
		    	UNISTDX_CHECK(do_kill(sig));
			}
		}

		inline sys::proc_status
		wait() {
			int stat = 0;
			if (this->_pid > 0) {
				UNISTDX_CHECK_IF_NOT(EINTR, ::waitpid(_pid, &stat, 0));
				this->_pid = 0;
			}
			return sys::proc_status(stat);
		}

		inline explicit
		operator bool() const noexcept {
			return _pid > 0 && do_kill(sys::signal(0)) != -1;
		}

		inline bool
		operator !() const noexcept {
			return !operator bool();
		}

		friend std::ostream&
		operator<<(std::ostream& out, const process& rhs);

		inline pid_type
		id() const noexcept {
			return _pid;
		}

		inline pid_type
		group_id() const noexcept {
			return ::getpgid(_pid);
		}

		inline void
		set_group_id(pid_type rhs) const {
			UNISTDX_CHECK(::setpgid(_pid, rhs));
		}

		/// std::thread interface
		inline bool joinable() { return true; }
		inline void join() { wait(); }

	private:

		inline int
		do_kill(sys::signal sig) const noexcept {
		   	return ::kill(_pid, signal_type(sig));
		}

		pid_type _pid = 0;

	};

	std::ostream&
	operator<<(std::ostream& out, const process& rhs);

}

#endif // vim:filetype=cpp
