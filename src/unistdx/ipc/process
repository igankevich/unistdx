/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020, 2021 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IPC_PROCESS
#define UNISTDX_IPC_PROCESS

#include <iosfwd>
#include <memory>

#include <unistdx/config>

#include <unistd.h>
#if defined(UNISTDX_HAVE_SCHED_H)
#include <sched.h>
#endif
#if defined(UNISTDX_HAVE_PRCTL)
#include <sys/prctl.h>
#endif
#if defined(UNISTDX_HAVE_SYS_TIME_H)
#include <sys/time.h>
#endif
#if defined(UNISTDX_HAVE_SYS_RESOURCE_H)
#include <sys/resource.h>
#endif

#include <unistdx/base/check>
#include <unistdx/base/contracts>
#include <unistdx/base/flag>
#include <unistdx/bits/macros>
#include <unistdx/bits/process>
#include <unistdx/bits/safe_calls>
#include <unistdx/io/fildes>
#include <unistdx/ipc/cpu_set>
#include <unistdx/ipc/process_status>
#include <unistdx/ipc/signal>

namespace sys {

    typedef ::pid_t pid_type;
    typedef ::id_t id_type;

    enum class unshare_flag: int {
        #if defined(UNISTDX_HAVE_CLONE_FILES)
        file_descriptors = CLONE_FILES,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_FS)
        file_system = CLONE_FS,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWCGROUP)
        control_groups = CLONE_NEWCGROUP,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWIPC)
        ipc = CLONE_NEWIPC,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWNET)
        network = CLONE_NEWNET,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWNS)
        mount_points = CLONE_NEWNS,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWPID)
        processes = CLONE_NEWPID,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWUSER)
        users = CLONE_NEWUSER,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWUTS)
        hostname = CLONE_NEWUTS,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_SYSVSEM)
        ipc_sysv = CLONE_SYSVSEM,
        #endif
    };

    template <>
    struct is_flag<unshare_flag>: public std::true_type {};

    enum class namespace_type {
        any = 0,
        #if defined(UNISTDX_HAVE_CLONE_NEWCGROUP)
        control_groups = CLONE_NEWCGROUP,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWIPC)
        ipc = CLONE_NEWIPC,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWNET)
        network = CLONE_NEWNET,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWNS)
        mount_points = CLONE_NEWNS,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWPID)
        processes = CLONE_NEWPID,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWUSER)
        users = CLONE_NEWUSER,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWUTS)
        hostname = CLONE_NEWUTS,
        #endif
    };

    enum class scheduling_policies {
        #if defined(SCHED_OTHER)
        other=SCHED_OTHER,
        #endif
        #if defined(SCHED_FIFO)
        first_in_first_out=SCHED_FIFO,
        #endif
        #if defined(SCHED_RR)
        round_robin=SCHED_RR,
        #endif
        #if defined(SCHED_BATCH)
        batch=SCHED_BATCH,
        #endif
        #if defined(SCHED_ISO)
        iso=SCHED_ISO,
        #endif
        #if defined(SCHED_IDLE)
        idle=SCHED_IDLE,
        #endif
        #if defined(SCHED_DEADLINE)
        deadline=SCHED_DEADLINE,
        #endif
        #if defined(SCHED_RESET_ON_FORK)
        reset_on_fork=SCHED_RESET_ON_FORK,
        #endif
    };

    inline int min_priority(scheduling_policies policy) {
        int ret = ::sched_get_priority_min(int(policy));
        UNISTDX_CHECK(ret);
        return ret;
    }

    inline int max_priority(scheduling_policies policy) {
        int ret = ::sched_get_priority_max(int(policy));
        UNISTDX_CHECK(ret);
        return ret;
    }

    using scheduling_policy_parameter = ::sched_param;
    //using scheduling_attributes = ::sched_attr;

    inline void user_priority(uid_type user, int value) {
        UNISTDX_CHECK(::setpriority(PRIO_USER, user, value));
    }

    inline int user_priority(uid_type uid) {
        errno = 0;
        int ret = ::getpriority(PRIO_USER, uid);
        if (errno != 0) { UNISTDX_CHECK(ret); }
        return ret;
    }

    inline void process_group_priority(id_type pgrp, int value) {
        UNISTDX_CHECK(::setpriority(PRIO_PGRP, pgrp, value));
    }

    inline int process_group_priority(id_type pgrp) {
        errno = 0;
        int ret = ::getpriority(PRIO_PGRP, pgrp);
        if (errno != 0) { UNISTDX_CHECK(ret); }
        return ret;
    }

    namespace this_process {

        /**
        \brief Get calling process ID.
        \see \man{getpid,2}
        */
        inline pid_type
        id() noexcept { return ::getpid(); }

        /**
        \brief Get calling process' parent ID.
        \see \man{getppid,2}
        */
        inline pid_type
        parent_id() noexcept { return ::getppid(); }

        /**
        \brief Fork child process preventing race conditions by
        locking global fork mutex (if needed).
        \throws bad_call
        \see \man{fork,2}
        \details
        The mutex is not locked on systems supporting close-on-exec and
        non-blocking file descriptor flags.
        */
        inline pid_type
        fork() {
            #if defined(UNISTDX_FORK_MUTEX)
            bits::global_lock_type lock(bits::fork_mutex);
            #endif
            pid_type ret;
            UNISTDX_CHECK(ret = ::fork());
            return ret;
        }

        /**
        \brief Set current process' working directory.
        \date 2018-05-21
        \throws bad_call
        \see \man{chdir,2}
        */
        inline void
        workdir(const char* wd) {
            UNISTDX_CHECK(::chdir(wd));
        }

        inline void root(const char* new_root) { check(::chroot(new_root)); }

        /**
        \brief Get process group ID of the calling process.
        \see \man{getpgrp,2}
        */
        inline pid_type group_id() { return ::getpgrp(); }

        #if defined(UNISTDX_HAVE_PRCTL)
        /**
        \brief Set calling process name. Useful for debugging multi-threaded programmes.
        \throws bad_call
        \see \man{prctl,2}
        */
        inline void name(const char* name) { UNISTDX_CHECK(::prctl(PR_SET_NAME, name)); }

        /**
        \brief Get calling process name.
        \throws bad_call
        \see \man{prctl,2}
        */
        inline std::string
        name() {
            std::string nm(16, '\0');
            UNISTDX_CHECK(::prctl(PR_GET_NAME, nm.data()));
            return nm;
        }
        #endif

        #if defined(UNISTDX_HAVE_UNSHARE)
        inline void unshare(unshare_flag flags) {
            UNISTDX_CHECK(::unshare(static_cast<int>(flags)));
        }
        #endif

        #if defined(UNISTDX_HAVE_SETNS)
        inline void enter(fd_type fd, namespace_type ns=namespace_type::any) {
            UNISTDX_CHECK(::setns(fd, static_cast<int>(ns)));
        }
        #endif

        fildes get_namespace(const char* proc_suffix);

        inline void hostname(const_string name) {
            UNISTDX_CHECK(::sethostname(name.data(), name.size()));
        }

        std::string hostname();

        inline void yield() noexcept { ::sched_yield(); }

        inline std::errc pause() { return std::errc(::pause()); }

    }

    /**
    \brief
    Flags used by \man{waitid,2} system call.
    \date 2018-05-21
    \ingroup ipc
    */
    enum class wait_flags: int {
        /// Process exited by calling \man{exit,2}.
        exited = WEXITED,
        /// Process execution was stopped by a signal.
        stopped = WSTOPPED,
        /**
        Process execution was resumed with \link signal::resume \endlink signal.
        */
        resumed = WCONTINUED,
        /// Return immediately, do not wait for child process to exit.
        non_blocking = WNOHANG
    };

    template <>
    struct is_flag<wait_flags>: public std::true_type {};

    /**
    \brief
    Flags used by \man{clone,2} system call.
    \date 2018-05-21
    */
    enum class process_flag: int {
        fork = 0,
        signal_parent = SIGCHLD,
        #if defined(UNISTDX_HAVE_CLONE)
        wait_for_exec = CLONE_VFORK,
        new_process_namespace = CLONE_NEWPID,
        #endif
        share_memory = CLONE_VM,
        share_signal_handlesr = CLONE_SIGHAND,
        share_ipc_sysv = CLONE_SYSVSEM,
        #if defined(UNISTDX_HAVE_CLONE_FILES)
        share_file_descriptors = CLONE_FILES,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_FS)
        share_file_system = CLONE_FS,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWCGROUP)
        unshare_control_groups = CLONE_NEWCGROUP,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWIPC)
        unshare_ipc = CLONE_NEWIPC,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWNET)
        unshare_network = CLONE_NEWNET,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWNS)
        unshare_mount_points = CLONE_NEWNS,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWPID)
        unshare_processes = CLONE_NEWPID,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWUSER)
        unshare_users = CLONE_NEWUSER,
        #endif
        #if defined(UNISTDX_HAVE_CLONE_NEWUTS)
        unshare_hostname = CLONE_NEWUTS,
        #endif
    };

    template <>
    struct is_flag<process_flag>: public std::true_type {};

    class process_view {

    protected:
        pid_type _pid = 0;

    public:
        inline explicit process_view(pid_type pid): _pid(pid) {}
        process_view() = default;
        ~process_view() = default;
        process_view(const process_view&) = default;
        process_view& operator=(const process_view&) = default;
        process_view(process_view&&) = default;
        process_view& operator=(process_view&&) = default;

        /**
        Gracefully terminate the process by sending \link signal::terminate \endlink
        signal.
        \see \man{kill,2}
        */
        inline void terminate() { this->send(sys::signal::terminate); }

        /**
        \brief
        Forcibly terminate the process by sending \link signal::kill \endlink
        signal.
        \throws bad_call
        \see \man{kill,2}
        */
        inline void kill() { this->send(sys::signal::kill); }

        /**
        \brief
        Interrupt the process by sending \link signal::keyboard_interrupt \endlink
        signal.
        \throws bad_call
        \see \man{kill,2}
        */
        inline void interrupt() { this->send(sys::signal::keyboard_interrupt); }

        /**
        \brief
        Interrupt the process by sending \link signal::hang_up \endlink signal.
        \throws bad_call
        \see \man{kill,2}
        */
        inline void hang_up() { this->send(sys::signal::hang_up); }

        /**
        \brief
        Interrupt the process by sending \link signal::stop \endlink signal.
        \throws bad_call
        \see \man{kill,2}
        */
        inline void stop() { this->send(sys::signal::stop); }

        /**
        \brief
        Interrupt the process by sending \link signal::resume \endlink signal.
        \throws bad_call
        \see \man{kill,2}
        */
        inline void resume() { this->send(sys::signal::resume); }

        /**
        \brief Send signal \p s to the process.
        \throws bad_call
        */
        inline void send(sys::signal s) { UNISTDX_CHECK(this->do_kill(s)); }

        /// Get process ID.
        inline pid_type id() const { return this->_pid; }

        /**
        \brief Get process group ID.
        \see \man{getpgid,2}
        */
        inline pid_type group_id() const { return ::getpgid(this->_pid); }

        /**
        \brief Set process group ID.
        \throws bad_call
        \see \man{setpgid,2}
        */
        inline void
        group_id(pid_type rhs) const {
            UNISTDX_CHECK(::setpgid(this->_pid, rhs));
        }

        /**
        \brief Wait until process changes its state or terminates.
        \throws bad_call if system error occurs, except
        \c std::errc::interrupted
        \see std::errc
        \see \man{waitpid,2}
        */
        inline sys::process_status
        wait(wait_flags flags = wait_flags::exited) {
            sys::siginfo_type info{};
            UNISTDX_CHECK(::waitid(P_PID, this->_pid, &info, int(flags)));
            sys::process_status status(info);
            if (status.exited()) { this->_pid = 0; }
            return status;
        }

        /// Check if process is alive by sending nought signal to it.
        inline explicit
        operator bool() const { return this->_pid > 0 && do_kill(sys::signal{}) != -1; }

        /// Check if process is alive by sending nought signal to it.
        inline bool operator !() const { return !this->operator bool(); }

        /// Always returns true to be compatible with \link std::thread \endlink.
        inline bool joinable() const { return true; }

        /// \copydoc wait
        inline void join() { this->wait(); }

        fildes get_namespace(const char* proc_suffix);

        void init_user_namespace();

        inline void priority(int value) {
            UNISTDX_CHECK(::setpriority(PRIO_PROCESS, this->_pid, value));
        }

        inline int priority() {
            errno = 0;
            int ret = ::getpriority(PRIO_PROCESS, this->_pid);
            if (errno != 0) { UNISTDX_CHECK(ret); }
            return ret;
        }

        inline scheduling_policies scheduling_policy() const {
            int ret = ::sched_getscheduler(this->_pid);
            UNISTDX_CHECK(ret);
            return scheduling_policies(ret);
        }

        inline void scheduling_policy(scheduling_policies value,
                                      const scheduling_policy_parameter& param) {
            UNISTDX_CHECK(::sched_setscheduler(this->_pid, int(value), &param));
        }

        inline scheduling_policy_parameter scheduling_parameters() const {
            scheduling_policy_parameter params;
            UNISTDX_CHECK(::sched_getparam(this->_pid, &params));
            return params;
        }

        inline void scheduling_parameters(const scheduling_policy_parameter& params) {
            UNISTDX_CHECK(::sched_setparam(this->_pid, &params));
        }

        /*
        inline void scheduler(const scheduling_attributes& attrs) {
            UNISTDX_CHECK(::sched_setattr(this->_pid, &attrs, 0));
        }

        inline scheduling_attributes scheduler() const {
            scheduling_attributes attrs;
            UNISTDX_CHECK(::sched_getattr(this->_pid, &attrs,
                                          sizeof(scheduling_attributes), 0));
            return attrs;
        }
        */

        dynamic_cpu_set cpus() const;

        inline static_cpu_set cpu_affinity() const {
            static_cpu_set mask;
            check(::sched_getaffinity(this->_pid, mask.size_in_bytes(), &mask));
            return mask;
        }

        inline void cpus(const dynamic_cpu_set& mask) {
            UNISTDX_CHECK(::sched_setaffinity(this->_pid, mask.size_in_bytes(), mask.get()));
        }

        inline void cpu_affinity(const static_cpu_set& mask) {
            UNISTDX_CHECK(::sched_setaffinity(this->_pid, mask.size_in_bytes(), &mask));
        }

    protected:

        inline int do_kill(sys::signal sig) const noexcept {
            return ::kill(this->_pid, signal_type(sig));
        }

    };

    /**
    \brief
    System process with \link std::thread \endlink interface.
    \date 2018-05-21
    \ingroup ipc
    */
    class process: public process_view {

    public:
        using stack_ptr = std::unique_ptr<char[]>;
        using flags = process_flag;

    private:
        stack_ptr _stack;

    public:

        /**
        \brief Construct new process by forking a child with \p f as main function.
        \throws bad_call
        \see \man{clone,2}
        \see \man{fork,2}
        */
        template<class F>
        inline explicit
        process(F&& f, process_flag flags=process_flag::fork, size_t stack_size=4096*8) {
            typedef bits::call_traits<decltype(f())> traits_type;
            if (flags == process_flag::fork) {
                this->_pid = this_process::fork();
                if (this->_pid == 0) {
                    std::exit(traits_type::call(f));
                }
            #if defined(UNISTDX_HAVE_CLONE)
            } else {
                this->_stack.reset(new char[stack_size]);
                this->_pid = ::clone(
                    &traits_type::template child_main<F>,
                    this->_stack.get() + stack_size,
                    static_cast<int>(flags),
                    std::addressof(f)
                );
                // do not delete the stack for threads
                if (!(flags & process_flag::share_memory)) { this->_stack.reset(); }
                UNISTDX_CHECK(this->_pid);
            #endif
            }
        }

        /// Construct process by its ID.
        inline explicit process(pid_type rhs): process_view(rhs) {}

        inline process() = default;
        process(const process&) = delete;

        /// Move-constructor.
        inline process(process&& rhs): process_view(rhs._pid), _stack(std::move(rhs._stack))
        { rhs._pid = 0; }

        /// Terminates the process, if any.
        inline ~process() { if (this->_pid > 0) { this->do_kill(sys::signal::terminate); } }

        /// Move-assignment.
        inline process& operator=(process&& rhs) { this->swap(rhs); return *this; }

        /// Swap with \p rhs.
        inline void swap(process& rhs) {
            std::swap(this->_pid, rhs._pid);
            std::swap(this->_stack, rhs._stack);
        }

        /**
        \brief Wait until process changes its state or terminates.
        \throws bad_call if system error occurs, except
        \c std::errc::interrupted
        \see std::errc
        \see \man{waitpid,2}
        */
        inline sys::process_status
        wait(wait_flags flags = wait_flags::exited) {
            sys::siginfo_type info;
            UNISTDX_CHECK(::waitid(P_PID, this->_pid, &info, int(flags)));
            sys::process_status status(info);
            if (status.exited()) { this->_stack.reset(); }
            return status;
        }

    };

    /// Overload of \link std::swap \endlink for \link process \endlink.
    inline void
    swap(process& lhs, process& rhs) {
        lhs.swap(rhs);
    }

    /// Output process ID and process group ID.
    std::ostream&
    operator<<(std::ostream& out, const process& rhs);


    namespace this_process {

        inline void priority(int value) { process_view(0).priority(value); }
        inline int priority() { return process_view(0).priority(); }
        inline int user_priority() { return ::sys::user_priority(0); }

        inline scheduling_policies scheduling_policy() {
            return process_view(0).scheduling_policy();
        }

        inline void scheduling_policy(scheduling_policies value,
                                      const scheduling_policy_parameter& param) {
            process_view(0).scheduling_policy(value, param);
        }

        inline scheduling_policy_parameter scheduling_parameters() {
            return process_view(0).scheduling_parameters();
        }

        inline void scheduling_parameters(const scheduling_policy_parameter& params) {
            process_view(0).scheduling_parameters(params);
        }

        inline dynamic_cpu_set cpus() {
            return process_view(0).cpus();
        }

        inline static_cpu_set cpu_affinity() {
            return process_view(0).cpu_affinity();
        }

        inline void cpus(const dynamic_cpu_set& mask) {
            process_view(0).cpus(mask);
        }

        inline void cpu_affinity(const static_cpu_set& mask) { process_view(0).cpu_affinity(mask); }

        /**
        \brief
        Send signal \p s to the current process.
        \date 2018-05-21
        \throws bad_call
        \see \man{kill,2}
        */
        inline void send(signal s) { process_view(::sys::this_process::id()).send(s); }

        /**
        \brief Set calling process group ID.
        \throws bad_call
        \see \man{setpgid,2}
        */
        inline void group_id(pid_type rhs) { process_view(0).group_id(rhs); }

    }

    /**
    \brief
    Send signal \p s to process \p p.
    \date 2018-05-21
    \throw bad_call
    \see \man{kill,2}
    \deprecated use process_view(p).send(s) instead.
    */
    UNISTDX_DEPRECATED inline void send(signal s, pid_type p) { process_view(p).send(s); }

    [[noreturn]] inline void exit(int status) noexcept { ::_exit(status); }

    inline void enable_process_accounting(c_string path) { check(::acct(path.data())); }
    inline void disable_process_accounting() { check(::acct(nullptr)); }

}

#endif // vim:filetype=cpp
