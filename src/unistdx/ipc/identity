/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IPC_IDENTITY
#define UNISTDX_IPC_IDENTITY

#include <sys/types.h>
#include <unistd.h>

#include <unistdx/base/check>

namespace sys {

    typedef ::pid_t pid_type;
    /// Alias for \c uid_t.
    typedef ::uid_t uid_type;
    /// Alias for \c gid_t.
    typedef ::gid_t gid_type;

    /// Superuser ID. Always returns 0.
    inline constexpr uid_type superuser() noexcept { return 0; }

    /// Superuser group ID. Always returns 0.
    inline constexpr gid_type supergroup() noexcept { return 0; }

    namespace this_process {

        /**
        \brief Get real UID of the current process.
        \see \man{getuid,2}
        */
        inline uid_type user() noexcept { return ::getuid(); }

        /**
        \brief Change process' user.
        \throws bad_call
        \see \man{setuid,2}
        \arg Set both real and effective UID of the current process (if priviledged).
        \arg Set only effective UID of the current process (if unpriviledged).
        */
        inline void user(uid_type rhs) { UNISTDX_CHECK(::setuid(rhs)); }

        /**
        \brief Get effective UID of the current process.
        \see \man{geteuid,2}
        */
        inline uid_type effective_user() noexcept { return ::geteuid(); }

        /**
        \brief Get real GID of the current process.
        \see \man{getgid,2}
        */
        inline gid_type group() noexcept { return ::getgid(); }

        /**
        \brief Change process' group.
        \throws bad_call
        \see \man{setgid,2}
        \arg Set both real and effective GID of the current process (if priviledged).
        \arg Set only effective GID of the current process (if unpriviledged).
        */
        inline void group(gid_type rhs) { UNISTDX_CHECK(::setgid(rhs)); }

        /**
        \brief Get effective GID of the current process.
        \see \man{getegid,2}
        */
        inline gid_type effective_group() noexcept { return ::getegid(); }

        /**
        \brief Set both UID and GID of the current process.
        \date 2018-05-21
        \ingroup ipc
        \throws bad_call
        \see \man{setuid,2}
        \see \man{setgid,2}
        \details
        \arg Sets GID first.
        \arg Reverts process UID and GID upon error.
        */
        void set_identity(uid_type uid, gid_type gid);

    }

}

#endif // vim:filetype=cpp
