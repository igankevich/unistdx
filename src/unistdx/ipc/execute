#ifndef UNISTDX_IPC_EXECUTE
#define UNISTDX_IPC_EXECUTE

#include <unistd.h>

#include <unistdx/base/check>
#include <unistdx/ipc/argstream>

namespace sys {

	namespace this_process {

		template<class ... Args>
		int
		exec(const Args& ... args) {
			sys::argstream str;
			str.append(args ...);
			assert(str.argc() == sizeof ... (Args));
			char** argv = str.argv();
			int ret;
			UNISTDX_CHECK(ret = ::execv(argv[0], argv));
			return ret;
		}

		inline int
		execute(char* const argv[], char* const envp[]) {
			int ret;
			UNISTDX_CHECK(ret = ::execve(argv[0], argv, envp));
			return ret;
		}

		inline int
		execute(char* const argv[]) {
			int ret;
			UNISTDX_CHECK(ret = ::execv(argv[0], argv));
			return ret;
		}

		template<class ... Args>
		int
		execute_command(const Args& ... args) {
			sys::argstream str;
			str.append(args ...);
			assert(str.argc() == sizeof ... (Args));
			char** argv = str.argv();
			int ret;
			UNISTDX_CHECK(ret = ::execvp(argv[0], argv));
			return ret;
		}

		inline int
		exec_command(char* const argv[]) {
			int ret;
			UNISTDX_CHECK(ret = ::execvp(argv[0], argv));
			return ret;
		}

		inline int
		exec_command(char* const argv[], char* const envp[]) {
			int ret;
			UNISTDX_CHECK(ret = ::execvpe(argv[0], argv, envp));
			return ret;
		}

	}

}

#endif // vim:filetype=cpp
