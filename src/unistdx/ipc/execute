/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IPC_EXECUTE
#define UNISTDX_IPC_EXECUTE

#include <unistd.h>

#include <unistdx/base/check>
#include <unistdx/ipc/argstream>

namespace sys {

	namespace this_process {

		template<class ... Args>
		int
		exec(const Args& ... args) {
			sys::argstream str;
			str.append(args ...);
			assert(str.argc() == sizeof ... (Args));
			char** argv = str.argv();
			int ret;
			UNISTDX_CHECK(ret = ::execv(argv[0], argv));
			return ret;
		}

		inline int
		execute(char* const argv[], char* const envp[]) {
			int ret;
			UNISTDX_CHECK(ret = ::execve(argv[0], argv, envp));
			return ret;
		}

		inline int
		execute(char* const argv[]) {
			int ret;
			UNISTDX_CHECK(ret = ::execv(argv[0], argv));
			return ret;
		}

		template<class ... Args>
		int
		execute_command(const Args& ... args) {
			sys::argstream str;
			str.append(args ...);
			assert(str.argc() == sizeof ... (Args));
			char** argv = str.argv();
			int ret;
			UNISTDX_CHECK(ret = ::execvp(argv[0], argv));
			return ret;
		}

		inline int
		exec_command(char* const argv[]) {
			int ret;
			UNISTDX_CHECK(ret = ::execvp(argv[0], argv));
			return ret;
		}

		inline int
		exec_command(char* const argv[], char* const envp[]) {
			int ret;
			UNISTDX_CHECK(ret = ::execvpe(argv[0], argv, envp));
			return ret;
		}

	}

}

#endif // vim:filetype=cpp
