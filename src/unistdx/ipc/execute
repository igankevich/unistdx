#ifndef UNISTDX_IPC_EXECUTE
#define UNISTDX_IPC_EXECUTE

#include <unistd.h>

#include <unistdx/base/check>
#include <unistdx/bits/macros>
#include <unistdx/ipc/argstream>

namespace sys {

	namespace this_process {

		/**
		\brief
		Execute child process with arguments \p argv and environment \p envp.
		\date 2018-05-21
		\author Ivan Gankevich
		\ingroup ipc
		\throws bad_call
		\details
		\arg The executable path is specified as the first argument.
		\arg The executable name is \e not searched in \c PATH.

		\par How-tos:
		\ref execute
		\see argstream
		\see \man{execve,2}
		*/
		[[noreturn]] inline void
		execute(char* const argv[], char* const envp[]) {
			UNISTDX_CHECK(::execve(argv[0], argv, envp));
			UNISTDX_UNREACHABLE();
		}

		/**
		\brief Execute child process with arguments \p args and environment \p env.
		\ingroup ipc
		\details \copydetails execute(char* const[], char* const[])
		*/
		[[noreturn]] inline void
		execute(const argstream& args, const argstream& env) {
			execute(args.argv(), env.argv());
		}

		/**
		\brief
		Execute child process with arguments \p argv and calling process environment.
		\ingroup ipc
		\details \copydetails execute(char* const[], char* const[])
		\see \man{execv,2}
		*/
		[[noreturn]] inline void
		execute(char* const argv[]) {
			UNISTDX_CHECK(::execv(argv[0], argv));
			UNISTDX_UNREACHABLE();
		}

		/**
		\brief
		Execute child process with arguments \p args and calling process environment.
		\ingroup ipc
		\details \copydetails execute(char* const[])
		*/
		[[noreturn]] inline void
		execute(const argstream& args) {
			execute(args.argv());
		}

		/**
		\brief \copybrief execute(char* const[], char* const[])
		\date 2018-05-21
		\author Ivan Gankevich
		\ingroup ipc
		\throws bad_call
		\details
		\arg The executable is specified as the first argument \c argv[0].
		\arg Uses \c PATH environment variable to search for the executable.

		\par How-tos:
		\ref execute
		\see argstream
		\see \man{execvpe,2}
		*/
		[[noreturn]] inline void
		execute_command(char* const argv[], char* const envp[]) {
			UNISTDX_CHECK(::execvpe(argv[0], argv, envp));
			UNISTDX_UNREACHABLE();
		}

		/**
		\brief \copybrief execute(char* const[])
		\ingroup ipc
		\details \copydetails execute_command(char* const[], char* const[])
		\see \man{execvp,2}
		*/
		[[noreturn]] inline void
		execute_command(char* const argv[]) {
			UNISTDX_CHECK(::execvp(argv[0], argv));
			UNISTDX_UNREACHABLE();
		}

		/**
		\brief \copybrief execute(const argstream&)
		\ingroup ipc
		\details \copydetails execute_command(char* const[])
		*/
		[[noreturn]] inline void
		execute_command(const argstream& args) {
			execute_command(args.argv());
		}

		/**
		\brief \copybrief execute(char* const[], char* const[])
		\ingroup ipc
		\details \copydetails execute_command(char* const[], char* const[])
		*/
		[[noreturn]] inline void
		execute_command(const argstream& args, const argstream& env) {
			execute_command(args.argv(), env.argv());
		}

	}

}

#endif // vim:filetype=cpp
