/*
UNISTDX — C++ library for Linux system calls.
© 2021 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IPC_CPU_SET
#define UNISTDX_IPC_CPU_SET

#include <initializer_list>
#include <iosfwd>
#include <limits>
#include <memory>

#include <unistdx/base/contracts>

namespace sys {

    class dynamic_cpu_set;
    class static_cpu_set;

    class static_cpu_set: public ::cpu_set_t {

    public:
        using size_type = int;

    public:
        inline static_cpu_set() noexcept { clear(); }
        inline static_cpu_set(std::initializer_list<int> cpus) noexcept {
            clear(); for (auto i : cpus) { set(i); }
        }
        inline explicit static_cpu_set(const dynamic_cpu_set& other) noexcept;
        ~static_cpu_set() = default;
        static_cpu_set(const static_cpu_set&) = default;
        static_cpu_set& operator=(const static_cpu_set&) = default;
        static_cpu_set(static_cpu_set&&) = default;
        static_cpu_set& operator=(static_cpu_set&&) = default;

        static static_cpu_set all() noexcept;
        inline static constexpr size_type max_size() noexcept { return sizeof(cpu_set_t)*8; }
        inline constexpr size_type size() const noexcept { return max_size(); }
        inline int count() const noexcept { return CPU_COUNT(this); }
        inline size_t size_in_bytes() const noexcept { return sizeof(cpu_set_t); }
        inline void set(int cpu) noexcept {
            UNISTDX_PRECONDITION(0 <= cpu && cpu < max_size());
            CPU_SET(cpu, this);
        }
        inline void unset(int cpu) noexcept {
            UNISTDX_PRECONDITION(0 <= cpu && cpu < max_size());
            CPU_CLR(cpu, this);
        }
        inline bool isset(int cpu) const noexcept {
            UNISTDX_PRECONDITION(0 <= cpu && cpu < max_size());
            return CPU_ISSET(cpu, this);
        }
        inline void clear() noexcept { CPU_ZERO(this); }
        inline bool operator[](int cpu) const noexcept { return isset(cpu); }

        inline bool operator==(const static_cpu_set& rhs) const noexcept {
            return CPU_EQUAL(this, &rhs) != 0;
        }

        inline bool operator!=(const static_cpu_set& rhs) const noexcept {
            return !this->operator==(rhs);
        }

        inline static_cpu_set& operator&=(const static_cpu_set& rhs) noexcept {
            CPU_AND(this, this, &rhs);
            return *this;
        }

        inline static_cpu_set& operator|=(const static_cpu_set& rhs) noexcept {
            CPU_OR(this, this, &rhs);
            return *this;
        }

        inline static_cpu_set& operator^=(const static_cpu_set& rhs) noexcept {
            CPU_XOR(this, this, &rhs);
            return *this;
        }

        inline ::cpu_set_t* get() noexcept { return this; }
        inline const ::cpu_set_t* get() const noexcept { return this; }

    };

    static_cpu_set operator~(const static_cpu_set& rhs) noexcept;

    inline static_cpu_set&& operator~(static_cpu_set&& rhs) {
        const auto n = rhs.size();
        for (int i=0; i<n; ++i) {
            if (!rhs[i]) { rhs.set(i); } else { rhs.unset(i); }
        }
        return std::move(rhs);
    }

    inline static_cpu_set operator&(const static_cpu_set& a, const static_cpu_set& b) noexcept {
        static_cpu_set result;
        CPU_AND(&result, &a, &b);
        return result;
    }

    inline static_cpu_set operator|(const static_cpu_set& a, const static_cpu_set& b) noexcept {
        static_cpu_set result;
        CPU_OR(&result, &a, &b);
        return result;
    }

    inline static_cpu_set operator^(const static_cpu_set& a, const static_cpu_set& b) noexcept {
        static_cpu_set result;
        CPU_XOR(&result, &a, &b);
        return result;
    }

    std::ostream& operator<<(std::ostream& out, const static_cpu_set& rhs);
    std::istream& operator>>(std::istream& in, static_cpu_set& rhs);

    class dynamic_cpu_set {

    public:
        using value_type = unsigned long;
        using size_type = std::size_t;
        struct reference {
            size_type cpu;
            dynamic_cpu_set& set;
            inline operator bool() const noexcept { return set.isset(cpu); }
            inline reference& operator=(bool value) noexcept {
                set.set(cpu, value);
                return *this;
            }
        };

    private:
        value_type* _data{};
        size_type _size{};

    public:

        inline dynamic_cpu_set(): dynamic_cpu_set(1,false) {}
        //dynamic_cpu_set() = default;

        inline explicit dynamic_cpu_set(size_type nbits):
        dynamic_cpu_set(bits_to_size(nbits),false) {}

        dynamic_cpu_set(std::initializer_list<size_type> cpus);
        inline dynamic_cpu_set(const static_cpu_set& other);

        inline ~dynamic_cpu_set() noexcept { delete[] this->_data; }

        inline dynamic_cpu_set(const dynamic_cpu_set& rhs):
        _data(new value_type[rhs.data_size()]), _size(rhs._size) {
            std::memcpy(data(), rhs.data(), rhs.data_size_in_bytes());
        }

        inline dynamic_cpu_set& operator=(const dynamic_cpu_set& rhs) {
            dynamic_cpu_set tmp(rhs);
            swap(*this, tmp);
            return *this;
        }

        inline dynamic_cpu_set(dynamic_cpu_set&& rhs) noexcept:
        _data(rhs._data), _size(rhs._size) { rhs._data = nullptr, rhs._size = 0; }

        inline dynamic_cpu_set& operator=(dynamic_cpu_set&& rhs) noexcept {
            dynamic_cpu_set tmp(std::move(rhs));
            swap(*this, tmp);
            return *this;
        }

        // bitset interface
        size_type count() const noexcept;
        inline bool test(size_type cpu) const noexcept { return isset(cpu); }
        inline void reset() noexcept { clear(); }
        inline bool all() const noexcept {
            UNISTDX_PRECONDITION(data());
            auto first = this->_data, last = this->_data + this->_size;
            while (first != last) {
                if (*first++ != std::numeric_limits<value_type>::max()) {
                    return false;
                }
            }
            return true;
        }
        inline bool any() const noexcept {
            UNISTDX_PRECONDITION(data());
            auto first = this->_data, last = this->_data + this->_size;
            while (first != last) {
                if (*first++ != 0UL) {
                    return true;
                }
            }
            return false;
        }
        inline bool none() const noexcept {
            UNISTDX_PRECONDITION(data());
            auto first = this->_data, last = this->_data + this->_size;
            while (first != last) {
                if (*first++ != 0UL) {
                    return false;
                }
            }
            return true;
        }
        inline dynamic_cpu_set& flip() noexcept {
            UNISTDX_PRECONDITION(data());
            auto first = this->_data, last = this->_data + this->_size;
            while (first != last) { *first = ~*first; ++first; }
            return *this;
        }
        inline dynamic_cpu_set& flip(size_type cpu) noexcept {
            UNISTDX_PRECONDITION(data());
            UNISTDX_PRECONDITION(0 <= cpu && cpu < size());
            constexpr const auto n = std::numeric_limits<value_type>::digits;
            this->_data[cpu/n] ^= (1UL<<(cpu%n));
            return *this;
        }
        inline bool operator[](size_type cpu) const noexcept { return isset(cpu); }
        inline reference operator[](size_type cpu) noexcept { return {cpu,*this}; }

        inline size_type size() const noexcept {
            return std::numeric_limits<value_type>::digits*this->_size;
        }

        inline size_type size_in_bytes() const noexcept { return data_size_in_bytes(); }
        static size_type min_size() noexcept;

        inline void set(size_type cpu) noexcept {
            UNISTDX_PRECONDITION(data());
            UNISTDX_PRECONDITION(0 <= cpu && cpu < size());
            constexpr const auto n = std::numeric_limits<value_type>::digits;
            this->_data[cpu/n] |= (1UL<<(cpu%n));
        }

        inline void set(size_type cpu, bool value) noexcept {
            UNISTDX_PRECONDITION(data());
            UNISTDX_PRECONDITION(0 <= cpu && cpu < size());
            constexpr const auto n = std::numeric_limits<value_type>::digits;
            const auto old = this->_data[cpu/n];
            this->_data[cpu/n] = (old & ~(1UL<<(cpu%n))) | (value_type(value)<<(cpu%n));
        }

        inline void unset(size_type cpu) noexcept {
            UNISTDX_PRECONDITION(data());
            UNISTDX_PRECONDITION(0 <= cpu && cpu < size());
            constexpr const auto n = std::numeric_limits<value_type>::digits;
            this->_data[cpu/n] &= ~(1UL<<(cpu%n));
        }

        inline bool isset(size_type cpu) const noexcept {
            UNISTDX_PRECONDITION(data());
            UNISTDX_PRECONDITION(0 <= cpu && cpu < size());
            constexpr const auto n = std::numeric_limits<value_type>::digits;
            return this->_data[cpu/n] & (1UL<<(cpu%n));
        }

        void resize(size_type new_size);

        inline void clear() noexcept {
            if (!data()) { return; }
            std::memset(data(), 0, data_size_in_bytes());
        }

        inline const ::cpu_set_t* get() const noexcept {
            return reinterpret_cast<const ::cpu_set_t*>(this->_data);
        }

        inline ::cpu_set_t* get() noexcept {
            return reinterpret_cast<::cpu_set_t*>(this->_data);
        }

        friend inline void swap(dynamic_cpu_set& a, dynamic_cpu_set& b) noexcept {
            using std::swap;
            swap(a._data, b._data);
            swap(a._size, b._size);
        }

        friend bool
        operator==(const dynamic_cpu_set& a, const dynamic_cpu_set& b) noexcept;

        friend inline bool
        operator!=(const dynamic_cpu_set& a, const dynamic_cpu_set& b) noexcept {
            return !operator==(a,b);
        }

        friend inline dynamic_cpu_set
        operator~(const dynamic_cpu_set& a) noexcept {
            dynamic_cpu_set tmp(a._size,false,false);
            auto first = a._data, last = a._data + a._size, first2 = tmp._data;
            while (first != last) { *first2++ = ~*first++; }
            return tmp;
        }

        friend inline dynamic_cpu_set&&
        operator~(dynamic_cpu_set&& a) noexcept {
            auto first = a._data, last = a._data + a._size;
            while (first != last) { *first = ~*first; ++first; }
            return std::move(a);
        }

        #define UNISTDX_INTERNAL_BINARY_OP(OP,OPEQ) \
            friend inline dynamic_cpu_set \
            operator OP(const dynamic_cpu_set& a, const dynamic_cpu_set& b) noexcept { \
                const auto n = std::min(a._size, b._size); \
                dynamic_cpu_set tmp(n,false,false); \
                for (size_type i=0; i<n; ++i) { tmp._data[i] = a._data[i] OP b._data[i]; } \
                return tmp; \
            } \
            friend inline dynamic_cpu_set&& \
            operator OP(dynamic_cpu_set&& a, const dynamic_cpu_set& b) noexcept { \
                const auto n = std::min(a._size, b._size); \
                for (size_type i=0; i<n; ++i) { a._data[i] OPEQ b._data[i]; } \
                return std::move(a); \
            } \
            friend inline dynamic_cpu_set&& \
            operator OP(const dynamic_cpu_set& a, dynamic_cpu_set&& b) noexcept { \
                const auto n = std::min(a._size, b._size); \
                for (size_type i=0; i<n; ++i) { b._data[i] OPEQ a._data[i]; } \
                return std::move(b); \
            } \
            friend inline dynamic_cpu_set&& \
            operator OP(dynamic_cpu_set&& a, dynamic_cpu_set&& b) noexcept { \
                const auto n = std::min(a._size, b._size); \
                for (size_type i=0; i<n; ++i) { a._data[i] OPEQ b._data[i]; } \
                return std::move(a); \
            } \
            inline dynamic_cpu_set& \
            operator OPEQ(const dynamic_cpu_set& b) noexcept { \
                const auto n = std::min(this->_size, b._size); \
                for (size_type i=0; i<n; ++i) { this->_data[i] OPEQ b._data[i]; } \
                return *this; \
            }

        UNISTDX_INTERNAL_BINARY_OP(&, &=);
        UNISTDX_INTERNAL_BINARY_OP(|, |=);
        UNISTDX_INTERNAL_BINARY_OP(^, ^=);

        #undef UNISTDX_INTERNAL_BINARY_OP

    private:

        inline const value_type* data() const noexcept { return this->_data; }
        inline value_type* data() noexcept { return this->_data; }

        inline size_type data_size() const noexcept {
            return this->_size;
        }

        inline size_type data_size_in_bytes() const noexcept {
            return this->_size*sizeof(value_type);
        }

        constexpr static inline size_type num_cpus_per_element() noexcept {
            return std::numeric_limits<value_type>::digits;
        }

        inline explicit dynamic_cpu_set(size_type size, bool):
        _data(new value_type[size]), _size(size) {
            std::memset(data(), 0, data_size_in_bytes());
        }

        inline explicit dynamic_cpu_set(size_type size, bool, bool):
        _data(new value_type[size]), _size(size) {}

        static inline size_type bits_to_size(size_type nbits) {
            constexpr const auto n = std::numeric_limits<value_type>::digits;
            size_type size = nbits/n;
            if (nbits%n != 0) { ++size; }
            return size;
        }

    };

    bool operator==(const dynamic_cpu_set& a, const dynamic_cpu_set& b) noexcept;

    std::ostream& operator<<(std::ostream& out, const dynamic_cpu_set& rhs);
    std::istream& operator>>(std::istream& in, dynamic_cpu_set& rhs);

    inline static_cpu_set::static_cpu_set(const dynamic_cpu_set& other) noexcept {
        UNISTDX_PRECONDITION(other.size() <= size_t(size()));
        const auto size = other.size();
        for (dynamic_cpu_set::size_type i=0; i<size; ++i) {
            if (other[i]) { set(i); }
        }
    }

    inline dynamic_cpu_set::dynamic_cpu_set(const static_cpu_set& other):
    dynamic_cpu_set(bits_to_size(other.size()), false) {
        const auto size = other.size();
        for (static_cpu_set::size_type i=0; i<size; ++i) {
            if (other[i]) { set(i); }
        }
    }

    /// Use dynamic set by default, since it consumes less memory.
    using cpu_set = dynamic_cpu_set;

}

#endif // vim:filetype=cpp
