#ifndef UNISTDX_IT_QUEUE_POPPER
#define UNISTDX_IT_QUEUE_POPPER

#include <unistdx/it/container_traits>
#include <iterator>

namespace sys {

	template <class Container, class Traits=queue_traits<Container>>
	class queue_pop_iterator:
		public std::iterator<std::input_iterator_tag,
		                     typename Container::value_type>{

	public:
		typedef Container container_type;
		typedef typename Container::value_type value_type;
		typedef Traits traits_type;

		inline explicit constexpr
		queue_pop_iterator(container_type& x) noexcept:
		container(&x) {}

		inline constexpr
		queue_pop_iterator() noexcept = default;

		inline constexpr
		queue_pop_iterator(const queue_pop_iterator& rhs) noexcept = default;

		inline bool
		operator==(const queue_pop_iterator&) const noexcept {
			return container->empty();
		}

		inline bool
		operator!=(const queue_pop_iterator& rhs) const noexcept {
			return !operator==(rhs);
		}

		inline const value_type&
		operator*() const noexcept {
			return traits_type::front(*container);
		}

		inline const value_type*
		operator->() const noexcept {
			return &traits_type::front(*container);
		}

		inline queue_pop_iterator&
		operator++() noexcept {
			traits_type::pop(*container);
			return *this;
		}

		inline queue_pop_iterator&
		operator++(int) {
			throw std::logic_error("can't post increment sys::queue_popper");
			return *this;
		}

	private:
		container_type* container = nullptr;
	};

	template<class C>
	inline queue_pop_iterator<C>
	queue_popper(C& cont) noexcept {
		return queue_pop_iterator<C>(cont);
	}

	template<class C>
	inline queue_pop_iterator<C>
	queue_popper_end(C&) noexcept {
		return queue_pop_iterator<C>();
	}

	template<class C>
	inline queue_pop_iterator<C,priority_queue_traits<C>>
	priority_queue_popper(C& cont) noexcept {
		return queue_pop_iterator<C,priority_queue_traits<C>>(cont);
	}

	template<class C>
	inline queue_pop_iterator<C,priority_queue_traits<C>>
	priority_queue_popper_end(C&) noexcept {
		return queue_pop_iterator<C,priority_queue_traits<C>>();
	}

	template<class C>
	inline queue_pop_iterator<C,deque_traits<C>>
	deque_popper(C& cont) noexcept {
		return queue_pop_iterator<C,deque_traits<C>>(cont);
	}

	template<class C>
	inline queue_pop_iterator<C,deque_traits<C>>
	deque_popper_end(C&) noexcept {
		return queue_pop_iterator<C,deque_traits<C>>();
	}

}

#endif // vim:filetype=cpp
