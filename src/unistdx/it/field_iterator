/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IT_FIELD_ITERATOR
#define UNISTDX_IT_FIELD_ITERATOR

#include <tuple>
#include <type_traits>

namespace sys {

	template <class Base, size_t N>
	class field_iterator: public Base {

	public:
		typedef Base base_iterator;
		typedef typename std::tuple_element<
				N,
				typename base_iterator::value_type
		>::type value_type;
		typedef value_type* pointer;
		typedef const pointer const_pointer;
		typedef value_type& reference;
		typedef const reference const_reference;

		field_iterator() = default;

		field_iterator(base_iterator rhs):
		base_iterator(rhs)
		{}

		field_iterator(const field_iterator& rhs):
		base_iterator(rhs)
		{}

		const_pointer
		operator->() const noexcept {
			return &std::get<N>(*base_iterator::operator->());
		}

		pointer
		operator->() noexcept {
			return &std::get<N>(*base_iterator::operator->());
		}

		const_reference
		operator*() const noexcept {
			return std::get<N>(base_iterator::operator*());
		}

		reference
		operator*() noexcept {
			return std::get<N>(base_iterator::operator*());
		}

	};


}

#endif // vim:filetype=cpp
