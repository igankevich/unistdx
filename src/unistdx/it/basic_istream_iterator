/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IT_BASIC_ISTREAM_ITERATOR
#define UNISTDX_IT_BASIC_ISTREAM_ITERATOR

#include <iterator>

namespace sys {

	template<class Stream, class Value>
	class basic_istream_iterator:
		public std::iterator<std::input_iterator_tag, Value> {

		typedef Stream stream_type;

	public:

		using typename std::iterator<std::input_iterator_tag,
		                             Value>::iterator_category;

		typedef Value value_type;
		typedef value_type* pointer;
		typedef const value_type* const_pointer;
		typedef value_type& reference;
		typedef const value_type& const_reference;

		inline explicit
		basic_istream_iterator(stream_type& rhs):
		_stream(&rhs) {
			this->next();
		}

		basic_istream_iterator() = default;

		inline
		~basic_istream_iterator() = default;

		basic_istream_iterator(const basic_istream_iterator&) = default;

		inline
		basic_istream_iterator(basic_istream_iterator&& rhs):
		_stream(rhs._stream),
		_value(std::move(rhs._value)) {
			rhs._stream = nullptr;
		}

		inline basic_istream_iterator&
		operator=(const basic_istream_iterator&) = default;

		inline bool
		operator==(const basic_istream_iterator& rhs) const noexcept {
			return this->_stream == rhs._stream;
		}

		inline bool
		operator!=(const basic_istream_iterator& rhs) const noexcept {
			return !operator==(rhs);
		}

		inline reference
		operator*() noexcept {
			return this->_value;
		}

		inline const_reference
		operator*() const noexcept {
			return this->_value;
		}

		inline pointer
		operator->() noexcept {
			return &this->_value;
		}

		inline const_pointer
		operator->() const noexcept {
			return &this->_value;
		}

		inline basic_istream_iterator&
		operator++() {
			this->next(); return *this;
		}

		inline basic_istream_iterator
		operator++(int) {
			basic_istream_iterator tmp(*this);
			this->next();
			return tmp;
		}

	private:

		inline void
		next() {
			if (!(*this->_stream >> this->_value)) {
				this->_stream = nullptr;
			}
		}

		stream_type* _stream = nullptr;
		value_type _value;

	};

}

#endif // vim:filetype=cpp
