/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IT_CSTRING_ITERATOR
#define UNISTDX_IT_CSTRING_ITERATOR

#include <iterator>

namespace sys {

    /**
    \brief Iterator for C-string arrays frequently used in system programming.
    \date 2018-05-22
    \ingroup iter
    \details
    Array is assumed to terminate with null pointer.
    */
    template<class T>
    class cstring_iterator: public
        std::iterator<std::bidirectional_iterator_tag, T>{

    private:
        typedef typename std::iterator<std::bidirectional_iterator_tag, T>
            base_type;

    public:
        using typename base_type::iterator_category;
        using typename base_type::value_type;
        using typename base_type::pointer;
        using typename base_type::reference;
        using typename base_type::difference_type;

    private:
        typedef const value_type* const_pointer;
        typedef const value_type& const_reference;
        typedef size_t size_type;

    private:
        pointer _ptr = nullptr;

    public:

        /// Construct C-string iterator from string pointed by \p ptr.
        inline explicit
        cstring_iterator(pointer ptr):
        _ptr(ptr) {}

        cstring_iterator() = default;

        /// Copy-constructor.
        cstring_iterator(const cstring_iterator&) = default;

        /// Move-constructor.
        cstring_iterator(cstring_iterator&&) = default;

        ~cstring_iterator() = default;

        /// Assignment operator.
        cstring_iterator&
        operator=(const cstring_iterator&) = default;

        /// Returns true, if both iterators use the same string.
        inline bool
        operator==(const cstring_iterator& rhs) const noexcept {
            return this->_ptr == rhs._ptr || (!*this->_ptr && !rhs._ptr);
        }

        /// Returns false, if both iterators use the same string.
        inline bool
        operator!=(const cstring_iterator& rhs) const noexcept {
            return !this->operator==(rhs);
        }

        /// Dereference.
        inline const_reference
        operator*() const noexcept {
            return *this->_ptr;
        }

        /// Dereference.
        inline reference
        operator*() noexcept {
            return *this->_ptr;
        }

        /// Access object by pointer.
        inline const_pointer
        operator->() const noexcept {
            return this->ptr;
        }

        /// Access object by pointer.
        inline pointer
        operator->() noexcept {
            return this->ptr;
        }

        /// Increment.
        inline cstring_iterator&
        operator++() noexcept {
            ++this->_ptr;
            return *this;
        }

        /// Post-increment.
        inline cstring_iterator
        operator++(int) noexcept {
            cstring_iterator tmp(*this);
            ++this->_ptr;
            return tmp;
        }

        /// Decrement.
        inline cstring_iterator&
        operator--() noexcept {
            --this->_ptr;
            return *this;
        }

        /// Post-decrement.
        inline cstring_iterator
        operator--(int) noexcept {
            cstring_iterator tmp(*this);
            --this->_ptr;
            return tmp;
        }

        /// Add in-place.
        inline cstring_iterator&
        operator+=(difference_type n) noexcept {
            this->_ptr += n;
            return *this;
        }

        /// Subtract in-place.
        inline cstring_iterator&
        operator-=(difference_type n) noexcept {
            this->_ptr -= n;
            return *this;
        }

        /// Add scalar.
        inline friend cstring_iterator
        operator+(const cstring_iterator& lhs, difference_type rhs) {
            cstring_iterator tmp(lhs);
            tmp += rhs;
            return tmp;
        }

        /// Add scalar.
        inline friend cstring_iterator
        operator+(difference_type lhs, const cstring_iterator& rhs) {
            cstring_iterator tmp(rhs);
            tmp += lhs;
            return tmp;
        }

        /// Subtract scalar.
        inline friend cstring_iterator
        operator-(const cstring_iterator& lhs, difference_type rhs) {
            cstring_iterator tmp(lhs);
            tmp -= rhs;
            return tmp;
        }

        /// Access object by index.
        inline const value_type&
        operator[](size_type n) const noexcept {
            return this->_ptr[n];
        }

        /// Access object by index.
        inline value_type&
        operator[](size_type n) noexcept {
            return this->_ptr[n];
        }

        /// Compare iterator pointers.
        inline bool
        operator<(const cstring_iterator& rhs) const noexcept {
            return this->_ptr < rhs._ptr;
        }

        /// Compare iterator pointers.
        inline bool
        operator>=(const cstring_iterator& rhs) const noexcept {
            return !this->operator<(rhs);
        }

        /// Compare iterator pointers.
        inline bool
        operator>(const cstring_iterator& rhs) const noexcept {
            return !this->operator<=(rhs);
        }

        /// Compare iterator pointers.
        inline bool
        operator<=(const cstring_iterator& rhs) const noexcept {
            return this->operator==(rhs) || this->operator<(rhs);

        }

    };

}

#endif // vim:filetype=cpp
