/*
UNISTDX — C++ library for Linux system calls.
© 2016, 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_UTIL_SYSTEM
#define UNISTDX_UTIL_SYSTEM

#include <unistd.h>

#include <cstdint>

#include <unistdx/base/check>
#include <unistdx/config>
#include <unistdx/system/time>

#if defined(UNISTDX_HAVE_SYSINFO)
#include <chrono>
#include <sys/sysinfo.h>
#endif

#if defined(UNISTDX_HAVE_GETRUSAGE)
#include <chrono>
#include <sys/resource.h>
#include <unistdx/system/clock>
#endif

/// POSIX and Linux system call wrappers.
namespace sys {

    /// Alias to \link std::size_t \endlink.
    typedef ::std::size_t size_type;

    /**
    \brief Get system page size.
    \date 2018-05-25
    \details
    Falls back to 4096 when the page size can not be determined.
    */
    inline size_type
    page_size() noexcept {
        #if defined(_SC_PAGESIZE)
            #define UNISTDX_SYSCONF_PAGE_SIZE _SC_PAGESIZE
        #elif defined(_SC_PAGE_SIZE)
            #define UNISTDX_SYSCONF_PAGE_SIZE _SC_PAGE_SIZE
        #endif
        #if defined(UNISTDX_SYSCONF_PAGE_SIZE)
        long result = ::sysconf(UNISTDX_SYSCONF_PAGE_SIZE);
        return result < 1 ? 4096 : result;
        #else
        return 4096;
        #endif
        #undef UNISTDX_SYSCONF_PAGE_SIZE
    }

    /**
    \brief Returns maximum number of threads for the system.
    \date 2018-05-25
    \details
    \arg If \c UNISTDX_SINGLE_THREAD preprocessor macro is defined, returns 1.
    \arg If \c UNISTDX_CONCURRENCY environment variable equals positive integer,
    returns its value.
    \arg Otherwise return \link std::thread::hardware_concurrency \endlink.
    */
    extern unsigned
    thread_concurrency() noexcept;

    /// Always returns 1.
    inline unsigned
    io_concurrency() noexcept {
        return 1u;
    }

    class cache;

    /**
    \brief A particular level of cache.
    \date 2018-05-25
    */
    class cache_level {

    private:
        int _level = 0;
        size_type _size = 0;
        size_type _linesize = 0;
        size_type _assoc = 0;

    public:

        /// Get level number.
        inline int
        level() const noexcept {
            return this->_level;
        }

        /// Get cache size.
        inline size_type
        size() const noexcept {
            return this->_size;
        }

        /// Get cache line size.
        inline size_type
        line_size() const noexcept {
            return this->_linesize;
        }

        /// Get cache associativity (the number of sets into which cache blocks go).
        inline size_type
        associativity() const noexcept {
            return this->_assoc;
        }

        friend class cache;

    };

    /**
    \brief System caches.
    \date 2018-05-25
    \ingroup container
    \details
    The data is queried in a series of \man{sysconf,3} calls.
    */
    class cache {

    public:
        /// Alias to \link cache_level \endlink.
        typedef cache_level value_type;
        /// Constant iterator.
        typedef const value_type* const_iterator;

    private:
        cache_level _levels[4];
        int _nlevels = 0;

    public:

        cache();
        ~cache() = default;

        /// Copy-constructor.
        cache(const cache&) = default;

        /// Move-constructor.
        cache(cache&&) = default;

        /// The number of cache levels.
        inline int
        num_levels() const noexcept {
            return this->_nlevels;
        }

        /// Get iterator to the beginning of cache level sequence.
        inline const_iterator
        begin() const noexcept {
            return this->_levels;
        }

        /// Get iterator to the end of cache level sequence.
        inline const_iterator
        end() const noexcept {
            return this->_levels + this->_nlevels;
        }

        /// \copydoc num_levels
        inline int
        size() const noexcept {
            return this->_nlevels;
        }

        /// Get cache by index.
        inline value_type
        operator[](int i) const noexcept {
            return this->_levels[i];
        }

    };

    #if defined(UNISTDX_HAVE_SYSINFO)
    typedef struct ::sysinfo information_type;
    class information: public information_type {
    public:
        inline information(): information_type{} { UNISTDX_CHECK(::sysinfo(this)); }
        ~information() = default;
        information(const information&) = default;
        information& operator=(const information&) = default;
        information(information&&) = default;
        information& operator=(information&&) = default;
        inline unsigned long load_average_1min() const noexcept { return this->loads[0]; }
        inline unsigned long load_average_5min() const noexcept { return this->loads[1]; }
        inline unsigned long load_average_15min() const noexcept { return this->loads[2]; }
        inline const unsigned long* load_average() const noexcept { return this->loads; }
        inline unsigned long total_memory() const noexcept { return this->totalram; }
        inline unsigned long unused_memory() const noexcept { return this->freeram; }
        inline unsigned long shared_memory() const noexcept { return this->sharedram; }
        inline unsigned long buffers_memory() const noexcept { return this->bufferram; }
        inline unsigned long total_swap() const noexcept { return this->totalswap; }
        inline unsigned long unused_swap() const noexcept { return this->freeswap; }
        inline unsigned long total_high_memory() const noexcept { return this->totalhigh; }
        inline unsigned long unused_high_memory() const noexcept { return this->freehigh; }
        inline int memory_unit() const noexcept { return this->mem_unit; }
        inline unsigned short total_processes() const noexcept { return this->procs; }
        inline std::chrono::seconds uptime() const noexcept {
            return std::chrono::seconds(this->::sysinfo::uptime);
        }
    };
    #endif

    #if defined(UNISTDX_HAVE_GETRUSAGE)
    typedef struct ::rusage resource_usage_type;
    class resource_usage: public resource_usage_type {
    public:
        enum class who: int {
            #if defined(RUSAGE_SELF)
            self=RUSAGE_SELF,
            #endif
            #if defined(RUSAGE_CHILDREN)
            children=RUSAGE_CHILDREN,
            #endif
            #if defined(RUSAGE_THREAD)
            thread=RUSAGE_THREAD,
            #endif
        };
    public:
        inline explicit resource_usage(who w=who::self): resource_usage_type{} {
            UNISTDX_CHECK(::getrusage(int(w), this));
        }
        ~resource_usage() = default;
        resource_usage(const resource_usage&) = default;
        resource_usage& operator=(const resource_usage&) = default;
        resource_usage(resource_usage&&) = default;
        resource_usage& operator=(resource_usage&&) = default;

        inline std::chrono::microseconds user_cpu_time() const noexcept {
            return time_value{this->ru_utime}.duration();
        }

        inline std::chrono::microseconds system_cpu_time() const noexcept {
            return time_value{this->ru_utime}.duration();
        }

        inline long maximum_resident_set_size() const noexcept { return this->ru_maxrss; }
        inline long integral_shared_memory_size() const noexcept { return this->ru_ixrss; }
        inline long integral_unshared_data_size() const noexcept { return this->ru_idrss; }
        inline long integral_unshared_stack_size() const noexcept { return this->ru_isrss; }
        inline long page_reclaims() const noexcept { return this->ru_minflt; }
        inline long page_faults() const noexcept { return this->ru_majflt; }
        inline long num_swaps() const noexcept { return this->ru_nswap; }
        inline long block_input_operations() const noexcept { return this->ru_inblock; }
        inline long block_output_operations() const noexcept { return this->ru_oublock; }
        inline long ipc_messages_sent() const noexcept { return this->ru_msgsnd; }
        inline long ipc_messages_received() const noexcept { return this->ru_msgrcv; }
        inline long signals_received() const noexcept { return this->ru_nsignals; }
        inline long voluntary_context_switches() const noexcept { return this->ru_nvcsw; }
        inline long involuntary_context_switches() const noexcept { return this->ru_nivcsw; }

    };
    #endif

}

#endif // vim:filetype=cpp
