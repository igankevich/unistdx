/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_UTIL_GROUP
#define UNISTDX_UTIL_GROUP

#include <grp.h>

#include <iosfwd>
#include <string>

#include <unistdx/it/cstring_iterator>

namespace sys {

    typedef ::gid_t gid_type;

    /// Alias to \c group system type.
    typedef struct ::group group_type;

    /**
    \brief System user group.
    \date 2018-05-25
    \see \man{getgrent,3}
    \ingroup wrapper
    \details
    \arg Wraps \c group system type.
    \arg The size of this wrapper is larger than \c group,
    because it contains byte buffer that stores all the fields.
    */
    class group: public group_type {

    public:
        /// Group member iterator type.
        typedef cstring_iterator<char*> iterator;

    private:
        std::string _buf;

    public:

        group() = default;

        /// Copy-constructor.
        group(const group&) = default;

        /// Move-constructor.
        group(group&&) = default;

        ~group() = default;

        /// Assignment.
        group&
        operator=(const group&) = default;

        /// Assignment.
        group&
        operator=(const group_type& rhs) {
            group_type::operator=(rhs);
            return *this;
        }

        /// Get group name.
        inline const char*
        name() const {
            return this->gr_name;
        }

        /// Get group password.
        inline const char*
        password() const {
            return this->gr_passwd;
        }

        /// Get group ID.
        inline gid_type
        id() const {
            return this->gr_gid;
        }

        /// Get iterator to the beginning of group members.
        inline iterator
        begin() const {
            return iterator(this->gr_mem);
        }

        /// Get iterator to the end of group members.
        inline iterator
        end() const {
            return iterator();
        }

        /// Count group members.
        inline size_t
        size() const {
            return std::distance(this->begin(), this->end());
        }

        /// Compare group IDs.
        inline bool
        operator==(const group& rhs) const noexcept {
            return this->id() == rhs.id();
        }

        /// Compare group IDs.
        inline bool
        operator!=(const group& rhs) const noexcept {
            return !this->operator==(rhs);
        }

        friend std::ostream&
        operator<<(std::ostream& out, const group& rhs);

        friend bool
        find_group(gid_type uid, group& result);

        friend bool
        find_group(const char* name, group& result);

    };

    /// Print group in \c /etc/group format.
    std::ostream&
    operator<<(std::ostream& out, const group& rhs);

    /**
    \brief
    Find group in system database by id \p id and store in \p result.
    \see \man{getgruid,3}
    */
    bool
    find_group(gid_type id, group& result);

    /**
    \brief
    Find group in system database by name \p name and store in \p result.
    \see \man{getgrnam,3}
    */
    bool
    find_group(const char* name, group& result);

}

#endif // vim:filetype=cpp
