/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_UTIL_GROUP
#define UNISTDX_UTIL_GROUP

#include <grp.h>

#include <iosfwd>
#include <string>

#include <unistdx/it/cstring_iterator>

namespace sys {

	typedef ::gid_t gid_type;
	typedef struct ::group group_type;

	struct group: public group_type {

		typedef cstring_iterator<char*> iterator;

		group() = default;
		group(const group&) = default;
		group(group&&) = default;
		~group() = default;

		group&
		operator=(const group&) = default;

		group&
		operator=(const group_type& rhs) {
			group_type::operator=(rhs);
			return *this;
		}

		inline const char*
		name() const {
			return this->gr_name;
		}

		inline const char*
		password() const {
			return this->gr_passwd;
		}

		inline gid_type
		id() const {
			return this->gr_gid;
		}

		inline iterator
		begin() const {
			return iterator(this->gr_mem);
		}

		inline iterator
		end() const {
			return iterator();
		}

		inline size_t
		size() const {
			return std::distance(this->begin(), this->end());
		}

		inline bool
		operator==(const group& rhs) const noexcept {
			return this->id() == rhs.id();
		}

		inline bool
		operator!=(const group& rhs) const noexcept {
			return !this->operator==(rhs);
		}

		friend std::ostream&
		operator<<(std::ostream& out, const group& rhs);

		friend bool
		find_group(gid_type uid, group& result);

		friend bool
		find_group(const char* name, group& result);

	private:

		std::string _buf;

	};

	std::ostream&
	operator<<(std::ostream& out, const group& rhs);

	bool
	find_group(gid_type uid, group& result);

	bool
	find_group(const char* name, group& result);

}

#endif // vim:filetype=cpp
