/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020, 2021 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_TEST_SEMAPHORE
#define UNISTDX_TEST_SEMAPHORE

#include <condition_variable>
#include <mutex>
#include <queue>
#include <random>
#include <thread>
#include <vector>

#include <unistdx/base/types>
#include <unistdx/test/language>
#include <unistdx/test/mutex>

namespace std {

    inline const char*
    to_string(std::cv_status rhs) {
        switch (rhs) {
            case std::cv_status::timeout: return "timeout";
            case std::cv_status::no_timeout: return "no_timeout";
            default: return "<unknown>";
        }
    }

    inline std::ostream&
    operator<<(std::ostream& out, std::cv_status rhs) {
        return out << to_string(rhs);
    }

}

namespace test {

    template <class Q,
              class Mutex,
              class Semaphore=std::condition_variable,
              class Thread=std::thread>
    class Thread_pool {

    public:
        static constexpr const Q sval = std::numeric_limits<Q>::max();

    private:
        std::queue<Q> queue;
        Semaphore cv;
        Mutex mtx;
        bool stopped = false;
        Thread thread;
        Q sum = 0;

    public:

        Thread_pool():
            thread{[this] () {
            while (!stopped) {
                Q val = sval;
                {
                    std::unique_lock<Mutex> lock(mtx);
                    cv.wait(lock, [this] () { return stopped || !queue.empty(); });
                    if (stopped) break;
                    val = queue.front();
                    queue.pop();
                }
                if (val == sval) {
    //				std::clog << "Stopping thread pool" << std::endl;
                    stopped = true;
                } else {
                    sum += val;
                }
            }
        }} {}

        void submit(Q q) {
            {
                std::lock_guard<Mutex> lock(mtx);
                queue.push(q);
            }
            cv.notify_one();
        }

        void wait() {
            if (thread.joinable()) {
                thread.join();
            }
        }

        Q result() const { return sum; }

    };

    template <class Func>
    void run(Func func, unsigned min_threads=2, sys::u64 max_power=10) {
        using sys::u64;
        const auto max_threads = std::max(
            std::thread::hardware_concurrency(),
            2*min_threads);
        for (auto j=min_threads; j<=max_threads; ++j) {
            for (u64 i=0; i<=max_power; ++i) {
                func(j, u64(1) << i);
            }
        }
    }

    template <class Semaphore>
    void semaphore_is_available() {
        try {
            Semaphore sem;
            sem.notify_one();
        } catch (const sys::bad_call& err) {
            if (err.errc() != std::errc::function_not_supported) { throw; }
            std::exit(77);
        }
    }

    template <class Semaphore>
    void semaphore() {
        using namespace sys::test::lang;
        typedef std::mutex Mutex;
        {
            try {
                Semaphore sem;
                sem.notify_one();
            } catch (const sys::bad_call& err) {
                if (err.errc() != std::errc::function_not_supported) { throw; }
                std::exit(77);
            }
        }
        run([&] (unsigned nthreads, sys::u64 max) {
            typedef sys::u64 I;
            typedef Thread_pool<I, Mutex, Semaphore> Pool;
            std::vector<std::unique_ptr<Pool>> thread_pool;
            thread_pool.reserve(nthreads);
            for (unsigned i=0; i<nthreads; ++i) {
                thread_pool.emplace_back(new Pool);
            }
            I expected_sum = (max + I(1))*max/I(2);
            for (I i=1; i<=max; ++i) {
                thread_pool[i%thread_pool.size()]->submit(i);
            }
            for (auto& pool : thread_pool) { pool->submit(Pool::sval); }
            for (auto& pool : thread_pool) { pool->wait(); }
            I sum = 0;
            for (const auto& pool : thread_pool) { sum += pool->result(); }
            /*
            for (const auto& pool : thread_pool) {
                std::cout << pool->result() << std::endl;
            }
            std::cout << max << ": " << sum << std::endl;
            std::clog << "nthreads=" << nthreads << std::endl;
            */
            expect(value(expected_sum) == value(sum));
        });
    }

    template <class Semaphore> void
    semaphore_wait_until() {
        using namespace sys::test::lang;
        using semaphore_type = Semaphore;
        semaphore_type sem;
        std::mutex mtx;
        std::unique_lock<std::mutex> lock(mtx);
        typedef std::chrono::system_clock clock_type;
        typedef std::chrono::steady_clock clock_type_2;
        expect(value(sem.wait_for(lock,clock_type::duration::zero())) == value(std::cv_status::timeout));
        expect(value(sem.wait_until(lock,clock_type::now())) == value(std::cv_status::timeout));
        expect(value(sem.wait_until(lock,clock_type_2::now())) == value(std::cv_status::timeout));
        expect(value(sem.wait_for(lock,clock_type::duration::zero())) ==
               value(std::cv_status::timeout));
        expect(value(sem.wait_for(lock,clock_type_2::duration::zero())) ==
               value(std::cv_status::timeout));
        auto f = [](){ return false; };
        auto t = [](){ return true; };
        // wait until with predicate
        expect(!sem.wait_until(lock, clock_type::now(), f));
        expect(sem.wait_until(lock, clock_type::now(), t));
        expect(!sem.wait_until(lock, clock_type_2::now(), f));
        expect(sem.wait_until(lock, clock_type_2::now(), t));
        // wait for with predicate
        expect(!sem.wait_for(lock, clock_type::duration::zero(), f));
        expect(sem.wait_for(lock, clock_type::duration::zero(), t));
        expect(!sem.wait_for(lock, clock_type_2::duration::zero(), f));
        expect(sem.wait_for(lock, clock_type_2::duration::zero(), t));
        expect(value(sem.wait_until(lock,clock_type::time_point(clock_type::duration::zero()))) ==
               value(std::cv_status::timeout));
        expect(value(sem.wait_until(lock,clock_type_2::time_point(clock_type_2::duration::zero()))) ==
               value(std::cv_status::timeout));
    }

    template <class Semaphore> void
    semaphore_producer_consumer_thread() {
        using namespace sys::test::lang;
        using semaphore_type = Semaphore;
        using T = int;
        std::default_random_engine rng;
        std::uniform_int_distribution<T> dist('a', 'z');
        semaphore_type sem_read;
        semaphore_type sem_write;
        sem_read.notify_one();
        std::mutex mtx;
        const size_t ninputs = 10000;
        std::vector<size_t> buffer;
        size_t sum_consumer = 0;
        std::thread consumer([&] () {
            size_t cnt = 0;
            while (cnt < ninputs) {
                //sys::log_message("consumer", "cnt=_ lock", cnt);
                std::unique_lock<std::mutex> lock(mtx);
                //sys::log_message("consumer", "cnt=_ wait", cnt);
                sem_write.wait(lock, [&] () { return !buffer.empty(); });
                while (!buffer.empty()) {
                    ++cnt;
                    sum_consumer += buffer.back();
                    buffer.pop_back();
                }
                lock.unlock();
                sem_read.notify_one();
            }
        });
        size_t sum_producer = 0;
        size_t cnt = 0;
        while (cnt < ninputs) {
            //sys::log_message("producer", "cnt=_ lock", cnt);
            std::unique_lock<std::mutex> lock(mtx);
            //sys::log_message("producer", "cnt=_ wait", cnt);
            sem_read.wait(lock, [&] () { return buffer.empty(); });
            buffer.emplace_back(dist(rng));
            sum_producer += buffer.back();
            ++cnt;
            lock.unlock();
            sem_write.notify_one();
        }
        consumer.join();
        expect(value(sum_producer) == value(sum_consumer));
    }

}

#endif // vim:filetype=cpp
