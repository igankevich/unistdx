#ifndef UNISTDX_TEST_TMPDIR
#define UNISTDX_TEST_TMPDIR

#include <algorithm>
#include <fstream>
#include <sstream>

#include <unistdx/ipc/execute>
#include <unistdx/ipc/process>

#include <gtest/gtest.h>

namespace test {

	inline std::string
	current_test_name() {
		std::string name =
			::testing::UnitTest::GetInstance()->current_test_info()->name();
		std::transform(
			name.begin(),
			name.end(),
			name.begin(),
			[] (char ch) {
				return ch == '/' ? '_' : ch;
			}
		);
		return name;
	}

	template <class It>
	inline void
	generate_files(sys::path subdir, It first, It last) {
		std::ofstream str;
		while (first != last) {
			str.open(sys::path(subdir, *first));
			str.close();
			str.clear();
			++first;
		}
	}

	class tmpdir {

		sys::path _dirname;

	public:

		inline
		tmpdir():
		tmpdir(current_test_name().data()) {}

		inline explicit
		tmpdir(const char* dirname):
		tmpdir(sys::path(dirname)) {}

		inline explicit
		tmpdir(sys::path dirname):
		_dirname(dirname) {
			mkdir();
		}

		template <class It>
		inline
		tmpdir(It first, It last):
		tmpdir(current_test_name(), first, last) {}

		template <class It>
		inline
		tmpdir(const char* dirname, It first, It last):
		tmpdir(sys::path(dirname), first, last) {}

		template <class It>
		inline
		tmpdir(sys::path dirname, It first, It last):
		_dirname(dirname) {
			mkdir();
			generate_files(_dirname, first, last);
		}

		inline
		~tmpdir() {
			this->clear();
		}

		inline void
		clear() {
			sys::process child{
				[this] () {
					sys::argstream args;
					args.append("rm");
					args.append("-rf");
					args.append(this->_dirname);
					return sys::this_process::execute_command(args);
				}
			};
			sys::proc_info status = child.wait();
			ASSERT_TRUE(status.exited());
			ASSERT_EQ(0, status.exit_code());
		}

		inline void
		list() {
			sys::process child{
				[this] () {
					sys::argstream args;
					args.append("find");
					args.append(this->_dirname);
					return sys::this_process::execute_command(args);
				}
			};
			sys::proc_info status = child.wait();
			ASSERT_TRUE(status.exited());
			ASSERT_EQ(0, status.exit_code());
		}

		inline
		operator const sys::path&() const noexcept {
			return _dirname;
		}

		inline const sys::path&
		name() const noexcept {
			return _dirname;
		}

	private:

		inline void
		mkdir() {
			::mkdir(_dirname, 0755);
		}

	};

	inline sys::path
	unique_path(const char* func, const char* suffix) {
		std::stringstream str;
		str << func << '_';
		str << current_test_name() << '_';
		str << sys::this_process::id() << '_';
		str << suffix;
		return sys::path(str.str());
	}

}

#define UNISTDX_TMPDIR (::test::unique_path(__func__, "in"))
#define UNISTDX_TMPDIR_OUT (::test::unique_path(__func__, "out"))

#endif // vim:filetype=cpp
