/*
UNISTDX — C++ library for Linux system calls.
© 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_TEST_TMPDIR
#define UNISTDX_TEST_TMPDIR

#include <algorithm>
#include <fstream>
#include <sstream>

#include <unistdx/ipc/execute>
#include <unistdx/ipc/process>

#include <gtest/gtest.h>

namespace test {

    inline std::string
    current_test_name() {
        std::string name =
            ::testing::UnitTest::GetInstance()->current_test_info()->name();
        std::transform(
            name.begin(),
            name.end(),
            name.begin(),
            [] (char ch) {
                return ch == '/' ? '_' : ch;
            }
        );
        return name;
    }

    template <class It>
    inline void
    generate_files(sys::path subdir, It first, It last) {
        std::ofstream str;
        while (first != last) {
            str.open(sys::path(subdir, *first));
            str.close();
            str.clear();
            ++first;
        }
    }

    class tmpdir {

        sys::path _dirname;

    public:

        inline
        tmpdir():
        tmpdir(current_test_name().data()) {}

        inline explicit
        tmpdir(const char* dirname):
        tmpdir(sys::path(dirname)) {}

        inline explicit
        tmpdir(sys::path dirname):
        _dirname(dirname) {
            mkdir();
        }

        template <class It>
        inline
        tmpdir(It first, It last):
        tmpdir(current_test_name(), first, last) {}

        template <class It>
        inline
        tmpdir(const char* dirname, It first, It last):
        tmpdir(sys::path(dirname), first, last) {}

        template <class It>
        inline
        tmpdir(sys::path dirname, It first, It last):
        _dirname(dirname) {
            mkdir();
            generate_files(_dirname, first, last);
        }

        inline
        ~tmpdir() {
            this->clear();
        }

        inline void
        clear() {
            sys::process child{
                [this] () {
                    sys::argstream args;
                    args.append("rm");
                    args.append("-rf");
                    args.append(this->_dirname);
                    sys::this_process::execute_command(args);
                    return 0;
                }
            };
            sys::process_status status = child.wait();
            ASSERT_TRUE(status.exited());
            ASSERT_EQ(0, status.exit_code());
        }

        inline void
        list() {
            sys::process child{
                [this] () {
                    sys::argstream args;
                    args.append("find");
                    args.append(this->_dirname);
                    sys::this_process::execute_command(args);
                    return 0;
                }
            };
            sys::process_status status = child.wait();
            ASSERT_TRUE(status.exited());
            ASSERT_EQ(0, status.exit_code());
        }

        inline
        operator const sys::path&() const noexcept {
            return _dirname;
        }

        inline const sys::path&
        name() const noexcept {
            return _dirname;
        }

    private:

        inline void
        mkdir() {
            ::mkdir(_dirname, 0755);
        }

    };

    inline sys::path
    unique_path(const char* func, const char* suffix) {
        std::stringstream str;
        str << func << '_';
        str << current_test_name() << '_';
        str << sys::this_process::id() << '_';
        str << suffix;
        return sys::path(str.str());
    }

}

#define UNISTDX_TMPDIR (::test::unique_path(__func__, "in"))
#define UNISTDX_TMPDIR_OUT (::test::unique_path(__func__, "out"))

#endif // vim:filetype=cpp
