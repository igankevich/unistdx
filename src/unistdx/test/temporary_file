#ifndef UNISTDX_TEST_TEMPORARY_FILE
#define UNISTDX_TEST_TEMPORARY_FILE

#include <unistd.h>

#include <unistdx/base/check>
#include <unistdx/fs/path>
#include <unistdx/io/fildes>
#include <unistdx/test/tmpdir>

namespace sys {

    inline void
    remove(const sys::path& rhs) {
        UNISTDX_CHECK(::unlink(rhs));
    }

}

namespace test {

    class temporary_file {

    private:
        sys::path _filename;

    public:

        inline explicit
        temporary_file(const char* filename):
        temporary_file(sys::path(filename))
        {}

        inline explicit
        temporary_file(const sys::path& filename):
        _filename(filename)
        {
            sys::fildes(filename, sys::open_flag::create, 0644);
        }

        inline
        ~temporary_file() {
            sys::remove(this->_filename);
        }

        inline const sys::path&
        path() const noexcept {
            return this->_filename;
        }

    };

}


#define UNISTDX_TMPFILE \
    (::sys::path(std::string(__func__) + "_" + ::test::current_test_name() + "_file"))

#define UNISTDX_TMPFILE_OUT \
    (::sys::path(std::string(__func__) + "_" + ::test::current_test_name() + "_file_out"))

#endif // vim:filetype=cpp
