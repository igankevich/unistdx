/*
UNISTDX — C++ library for Linux system calls.
© 2021 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_TEST_PROPERTIES
#define UNISTDX_TEST_PROPERTIES

#include <algorithm>
#include <array>
#include <chrono>
#include <limits>
#include <random>
#include <vector>

#include <unistdx/test/test_executor>

namespace sys {
    namespace test {

        class Parameter {

        private:
            size_t _min = std::numeric_limits<size_t>::min();
            size_t _max = std::numeric_limits<size_t>::max();

        public:

            inline Parameter(size_t min, size_t max) noexcept: _min(min), _max(max) {}

            inline size_t min() const noexcept { return this->_min; }
            inline size_t max() const noexcept { return this->_max; }

            Parameter() = default;
            ~Parameter() = default;
            Parameter(const Parameter&) = default;
            Parameter& operator=(const Parameter&) = default;
            Parameter(Parameter&&) = default;
            Parameter& operator=(Parameter&&) = default;
        };

        template <class T>
        inline Parameter
        make_parameter(T min=std::numeric_limits<T>::min(),
                       T max=std::numeric_limits<T>::max()) noexcept {
            return Parameter{static_cast<size_t>(min), static_cast<size_t>(max)};
        }

        template <size_t N>
        using Parameter_array = std::array<Parameter,N>;

        template <size_t N>
        using Argument_array = std::array<size_t,N>;

        template <class Function, size_t N>
        class Solver {

        public:
            using parameter_array = std::array<Parameter,N>;

        private:
            Function _function;
            parameter_array _parameters;
            std::vector<size_t> _seeds{
                size_t(std::chrono::steady_clock::now().time_since_epoch().count()),
                size_t(std::random_device{}()),
            };
            std::default_random_engine _prng;
            size_t _max_evaluations = 100;

        public:
            inline explicit Solver(Function&& function, const parameter_array& parameters):
            _function(std::move(function)), _parameters(parameters) {
                std::seed_seq seq(this->_seeds.begin(), this->_seeds.end());
                this->_prng.seed(seq);
            }

            inline std::default_random_engine& prng() noexcept { return this->_prng; }

            inline bool operator()() {
                size_t actual_evaluations = 0;
                auto func = [this,&actual_evaluations] (const Argument_array<N>& args) {
                    auto old_num_errors = current_test->num_errors();
                    try {
                        this->_function(args);
                    } catch (const std::exception& err) {
                        current_test->record_error(error(err.what()));
                    }
                    ++actual_evaluations;
                    auto new_num_errors = current_test->num_errors();
                    return old_num_errors == new_num_errors;
                };
                bool falsified = false;
                Argument_array<N> args;
                for (size_t i=0; i<this->_max_evaluations; ++i) {
                    for (size_t j=0; j<N; ++j) {
                        std::uniform_int_distribution<size_t> dist(
                            this->_parameters[j].min(), this->_parameters[j].max());
                        args[j] = dist(this->_prng);
                    }
                    if (!func(args)) {
                        falsified = true;
                        break;
                    }
                }
                if (!falsified) { return true; }
                std::stringstream text;
                text << "Falsified:\n";
                text << "Original args:";
                for (const auto a : args) { text << ' ' << a; }
                text << '\n';
                // try to find minimum arguments for which the function fails
                for (size_t i=0; i<N && actual_evaluations != this->_max_evaluations; ++i) {
                    auto new_args = args;
                    auto a = this->_parameters[i].min();
                    auto b = args[i];
                    new_args[i] = a;
                    auto func_a = func(new_args);
                    if (actual_evaluations == this->_max_evaluations) { break; }
                    if (!func_a) { args = new_args; continue; } // minimum value found
                    new_args[i] = b;
                    auto func_b = func(new_args);
                    if (actual_evaluations == this->_max_evaluations) { break; }
                    size_t result = args[i];
                    while (actual_evaluations != this->_max_evaluations) {
                        auto c = a/2+b/2;
                        new_args[i] = c;
                        auto func_c = func(new_args);
                        if (func_a != func_c) {
                            b = c;
                            func_b = func_c;
                        } else if (func_b != func_c) {
                            b = a;
                            func_a = func_c;
                        } else {
                            b = c;
                        }
                        if (!func_c) { result = c; }
                    }
                    args[i] = result;
                }
                text << "Seeds:";
                for (auto s : this->_seeds) { text << ' ' << s; }
                text << '\n';
                text << "Simplified args:";
                for (const auto a : args) { text << ' ' << a; }
                text << '\n';
                text << "No. of evaluations: " << actual_evaluations << '\n';
                current_test->record_error(error(text.str()));
                return false;
            }

            inline size_t max_evaluations() const noexcept { return this->_max_evaluations; }
            inline void max_evaluations(size_t rhs) noexcept { this->_max_evaluations = rhs; }

        };

        template <class Function, class ... Parameters>
        inline Solver<Function,sizeof...(Parameters)>
        make_solver(Function&& function, Parameters&& ... parameters) {
            return Solver<Function,sizeof...(Parameters)>(
                std::forward<Function>(function),
                Parameter_array<sizeof...(parameters)>{parameters...});
        }

        template <class Function, class ... Parameters>
        inline bool
        falsify(Function&& function, Parameters&& ... parameters) {
            return make_solver(std::forward<Function>(function),
                               std::forward<Parameters>(parameters)...)();
        }

    }
}

#endif // vim:filetype=cpp
