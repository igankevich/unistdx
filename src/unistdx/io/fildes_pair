#ifndef UNISTDX_IO_FILDES_PAIR
#define UNISTDX_IO_FILDES_PAIR

#include <unistdx/io/fildes>
#include <unistdx/io/pipe>
#include <unistdx/io/two_way_pipe>

namespace sys {

	/**
	\brief A pair of file descriptors.
	\date 2018-05-23
	\author Ivan Gankevich
	\ingroup io
	\details
	\arg Descriptors are assumed to be for input and output, but it is not
	enforced.
	\arg This class is usefull in conjunction with \link basic_fildesbuf\endlink
	when different file descriptors are used for writing and reading from the
	stream.
	*/
	class fildes_pair {

	private:
		fildes _in, _out;

	public:

		fildes_pair() = default;

		~fildes_pair() = default;

		/// Construct a pair of file descriptors from \p in and \p out.
		inline
		fildes_pair(fildes&& in, fildes&& out):
		_in(std::move(in)),
		_out(std::move(out))
		{}

		/// Construct a pair of file descriptors from pipe \p pipe.
		inline explicit
		fildes_pair(pipe&& pipe):
		_in(std::move(pipe.in())),
		_out(std::move(pipe.out()))
		{}

		/// Construct a pair of file descriptors from bidirectional pipe \p pipe.
		inline explicit
		fildes_pair(two_way_pipe&& pipe):
		_in(std::move(pipe.in())),
		_out(std::move(pipe.out()))
		{}

		/// Move-constructor.
		inline
		fildes_pair(fildes_pair&& rhs):
		_in(std::move(rhs._in)),
		_out(std::move(rhs._out))
		{}

		/// Move-assignment.
		inline fildes_pair&
		operator=(fildes_pair&& rhs) {
			this->_in = std::move(rhs._in);
			this->_out = std::move(rhs._out);
			return *this;
		}

		fildes_pair&
		operator=(fildes_pair& rhs) = delete;

		/// Get input file descriptor.
		inline fildes&
		in() noexcept {
			return this->_in;
		}

		/// Get output file descriptor.
		inline fildes&
		out() noexcept {
			return this->_out;
		}

		/// Get input file descriptor.
		inline const fildes&
		in() const noexcept {
			return this->_in;
		}

		/// Get output file descriptor.
		inline const fildes&
		out() const noexcept {
			return this->_out;
		}

		/// Close both file descriptors.
		inline void
		close() {
			this->_in.close();
			this->_out.close();
		}

	};

	/**
	\brief
	Specialisation of \link streambuf_traits\endlink for \link fildes_pair\endlink.
	\date 2018-05-23
	\author Ivan Gankevich
	\ingroup traits
	*/
	template<>
	struct streambuf_traits<fildes_pair> {

	private:
		typedef streambuf_traits<sys::fildes> fildes_traits;

	public:
		/// Character type.
		typedef char char_type;

		/**
		Write \p n bytes from array pointed by \p s to output file descriptor
		of \p pair.
		*/
		inline static std::streamsize
		write(fildes_pair& pair, const char_type* s, std::streamsize n) {
			return fildes_traits::write(sink.out(), s, n);
		}

		/**
		Read \p n bytes to array pointed by \p s from input file descriptor
		\p pair.
		*/
		inline static std::streamsize
		read(fildes_pair& pair, char_type* s, std::streamsize n) {
			return fildes_traits::read(src.in(), s, n);
		}

		/// Check if the source/sink is blocking.
		inline static bool
		is_blocking(const fildes_pair& pair) {
			return fildes_pair::is_blocking(pair);
		}

		/**
		Check how many bytes are available for reading in input file
		descriptor of \p pair.
		*/
		inline static std::streamsize
		in_avail(fildes_pair& pair) {
			return fildes_traits::in_avail(rhs.in());
		}

	};

}

#endif // vim:filetype=cpp
