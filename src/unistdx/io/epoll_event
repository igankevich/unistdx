/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IO_EPOLL_EVENT
#define UNISTDX_IO_EPOLL_EVENT

#include <iosfwd>
#include <type_traits>

#include <unistdx/config>
#if !defined(UNISTDX_HAVE_EPOLL)
#error epoll.h not found
#endif

#include <sys/epoll.h>
#include <sys/socket.h>
#include <sys/types.h>

namespace sys {

	typedef struct ::epoll_event poll_event_base;
	typedef int fd_type;

	enum class event : decltype(poll_event_base::events) {
		in = EPOLLIN,
		out = EPOLLOUT,
		hup = EPOLLHUP | EPOLLRDHUP,
		err = EPOLLERR,
		inout = EPOLLIN | EPOLLOUT,
		def = EPOLLRDHUP | EPOLLET
	};

	#define MAKE_BOOL_OP(op, A, B) \
	inline bool \
	operator op(A a, B b) noexcept { \
		typedef std::underlying_type<event>::type tp; \
		return tp(a) op tp(b); \
	}

	#define MAKE_BINARY_OP(op, A, B) \
	inline event \
	operator op(A a, B b) noexcept { \
		typedef std::underlying_type<event>::type tp; \
		return event(tp(a) op tp(b)); \
	}

	#define MAKE_UNARY_OP(op) \
	inline event \
	operator op(event a) noexcept { \
		typedef std::underlying_type<event>::type tp; \
		return event(op tp(a)); \
	}

	MAKE_BINARY_OP(|, event, event)
	MAKE_BINARY_OP(|, decltype(poll_event_base::events), event)
	MAKE_BINARY_OP(|, event, decltype(poll_event_base::events))
	MAKE_BINARY_OP(&, event, event)
	MAKE_BINARY_OP(&, event, decltype(poll_event_base::events))
	MAKE_BINARY_OP(&, decltype(poll_event_base::events), event)
	MAKE_BOOL_OP(==, decltype(poll_event_base::events), event)
	MAKE_BOOL_OP(==, event, decltype(poll_event_base::events))
	MAKE_BOOL_OP(!=, decltype(poll_event_base::events), event)
	MAKE_BOOL_OP(!=, event, decltype(poll_event_base::events))
	MAKE_UNARY_OP(~)

	#undef MAKE_BINARY_OP
	#undef MAKE_UNARY_OP

	class epoll_event: public poll_event_base {

	private:
		typedef decltype (poll_event_base::events) E;

	public:

		inline
		epoll_event() noexcept:
		epoll_event(-1, event(0))
		{}

		inline
		epoll_event(fd_type f, event ev) noexcept:
		poll_event_base{} {
			this->poll_event_base::events = E(ev | event::def);
			this->poll_event_base::data.fd = f;
		}

		~epoll_event() = default;

		epoll_event&
		operator=(const epoll_event&) = default;

		inline E
		events() const noexcept {
			return this->poll_event_base::events;
		}

		inline fd_type
		fd() const noexcept {
			return this->poll_event_base::data.fd;
		}

		inline void
		disable() noexcept {
			this->poll_event_base::data.fd = -1;
		}

		inline bool
		bad_fd() const noexcept {
			return this->fd() < 0;
		}

		inline bool
		in() const noexcept {
			return (this->events() & event::in) != 0;
		}

		inline bool
		out() const noexcept {
			return (this->events() & event::out) != 0;
		}

		inline bool
		hup() const noexcept {
			return (this->events() & event::hup) != 0;
		}

		inline bool
		err() const noexcept {
			return (this->events() & event::err) != 0;
		}

		inline bool
		bad() const noexcept {
			return (this->events() & (event::hup | event::err)) != 0;
		}

		inline void
		setev(event rhs) noexcept {
			this->poll_event_base::events |= E(rhs);
		}

		inline void
		unsetev(event rhs) noexcept {
			this->poll_event_base::events &= E(~rhs);
		}

		inline ssize_t
		probe() const noexcept {
			char c;
			return ::recv(this->fd(), &c, 1, MSG_PEEK);
		}

		inline bool
		operator==(const epoll_event& rhs) const noexcept {
			return this->fd() == rhs.fd();
		}

		inline bool
		operator!=(const epoll_event& rhs) const noexcept {
			return this->fd() != rhs.fd();
		}

		inline bool
		operator<(const epoll_event& rhs) const noexcept {
			return this->fd() < rhs.fd();
		}

		inline explicit
		operator bool() const noexcept {
			return !this->bad() && !this->bad_fd();
		}

		inline bool
		operator!() const noexcept {
			return !this->operator bool();
		}

		friend std::ostream&
		operator<<(std::ostream& out, const epoll_event& rhs);

	};

	std::ostream&
	operator<<(std::ostream& out, const epoll_event& rhs);

	static_assert(
		sizeof(epoll_event) == sizeof(poll_event_base),
		"bad epoll_event size"
	);

}

#endif // vim:filetype=cpp
