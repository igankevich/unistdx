/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IO_POLL_EVENT
#define UNISTDX_IO_POLL_EVENT

#include <iosfwd>

#include <unistdx/bits/poll>
#include <unistdx/bits/socket>
#include <unistdx/io/fd_type>

namespace sys {

    /// File descriptor event base class.
    typedef struct ::pollfd basic_event;

    /**
    \brief
    File descriptor event wrapper for \man{poll,2} system call.
    \date 2018-05-23
    \ingroup wrapper io
    */
    struct poll_event: public basic_event {

        /// Event mask type.
        typedef decltype (basic_event::events) legacy_event;

        /// Input/output events.
        enum event_type : legacy_event {
            In = POLLIN,
            Out = POLLOUT,
            Hup = POLLHUP | UNISTDX_POLLRDHUP,
            Err = POLLERR | POLLNVAL,
            Inout = POLLIN | POLLOUT,
            Def = UNISTDX_POLLRDHUP
        };

        /// Bit-wise \c OR.
        inline friend constexpr legacy_event
        operator|(event_type lhs, event_type rhs) noexcept {
            return static_cast<legacy_event>(lhs) |
                   static_cast<legacy_event>(rhs);
        }

        /// Bit-wise \c OR.
        inline friend constexpr legacy_event
        operator|(legacy_event lhs, event_type rhs) noexcept {
            return lhs | static_cast<legacy_event>(rhs);
        }

        /// Bit-wise \c OR.
        inline friend constexpr legacy_event
        operator|(event_type lhs, legacy_event rhs) noexcept {
            return static_cast<legacy_event>(lhs) | rhs;
        }

        /// Bit-wise \c AND.
        inline friend constexpr legacy_event
        operator&(event_type lhs, event_type rhs) noexcept {
            return static_cast<legacy_event>(lhs) &
                   static_cast<legacy_event>(rhs);
        }

        /// Bit-wise \c AND.
        inline friend constexpr legacy_event
        operator&(legacy_event lhs, event_type rhs) noexcept {
            return lhs & static_cast<legacy_event>(rhs);
        }

        /// Bit-wise \c AND.
        inline friend constexpr legacy_event
        operator&(event_type lhs, legacy_event rhs) noexcept {
            return static_cast<legacy_event>(lhs) & rhs;
        }

        /**
        Construct object from file descriptor \p f, event mask \p ev
        and recorded events \p rev.
        */
        inline explicit constexpr
        poll_event(
            fd_type f=-1,
            legacy_event ev=0,
            legacy_event rev=0
        ) noexcept:
        basic_event{f,ev|Def,rev} {}

        /// Assignment.
        inline
        poll_event&
        operator=(const poll_event&) noexcept = default;

        /// Get recorded event mask.
        inline constexpr legacy_event
        revents() const noexcept {
            return this->basic_event::revents;
        }

        /// \copydoc epoll_event::events
        inline constexpr legacy_event
        events() const noexcept {
            return this->basic_event::events;
        }

        /// \copydoc epoll_event::disable
        inline void
        disable() noexcept {
            this->basic_event::fd = -1;
        }

        /// \copydoc epoll_event::fd
        inline constexpr fd_type
        fd() const noexcept {
            return this->basic_event::fd;
        }

        /// \copydoc epoll_event::bad_fd
        inline constexpr bool
        bad_fd() const noexcept {
            return this->fd() < 0;
        }

        /// \copydoc epoll_event::in
        inline constexpr bool
        in() const noexcept {
            return (this->revents() & In) != 0;
        }

        /// \copydoc epoll_event::out
        inline constexpr bool
        out() const noexcept {
            return (this->revents() & Out) != 0;
        }

        /// \copydoc epoll_event::hup
        inline constexpr bool
        hup() const noexcept {
            return (this->revents() & Hup) != 0;
        }

        /// \copydoc epoll_event::err
        inline constexpr bool
        err() const noexcept {
            return (this->revents() & Err) != 0;
        }

        /// \copydoc epoll_event::bad
        inline constexpr bool
        bad() const noexcept {
            return (this->revents() & (Hup | Err)) != 0;
        }

        /// \copydoc epoll_event::setev
        inline void
        setev(event_type rhs) noexcept {
            this->basic_event::events |= rhs;
        }

        /// \copydoc epoll_event::unsetev
        inline void
        unsetev(event_type rhs) noexcept {
            this->basic_event::events &= ~rhs;
        }

        /// Set events \p rhs in recorded event mask.
        inline void
        setrev(event_type rhs) noexcept {
            this->basic_event::revents |= rhs;
        }

        /// Unset events \p rhs in recorded event mask.
        inline void
        unsetrev(event_type rhs) noexcept {
            this->basic_event::revents &= ~rhs;
        }

        /// Set events \p rhs in event mask and recorded event mask.
        inline void
        setall(event_type rhs) noexcept {
            this->setev(rhs); this->setrev(rhs);
        }

        /// \copydoc epoll_event::probe
        inline ssize_t
        probe() const noexcept {
            char c;
            return ::recv(this->fd(), &c, 1, MSG_PEEK);
        }

        /// \copydoc epoll_event::operator==
        inline constexpr bool
        operator==(const poll_event& rhs) const noexcept {
            return this->fd() == rhs.fd();
        }

        /// \copydoc epoll_event::operator!=
        inline constexpr bool
        operator!=(const poll_event& rhs) const noexcept {
            return this->fd() != rhs.fd();
        }

        /// \copydoc epoll_event::operator<
        inline constexpr bool
        operator<(const poll_event& rhs) const noexcept {
            return this->fd() < rhs.fd();
        }

        /**
        Returns true, if file descriptor is valid and
        no \link bad \endlink events occurred.
        */
        inline explicit constexpr
        operator bool() const noexcept {
            return !this->bad() && !this->bad_fd();
        }

        /// \copydoc epoll_event::operator!
        inline constexpr bool
        operator!() const noexcept {
            return !operator bool();
        }

        friend std::ostream&
        operator<<(std::ostream& out, const poll_event& rhs);

    };

    /// Output file descriptor and event mask for debugging.
    std::ostream&
    operator<<(std::ostream& out, const poll_event& rhs);

    static_assert(
        sizeof(poll_event) == sizeof(basic_event),
        "bad poll_event size"
    );

}

#endif // vim:filetype=cpp
