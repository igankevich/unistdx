#ifndef UNISTDX_IO_OPEN_FLAG
#define UNISTDX_IO_OPEN_FLAG

#include <unistdx/bits/open_flag>

namespace sys {

	typedef int flag_type;

	class open_flag {

	private:
		flag_type _flag = 0;

	public:
		enum open_flag_enum: flag_type {
			append = O_APPEND,
			async = O_ASYNC,
			close_on_exec = UNISTDX_O_CLOEXEC,
			create = O_CREAT,
			direct = UNISTDX_O_DIRECT,
			directory = UNISTDX_O_DIRECTORY,
			dsync = O_DSYNC,
			exclude = O_EXCL,
			large_file = UNISTDX_O_LARGEFILE,
			no_atime = UNISTDX_O_NOATIME,
			no_ctty = O_NOCTTY,
			no_follow = UNISTDX_O_NOFOLLOW,
			non_blocking = O_NONBLOCK,
			path = UNISTDX_O_PATH,
			read_only = O_RDONLY,
			read_write = O_RDWR,
			rsync = UNISTDX_O_RSYNC,
			sync = O_SYNC,
			tmp_file = UNISTDX_O_TMPFILE,
			truncate = O_TRUNC,
			write_only = O_WRONLY,
		};

		open_flag() = default;

		open_flag(const open_flag&) = default;

		inline
		open_flag(flag_type rhs) noexcept:
		_flag(rhs)
		{}

		inline
		operator flag_type() const noexcept {
			return this->_flag;
		}

		inline bool
		is_non_blocking() const noexcept {
			return this->_flag & non_blocking;
		}

		inline bool
		is_blocking() const noexcept {
			return !this->is_non_blocking();
		}

	};

	inline constexpr bool
	supports(open_flag::open_flag_enum rhs) noexcept {
		return flag_type(rhs) != 0;
	}

	#define MAKE_UNARY(op) \
	inline open_flag \
	operator op(open_flag rhs) noexcept { \
		return op flag_type(rhs); \
	}

	#define MAKE_BINARY(op, return_type) \
	inline return_type \
	operator op(open_flag lhs, open_flag rhs) noexcept { \
		return flag_type(lhs) op flag_type(rhs); \
	} \
	inline return_type \
	operator op(flag_type lhs, open_flag rhs) noexcept { \
		return lhs op flag_type(rhs); \
	} \
	inline return_type \
	operator op(open_flag lhs, flag_type rhs) noexcept { \
		return flag_type(lhs) op rhs; \
	}

	MAKE_UNARY(~)
	MAKE_BINARY(|, open_flag)
	MAKE_BINARY(&, open_flag)
	MAKE_BINARY(^, open_flag)
	MAKE_BINARY(==, bool)
	MAKE_BINARY(!=, bool)

	#undef MAKE_UNARY
	#undef MAKE_BINARY

}

#endif // vim:filetype=cpp
