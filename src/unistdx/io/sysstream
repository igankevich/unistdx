/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IO_SYSSTREAM
#define UNISTDX_IO_SYSSTREAM

#include <ostream>

#include <unistdx/io/fildesbuf>

namespace sys {

	class osysstream:
		public std::basic_ostream<char,std::char_traits<char> > {

	private:
		typedef char Ch;
		typedef std::char_traits<char> Tr;
		typedef std::basic_ostream<Ch,Tr> ostream_type;
		typedef int fd_type;
		typedef basic_fildesbuf<char,std::char_traits<char>,fd_type>
		    fildesbuf_type;

	private:
		fildesbuf_type _buf;

	public:

		inline
		osysstream():
		ostream_type(nullptr) {
			this->init(&this->_buf);
		}

		inline explicit
		osysstream(fd_type fd, size_t psize):
		ostream_type(nullptr),
		_buf(std::move(fd), 0, psize) {
			this->init(&this->_buf);
		}

		explicit
		osysstream(std::streambuf* buf);

		~osysstream() = default;

		inline fildesbuf_type&
		buf() noexcept {
			return this->_buf;
		}

		inline const fildesbuf_type&
		buf() const noexcept {
			return this->_buf;
		}

	};

}

#endif // vim:filetype=cpp
