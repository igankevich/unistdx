#ifndef UNISTDX_IO_FILDESBUF
#define UNISTDX_IO_FILDESBUF

#include <cassert>

#include <unistdx/base/byte_buffer>
#include <unistdx/base/packetbuf>
#include <unistdx/base/streambuf_traits>
#include <unistdx/bits/no_copy_and_move>
#include <unistdx/io/fildes>
#include <unistdx/util/system>

#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_FILDESBUF)
#include <string.h>
#include <unistdx/base/log_message>
#endif

namespace sys {

	template<class Ch, class Tr=std::char_traits<Ch>, class Fd=sys::fildes>
	class basic_fildesbuf: public virtual basic_packetbuf<Ch,Tr> {

	private:
		typedef basic_packetbuf<Ch,Tr> base_type;
		typedef streambuf_traits<Fd> streambuf_traits_type;
		typedef std::ios_base::openmode openmode;
		typedef std::ios_base::seekdir seekdir;
		typedef byte_buffer buffer_type;
		typedef typename buffer_type::size_type size_type;

	protected:
		using base_type::gptr;
		using base_type::eback;
		using base_type::egptr;
		using base_type::pptr;
		using base_type::pbase;
		using base_type::epptr;
		using base_type::setg;
		using base_type::setp;
		using base_type::gbump;
		using base_type::pbump;
		using typename base_type::int_type;
		using typename base_type::traits_type;
		using typename base_type::char_type;
		using typename base_type::pos_type;
		using typename base_type::off_type;

	public:
		typedef Fd fd_type;

	private:
		/// File descriptor playing the role of a sink and a source. Any
		/// class for which specialisation of streambuf_traits exists
		/// can be used here.
		fd_type _fd;
		/// A byte buffer for \em get operations.
		buffer_type _gbuf;
		/// A byte buffer for \em put operations.
		buffer_type _pbuf;

	public:

		inline
		basic_fildesbuf():
		basic_fildesbuf(std::move(fd_type()), page_size())
		{}

		inline explicit
		basic_fildesbuf(fd_type&& fd):
		basic_fildesbuf(std::move(fd), page_size())
		{}

		inline
		basic_fildesbuf(fd_type&& fd, size_type bufsize):
		basic_fildesbuf(std::move(fd), bufsize, bufsize)
		{}

		inline
		basic_fildesbuf(fd_type&& fd, size_type gbufsize, size_type pbufsize):
		_fd(std::move(fd)), _gbuf(gbufsize), _pbuf(pbufsize) {
			this->reset_gbuf();
			this->reset_pbuf();
		}

		UNISTDX_NO_COPY_AND_MOVE(basic_fildesbuf)

		int_type
		underflow() override {
			assert(gptr() == egptr());
			this->reset_gbuf();
			return this->fill() == 0
			       ? traits_type::eof()
				   : traits_type::to_int_type(*gptr());
		}

		int_type
		overflow(int_type c) override {
			assert(pptr() == epptr());
			if (c != traits_type::eof()) {
				pgrow();
				if (pptr() != epptr()) {
					*pptr() = c;
					pbump(1);
				}
			} else {
				flush();
			}
			return c;
		}

		std::streamsize
		xsgetn(char_type* s, std::streamsize n) override {
			while (this->egptr() - this->gptr() < n && this->fill() > 0) {}
			const std::streamsize m = std::min(n, this->egptr() - this->gptr());
			traits_type::copy(s, this->gptr(), m);
			this->gbump(m);
			return m;
		}

		std::streamsize
		xsputn(const char_type* s, std::streamsize n) override {
			const std::streamsize remaining = epptr() - pptr();
			if (remaining < n) {
				std::streamsize new_size = this->_pbuf.size();
				const std::streamsize offset = new_size - remaining;
				while (new_size - offset < n) {
					new_size *= 2;
				}
				this->pgrow(new_size);
			}
			traits_type::copy(pptr(), s, n);
			pbump(n);
			return n;
		}

		int
		sync() override {
			int ret = 0;
			if (this->_pbuf) {
				ret |= this->flush()==-1 ? -1 : 0;
			}
			if (this->_gbuf) {
				ret |= this->fill()==-1 ? -1 : 0;
			}
			return ret;
		}

		inline int
		pubflush() {
			return this->flush();
		}

		inline int
		pubfill() {
			return this->fill();
		}

		std::streamsize
		showmanyc() override {
			return streambuf_traits_type::in_avail(this->_fd);
		}

		inline void
		setfd(fd_type&& rhs) {
			this->_fd = std::move(rhs);
		}

		inline const fd_type&
		fd() const {
			return this->_fd;
		}

		inline fd_type&
		fd() {
			return this->_fd;
		}

		inline void
		close() {
			this->_fd.close();
		}

	private:

		inline std::streamsize
		fill() {
			// reset gbuf if it was fully read
			if (gptr() == egptr()) {
				this->reset_gbuf();
			}
			// TODO 2016-03-09 this is not optimal solution,
			// but i don't know a better alternative
			const std::streamsize old_egptr_offset = egptr() - eback();
			if (egptr() == glast()) {
				ggrow();
			}
			char_type* first = egptr();
			char_type* last = glast();
			std::streamsize n = 0;
			while ((n = streambuf_traits_type::read(_fd, first, last-first)) >
			       0) {
				first += n;
				setg(eback(), gptr(), first);
				if (first == last) {
					ggrow();
					first = egptr();
					last = glast();
				}
			}
			std::streamsize ret = first - (eback() + old_egptr_offset);
			#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_FILDESBUF)
			sys::log_message(this->_name, "fill _, state=_", ret, strerror(errno));
			#endif
			return ret;
		}

		inline std::streamsize
		flush() {
			const std::streamsize m = pptr() - pbase();
			if (m == 0) return 0;
			const std::streamsize n =
				streambuf_traits_type::write(
					this->_fd,
					pbase(),
					m
				);
			const bool success = n==m;
			if (success) {
				this->reset_pbuf();
			} else if (n > 0) {
				setp(pbase()+n, epptr());
				pbump(m-n);
			}
			#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_FILDESBUF)
			sys::log_message(
				this->_name,
				"flush _,remaining=_,state=_",
				n,
				m-n,
				strerror(errno)
			);
			#endif
			return n==-1 ? 0 : n;
		}

		void
		reset_gbuf() {
			char_type* g = this->gfirst();
			setg(g, g, g);
			#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_FILDESBUF)
			sys::log_message(this->_name, "reset gptr");
			#endif
		}

		void
		reset_pbuf() {
			setp(pfirst(), plast());
		}

		inline char_type*
		gfirst() noexcept {
			return this->_gbuf.begin();
		}

		inline char_type*
		glast() noexcept {
			return this->_gbuf.end();
		}

		inline void
		ggrow() {
			const off_type gptr_offset = gptr()-eback();
			const off_type egptr_offset = egptr()-eback();
			this->_gbuf.grow();
			char_type* base = this->gfirst();
			setg(base, base + gptr_offset, base + egptr_offset);
			assert(gptr() - eback() == gptr_offset);
			assert(egptr() - eback() == egptr_offset);
		}

		inline char_type*
		pfirst() noexcept {
			return this->_pbuf.begin();
		}

		inline char_type*
		plast() noexcept {
			return this->_pbuf.end();
		}

		inline void
		pgrow(std::streamsize new_size) {
			assert(new_size > this->_pbuf.size());
			#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_FILDESBUF)
			sys::log_message(this->_name, "pgrow size=_", new_size);
			#endif
			const off_type pptr_offset = pptr() - pbase();
			const off_type pbase_offset = pbase() - pfirst();
			this->_pbuf.resize(new_size);
			setp(pfirst() + pbase_offset, plast());
			pbump(pptr_offset);
			assert(pptr() - pbase() == pptr_offset);
			assert(pbase() - pfirst() == pbase_offset);
		}

		inline void
		pgrow() {
			this->pgrow(this->_pbuf.size() * 2);
		}

	};

	typedef basic_fildesbuf<char> fildesbuf;

}

#endif // vim:filetype=cpp
