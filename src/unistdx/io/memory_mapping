/*
UNISTDX — C++ library for Linux system calls.
© 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IO_MEMORY_MAPPING
#define UNISTDX_IO_MEMORY_MAPPING

#include <algorithm>
#include <iterator>
#include <limits>

#include <unistdx/base/flag>
#include <unistdx/bits/mman>
#include <unistdx/fs/file_status>
#include <unistdx/io/fildes>

namespace sys {

    /// Memory page access control flags.
    enum class page_flag: int {
        none = PROT_NONE,
        read = PROT_READ,
        write = PROT_WRITE,
        execute = PROT_EXEC,
    };

    template <>
    struct is_flag<page_flag>: public std::true_type {};

    /// Memory mapping flags.
    enum class map_flag: int {
        shared = MAP_SHARED,
        priv = MAP_PRIVATE,
        fixed = MAP_FIXED
        #if defined(UNISTDX_HAVE_MAP_ANONYMOUS)
        , anonymous = MAP_ANONYMOUS
        #endif
        #if defined(UNISTDX_HAVE_MAP_32BIT)
        , bit32 = MAP_32BIT
        #endif
        #if defined(UNISTDX_HAVE_MAP_GROWSDOWN)
        , grows_down = MAP_GROWSDOWN
        #endif
        #if defined(UNISTDX_HAVE_MAP_HUGETLB)
        , huge_page = MAP_HUGETLB
        #endif
        #if defined(UNISTDX_HAVE_MAP_HUGE_2MB)
        , huge_page_2mb = MAP_HUGE_2MB
        #endif
        #if defined(UNISTDX_HAVE_MAP_HUGE_1GB)
        , huge_page_1gb = MAP_HUGE_1GB
        #endif
        #if defined(UNISTDX_HAVE_MAP_LOCKED)
        , locked = MAP_LOCKED
        #endif
        #if defined(UNISTDX_HAVE_MAP_NONBLOCK)
        , non_blocking = MAP_NONBLOCK
        #endif
        #if defined(UNISTDX_HAVE_MAP_NORESERVE)
        , no_reserve = MAP_NORESERVE
        #endif
        #if defined(UNISTDX_HAVE_MAP_POPULATE)
        , populate = MAP_POPULATE
        #endif
        #if defined(UNISTDX_HAVE_MAP_STACK)
        , stack = MAP_STACK
        #endif
        #if defined(UNISTDX_HAVE_MAP_UNINITIALIZED)
        , uninitilalised = MAP_UNINITIALIZED
        #endif
    };

    template <>
    struct is_flag<map_flag>: public std::true_type {};

    /// Memory mapping synchronisation flags.
    enum class sync_flag {
        blocking = MS_SYNC,
        non_blocking = MS_ASYNC,
        invalidate = MS_INVALIDATE
    };

    template <>
    struct is_flag<sync_flag>: public std::true_type {};

    /// Memory mapping advices.
    enum class advise_type {
        normal = MADV_NORMAL,
        random = MADV_RANDOM,
        sequential = MADV_SEQUENTIAL,
        will_need = MADV_WILLNEED,
        do_not_need = MADV_DONTNEED
        #if defined(UNISTDX_HAVE_MADV_REMOVE)
        , nullify = MADV_REMOVE
        #endif
        #if defined(UNISTDX_HAVE_MADV_DONTFORK)
        , inaccessible_on_fork = MADV_DONTFORK
        #endif
        #if defined(UNISTDX_HAVE_MADV_DOFORK)
        , accessible_on_fork = MADV_DOFORK
        #endif
        #if defined(UNISTDX_HAVE_MADV_HWPOISON)
        , poison = MADV_HWPOISON
        #endif
        #if defined(UNISTDX_HAVE_MADV_MERGEABLE)
        , mergeable = MADV_MERGEABLE
        #endif
        #if defined(UNISTDX_HAVE_MADV_UNMERGEABLE)
        , unmergeable = MADV_UNMERGEABLE
        #endif
        #if defined(UNISTDX_HAVE_MADV_SOFT_OFFLINE)
        , soft_offline = MADV_SOFT_OFFLINE
        #endif
        #if defined(UNISTDX_HAVE_MADV_HUGEPAGE)
        , huge_page = MADV_HUGEPAGE
        #endif
        #if defined(UNISTDX_HAVE_MADV_NOHUGEPAGE)
        , no_huge_page = MADV_NOHUGEPAGE
        #endif
        #if defined(UNISTDX_HAVE_MADV_DONTDUMP)
        , do_not_dump = MADV_DONTDUMP
        #endif
        #if defined(UNISTDX_HAVE_MADV_DODUMP)
        , dump = MADV_DODUMP
        #endif
        #if defined(UNISTDX_HAVE_MADV_FREE)
        , free = MADV_FREE
        #endif
        #if defined(UNISTDX_HAVE_MADV_WIPEONFORK)
        , wipe_on_fork = MADV_WIPEONFORK
        #endif
        #if defined(UNISTDX_HAVE_MADV_KEEPONFORK)
        , keep_on_fork = MADV_KEEPONFORK
        #endif
    };

    /**
    \brief Memory mapping for files.
    \date 2018-10-21
    \ingroup io
    */
    template <class T>
    class memory_mapping {

    public:
        /// Alias to \c T.
        typedef T value_type;
        /// Pointer to \c T.
        typedef value_type* iterator;
        /// Constant pointer to \c T.
        typedef const value_type* const_iterator;
        /// Alias to \link std::size_t \endlink.
        typedef std::size_t size_type;
        /// Reverse iterator.
        typedef std::reverse_iterator<iterator> reverse_iterator;
        /// Constant reverse iterator.
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:
        T* _data = nullptr;
        size_type _size = 0;

    public:

        /**
        \brief Construct memory mapping for file descriptor \p fd.
        \date 2018-10-21
        \param[in] fd file descriptor
        \param[in] offset offset (in the number of elements)
                          within the file from which the mapping starts
        \param[in] count the number of elements to map from the file
        \param[in] page_flags access permissions for memory pages being mapped
        \param[in] map_flags mapping options
        */
        inline
        memory_mapping(
            fd_type fd,
            offset_type offset,
            size_type count,
            page_flag page_flags = page_flag::read | page_flag::write,
            map_flag map_flags = map_flag::priv
        ): _size{count} {
            void* ptr = ::mmap(
                nullptr,
                count*sizeof(T),
                static_cast<int>(page_flags),
                static_cast<int>(map_flags),
                fd,
                offset*sizeof(T)
            );
            UNISTDX_CHECK2(ptr, MAP_FAILED);
            this->_data = static_cast<T*>(ptr);
        }

        /**
        \brief Construct memory mapping for file \p filename.
        \date 2018-10-21
        \param[in] filename the name of the file being mapped
        \param[in] offset offset (in the number of elements)
                          within the file from which the mapping starts
        \param[in] count the number of elements to map from the file
        \param[in] page_flags access permissions for memory pages being mapped
        \param[in] map_flags mapping options
        */
        inline explicit
        memory_mapping(
            const char* filename,
            offset_type offset,
            size_type count,
            page_flag page_flags = page_flag::read | page_flag::write,
            map_flag map_flags = map_flag::priv
        ): memory_mapping{
            fildes{filename}.fd(),
            offset,
            count,
            page_flags,
            map_flags
        } {}

        /**
        \brief Construct memory mapping for file descriptor \p fd.
        \date 2018-10-21
        \param[in] fd file descriptor
        \param[in] page_flags access permissions for memory pages being mapped
        \param[in] map_flags mapping options
        */
        inline explicit
        memory_mapping(
            fd_type fd,
            page_flag page_flags = page_flag::read | page_flag::write,
            map_flag map_flags = map_flag::priv
        ): memory_mapping{
            fd,
            0,
            static_cast<size_type>(file_status{fd}.size()),
            page_flags,
            map_flags
        }
        {}

        /**
        \brief Construct memory mapping for the whole file \p filename.
        \date 2018-10-21
        \param[in] filename the name of the file being mapped
        \param[in] page_flags access permissions for memory pages being mapped
        \param[in] map_flags mapping options
        */
        inline explicit
        memory_mapping(
            const char* filename,
            page_flag page_flags = page_flag::read | page_flag::write,
            map_flag map_flags = map_flag::priv
        ): memory_mapping{
            fildes{filename}.fd(),
            0,
            static_cast<size_type>(file_status{filename}.size()),
            page_flags,
            map_flags
        } {}

        /**
        \brief Construct anonymous memory mapping (not backed by any file).
        \date 2018-10-21
        \param[in] count the number of elements in the mapping
        \param[in] page_flags access permissions for memory pages being mapped
        \param[in] map_flags mapping options
        */
        inline explicit
        memory_mapping(
            size_type count,
            page_flag page_flags = page_flag::read | page_flag::write,
            map_flag map_flags = map_flag::anonymous | map_flag::priv
        ): memory_mapping{fd_type{-1},0,count,page_flags,map_flags} {}

        /// Move-constuctor.
        inline
        memory_mapping(memory_mapping&& rhs):
        _data{rhs._data}, _size{rhs._size} {
            rhs._data = nullptr;
        }

        /// Move-assignment.
        inline memory_mapping&
        operator=(memory_mapping&& rhs) {
            this->swap(rhs);
            return *this;
        }

        memory_mapping(const memory_mapping&) = delete;
        memory_mapping& operator=(const memory_mapping&) = delete;

        /// Destructor.
        inline
        ~memory_mapping() {
            if (this->_data) {
                int ret = ::munmap(this->_data, this->_size*sizeof(T));
                if (ret == -1) {
                    std::terminate();
                }
            }
        }

        /**
        \brief
        Flush dirty pages to disk.
        \throws bad_call
        \see \man{msync,2}
        */
        inline void
        sync(sync_flag flags = sync_flag::blocking) {
            UNISTDX_CHECK(::msync(
                this->_data,
                this->_size,
                static_cast<int>(flags)
            ));
        }

        /**
        \brief
        Lock memory pages to prevent swapping.
        \throws bad_call
        \see \man{mlock,2}
        */
        inline void
        lock() {
            UNISTDX_CHECK(::mlock(this->_data, this->_size));
        }

        /**
        \brief
        Unlock memory pages to allow swapping.
        \throws bad_call
        \see \man{mlock,2}
        */
        inline void
        unlock() {
            UNISTDX_CHECK(::munlock(this->_data, this->_size));
        }

        /**
        \brief
        Set memory mapping options and perform actions.
        \throws bad_call
        \see \man{madvise,2}
        */
        inline void
        advise(advise_type adv) {
            UNISTDX_CHECK(::madvise(this->_data, this->_size, adv));
        }

        #if defined(UNISTDX_HAVE_MADV_FREE)
        /**
        \brief
        Mark memory mapping as free. Kernel may free it any time, unless
        the programme writes to it.
        \throws bad_call
        \see \man{madvise,2}
        */
        inline void
        mark_free() {
            this->advise(advise_type::free);
        }
        #endif

        #if defined(UNISTDX_HAVE_MADV_REMOVE)
        /**
        \brief
        Fill memory mapping with noughts.
        \throws bad_call
        \see \man{madvise,2}
        */
        inline void
        nullify() {
            this->advise(advise_type::nullify);
        }
        #endif

        /// Get iterator to the beginning of the container.
        inline iterator
        begin() noexcept {
            return this->_data;
        }

        /// Get iterator to the beginning of the container.
        inline const_iterator
        begin() const noexcept {
            return this->_data;
        }

        /// Get iterator to the beginning of the container.
        inline const_iterator
        cbegin() const noexcept {
            return this->begin();
        }

        /// Get iterator to the beginning of the container.
        inline const_iterator
        rbegin() const noexcept {
            return reverse_iterator(this->end());
        }

        /// Get iterator to the beginning of the container.
        inline const_iterator
        crbegin() const noexcept {
            return const_reverse_iterator(this->cend());
        }

        /// Get iterator to the end of the container.
        inline iterator
        end() noexcept {
            return this->_data + this->_size;
        }

        /// Get iterator to the end of the container.
        inline const_iterator
        end() const noexcept {
            return this->_data + this->_size;
        }

        /// Get iterator to the end of the container.
        inline const_iterator
        cend() const noexcept {
            return this->end();
        }

        /// Get reversed iterator to the end of the container.
        inline const_iterator
        rend() const noexcept {
            return reverse_iterator(this->begin());
        }

        /// Get reversed iterator to the end of the container.
        inline const_iterator
        crend() const noexcept {
            return const_reverse_iterator(this->cbegin());
        }

        /// Get the number of elements in the container.
        inline size_type
        size() const noexcept {
            return this->_size;
        }

        /// Check if the container is empty.
        inline bool
        empty() const noexcept {
            return this->_size == 0;
        }

        /// Get first element.
        inline value_type&
        front() noexcept {
            return *this->begin();
        }

        /// Get first element.
        inline const value_type&
        front() const noexcept {
            return *this->begin();
        }

        /// Get last element.
        inline value_type&
        back() noexcept {
            return *(this->end()-1);
        }

        /// Get last element.
        inline const value_type&
        back() const noexcept {
            return *(this->end()-1);
        }

        /// Get pointer to the first element.
        inline value_type*
        data() noexcept {
            return this->_data;
        }

        /// Get pointer to the first element.
        inline const value_type*
        data() const noexcept {
            return this->_data;
        }

        /// Get reference to the specified element.
        inline value_type&
        operator[](size_type i) noexcept {
            return this->_data[i];
        }

        /// Get reference to the specified element.
        inline const value_type&
        operator[](size_type i) const noexcept {
            return this->_data[i];
        }

        /// Maximum mapping size supported by the library.
        inline size_type
        max_size() noexcept {
            return std::numeric_limits<size_type>::max() / sizeof(value_type);
        }

        /// Maximum mapping size supported by the library.
        inline size_type
        max_size() const noexcept {
            return std::numeric_limits<size_type>::max() / sizeof(value_type);
        }

        /// Swap with \p rhs.
        inline void
        swap(memory_mapping& rhs) noexcept {
            std::swap(this->_data, rhs._data);
            std::swap(this->_size, rhs._size);
        }

    };

    /// Overload of \link std::swap \endlink for \link byte_buffer \endlink.
    template <class T>
    inline void
    swap(memory_mapping<T>& lhs, memory_mapping<T>& rhs) noexcept {
        lhs.swap(rhs);
    }

    /// \{
    template <class T>
    inline bool
    operator==(const memory_mapping<T>& lhs, const memory_mapping<T>& rhs) {
        return lhs.size() == rhs.size()
            && std::equal(lhs.begin(), lhs.end(), rhs.begin());
    }

    template <class T>
    inline bool
    operator!=(const memory_mapping<T>& lhs, const memory_mapping<T>& rhs) {
        return !(lhs == rhs);
    }

    template <class T>
    inline bool
    operator<(const memory_mapping<T>& lhs, const memory_mapping<T>& rhs) {
        return std::lexicographical_compare(
            lhs.begin(),
            lhs.end(),
            rhs.begin(),
            rhs.end()
        );
    }

    template <class T>
    inline bool
    operator<=(const memory_mapping<T>& lhs, const memory_mapping<T>& rhs) {
        return lhs < rhs || lhs == rhs;
    }

    template <class T>
    inline bool
    operator>(const memory_mapping<T>& lhs, const memory_mapping<T>& rhs) {
        return !(lhs <= rhs);
    }

    template <class T>
    inline bool
    operator>=(const memory_mapping<T>& lhs, const memory_mapping<T>& rhs) {
        return !(lhs < rhs);
    }
    /// \}

}

#endif // vim:filetype=cpp
