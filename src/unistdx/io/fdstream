/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IO_FDSTREAM
#define UNISTDX_IO_FDSTREAM

#include <istream>

#include <unistdx/io/fildesbuf>

namespace sys {

    /**
    \brief Input stream that reads from file descriptor.
    \date 2018-05-22
    \ingroup stream io
    \tparam Fd File descriptor type. Can be a wrapper class or \c int.
    \details
    \arg Any type for which \link streambuf_traits \endlink are defined, may
    be used instead of file descriptor.
    \arg Input operations are non-blocking by default.
    */
    template<class Ch, class Tr=std::char_traits<Ch>, class Fd=sys::fildes>
    class basic_ifdstream: public std::basic_istream<Ch,Tr> {

    private:
        typedef std::basic_istream<Ch,Tr> base_type;
        typedef basic_fildesbuf<Ch,Tr,Fd> fildesbuf_type;

    public:
        using typename base_type::char_type;
        using typename base_type::traits_type;
        using typename base_type::int_type;
        using typename base_type::pos_type;
        using typename base_type::off_type;

    public:
        /// File descriptor type.
        typedef Fd fd_type;

    private:
        fildesbuf_type _fildesbuf;

    public:

        /// Construct the stream with file descriptor \p fd.
        inline explicit
        basic_ifdstream(Fd&& fd):
        base_type(nullptr),
        _fildesbuf(std::move(fd), page_size(), 0) {
            this->init(&this->_fildesbuf);
        }

        /// Open the stream with file descriptor \p rhs.
        inline void
        open(fd_type&& rhs) {
            this->close();
            this->_fildesbuf.setfd(std::move(rhs));
        }

        /// Close the stream.
        inline void
        close() {
            this->_fildesbuf.close();
        }

        /// Get file descriptor.
        inline const fd_type&
        fd() const {
            return this->_fildesbuf.fd();
        }

        /// Get file descriptor.
        inline fd_type&
        fd() {
            return this->_fildesbuf.fd();
        }

        /// Get stream buffer.
        inline const fildesbuf_type&
        fdbuf() const noexcept {
            return this->_fildesbuf;
        }

        /// Get stream buffer.
        inline fildesbuf_type&
        fdbuf() noexcept {
            return this->_fildesbuf;
        }

    };

    /**
    \brief Output stream that writes to file descriptor.
    \date 2018-05-22
    \ingroup stream io
    \details
    \arg Any type for which \link streambuf_traits \endlink are defined, may
    be used instead of file descriptor.
    \arg Output operations are non-blocking by default.
    \arg The stream does not flush buffer contents when closed.
    */
    template<class Ch, class Tr=std::char_traits<Ch>, class Fd=sys::fildes>
    class basic_ofdstream: public std::basic_ostream<Ch,Tr> {

    private:
        typedef std::basic_ostream<Ch,Tr> base_type;
        typedef basic_fildesbuf<Ch,Tr,Fd> fildesbuf_type;

    public:
        using typename base_type::char_type;
        using typename base_type::traits_type;
        using typename base_type::int_type;
        using typename base_type::pos_type;
        using typename base_type::off_type;

    public:
        /// File descriptor type. Can be a wrapper class or \c int.
        typedef typename fildesbuf_type::fd_type fd_type;

    private:
        fildesbuf_type _fildesbuf;

    public:

        inline
        basic_ofdstream():
        base_type(nullptr),
        _fildesbuf() {
            this->init(&_fildesbuf);
        }

        /// Construct the stream with file descriptor \p fd.
        inline explicit
        basic_ofdstream(Fd&& fd):
        base_type(nullptr),
        _fildesbuf(std::move(fd), 0, page_size()) {
            this->init(&_fildesbuf);
        }

        /// Open the stream with file descriptor \p rhs.
        inline void
        open(fd_type&& rhs) {
            this->close();
            this->_fildesbuf.setfd(std::move(rhs));
        }

        /// Close the stream.
        inline void
        close() {
            this->_fildesbuf.close();
        }

        /// Get file descriptor.
        inline const fd_type&
        fd() const {
            return this->_fildesbuf.fd();
        }

        /// Get file descriptor.
        inline fd_type&
        fd() {
            return this->_fildesbuf.fd();
        }

        /// Get stream buffer.
        inline const fildesbuf_type&
        fdbuf() const noexcept {
            return this->_fildesbuf;
        }

        /// Get stream buffer.
        inline fildesbuf_type&
        fdbuf() noexcept {
            return this->_fildesbuf;
        }

    };

    /**
    \brief Input/output stream that reads/writes to/from file descriptor.
    \date 2018-05-22
    \ingroup stream io
    \details
    \arg Any type for which \link streambuf_traits \endlink are defined, may
    be used instead of file descriptor.
    \arg Input and output operations are non-blocking by default.
    \arg The stream does not flush buffer contents when closed.
    */
    template<class Ch, class Tr=std::char_traits<Ch>, class Fd=sys::fildes>
    class basic_fdstream: public std::basic_iostream<Ch,Tr> {

    private:
        typedef std::basic_iostream<Ch,Tr> base_type;
        typedef basic_fildesbuf<Ch,Tr,Fd> fildesbuf_type;

    public:
        using typename base_type::char_type;
        using typename base_type::traits_type;
        using typename base_type::int_type;
        using typename base_type::pos_type;
        using typename base_type::off_type;

    public:
        /// File descriptor type. Can be a wrapper class or \c int.
        typedef typename fildesbuf_type::fd_type fd_type;

    private:
        fildesbuf_type _fildesbuf;

    public:

        /// Construct the stream with file descriptor \p fd.
        inline explicit
        basic_fdstream(Fd&& fd):
        base_type(nullptr),
        _fildesbuf(std::move(fd), page_size()) {
            this->init(&_fildesbuf);
        }

        /// Open the stream with file descriptor \p rhs.
        inline void
        open(fd_type&& rhs) {
            this->close();
            this->_fildesbuf.setfd(std::move(rhs));
        }

        /// Close the stream.
        inline void
        close() {
            this->_fildesbuf.close();
        }

        /// Get file descriptor.
        inline const fd_type&
        fd() const {
            return this->_fildesbuf.fd();
        }

        /// Get file descriptor.
        inline fd_type&
        fd() {
            return this->_fildesbuf.fd();
        }

        /// Get stream buffer.
        inline const fildesbuf_type&
        fdbuf() const noexcept {
            return this->_fildesbuf;
        }

        /// Get stream buffer.
        inline fildesbuf_type&
        fdbuf() noexcept {
            return this->_fildesbuf;
        }

    };

    /// \brief Character based input file descriptor stream.
    /// \ingroup io
    typedef basic_ifdstream<char> ifdstream;

    /// \brief Character based output file descriptor stream.
    /// \ingroup io
    typedef basic_ofdstream<char> ofdstream;

    /// \brief Character based input/output file descriptor stream.
    /// \ingroup io
    typedef basic_fdstream<char> fdstream;

}

#endif // vim:filetype=cpp
