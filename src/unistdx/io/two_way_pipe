/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IO_TWO_WAY_PIPE
#define UNISTDX_IO_TWO_WAY_PIPE

#include <unistdx/io/pipe>
#include <unistdx/ipc/process>

namespace sys {

	struct two_way_pipe {

		inline
		two_way_pipe():
		_owner(sys::this_process::id())
		{}

		~two_way_pipe() = default;

		two_way_pipe(const two_way_pipe&) = delete;

		two_way_pipe(two_way_pipe&&) = default;

		two_way_pipe&
		operator=(two_way_pipe&) = delete;

		inline fildes&
		parent_in() noexcept {
			return this->_pipe1.in();
		}

		inline fildes&
		parent_out() noexcept {
			return this->_pipe2.out();
		}

		inline const fildes&
		parent_in() const noexcept {
			return this->_pipe1.in();
		}

		inline const fildes&
		parent_out() const noexcept {
			return this->_pipe2.out();
		}

		inline fildes&
		child_in() noexcept {
			return this->_pipe2.in();
		}

		inline fildes&
		child_out() noexcept {
			return this->_pipe1.out();
		}

		inline const fildes&
		child_in() const noexcept {
			return this->_pipe2.in();
		}

		inline const fildes&
		child_out() const noexcept {
			return this->_pipe1.out();
		}

		inline bool
		is_owner() const noexcept {
			return sys::this_process::id() == this->_owner;
		}

		inline fildes&
		in() noexcept {
			return this->is_owner() ? this->parent_in() : this->child_in();
		}

		inline fildes&
		out() noexcept {
			return this->is_owner() ? this->parent_out() : this->child_out();
		}

		inline const fildes&
		in() const noexcept {
			return this->is_owner() ? this->parent_in() : this->child_in();
		}

		inline const fildes&
		out() const noexcept {
			return this->is_owner() ? this->parent_out() : this->child_out();
		}

		void
		open();

		void
		close();

		void
		close_in_child();

		void
		close_in_parent();

		void
		close_unused();

		void
		remap_in_child();

		void
		remap_in_child(fd_type in, fd_type out);

		void
		validate();

		friend std::ostream&
		operator<<(std::ostream& out, const two_way_pipe& rhs);

	private:

		pipe _pipe1;
		pipe _pipe2;
		pid_type _owner;

	};

	std::ostream&
	operator<<(std::ostream& out, const two_way_pipe& rhs);

}

#endif // vim:filetype=cpp
