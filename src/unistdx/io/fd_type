#ifndef UNISTDX_FD_TYPE
#define UNISTDX_FD_TYPE

#include <functional>
#include <istream>
#include <ostream>

namespace sys {

	/**
	\brief Wrapper for system file descriptor type (int).
	\date 2018-10-21
	\author Ivan Gankevich
	\ingroup wrapper
	*/
	struct fd_type {

		/// File descriptor.
		int fd = -1;

		/// Construct file descriptor with value -1.
		inline constexpr
		fd_type() {}

		/// Construct file descriptor with value \p fd.
		inline constexpr
		fd_type(int fd): fd{fd} {}

		/// Implicitly cast to integer.
		inline constexpr
		operator int() const noexcept {
			return this->fd;
		}

	};

	static_assert(sizeof(fd_type) == sizeof(int), "bad fd_type");

	inline std::ostream&
	operator<<(std::ostream& out, const fd_type& rhs) {
		return out << rhs.fd;
	}

	inline std::istream&
	operator>>(std::istream& in, fd_type& rhs) {
		return in >> rhs.fd;
	}

}

namespace std {

	/// Specialisation of \link std::hash\endlink for \link sys::uint128_t\endlink.
	template<>
	struct hash<::sys::fd_type>: public hash<int> {

		/// Hash function return value type.
		typedef size_t result_type;
		/// Hash function argument type.
		typedef ::sys::fd_type argument_type;

		/// Compute hash as hash for int.
		inline result_type
		operator()(const argument_type& rhs) const noexcept {
			return this->hash<int>::operator()(rhs);
		}

	};

}

#endif // vim:filetype=cpp
