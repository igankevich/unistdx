#ifndef SYS_IO_FILDES
#define SYS_IO_FILDES

#include <unistd.h>
#include <fcntl.h>
#include <unistdx/config>
#if defined(UNISTDX_HAVE_FIONREAD)
#include <sys/ioctl.h>
#endif
#include <unistdx/check>
#include <unistdx/base/streambuf_traits>
#include <ostream>

namespace sys {

	typedef ::mode_t mode_type;
	typedef int fd_type;
	typedef int flag_type;

	struct fildes {

		enum flag: flag_type {
			non_blocking = O_NONBLOCK,
			append = O_APPEND,
			async = O_ASYNC,
			dsync = O_DSYNC,
			sync = O_SYNC,
			create = O_CREAT,
			truncate = O_TRUNC
		};

		enum fd_flag: flag_type {
			close_on_exec = FD_CLOEXEC
		};

		#if defined(UNISTDX_HAVE_SETNOSIGPIPE)
		enum pipe_flag: flag_type {
			no_sigpipe = F_SETNOSIGPIPE
		};
		#endif

		static const fd_type
		bad = -1;

		inline fildes() = default;
		fildes(const fildes&) = delete;
		fildes& operator=(const fildes&) = delete;

		inline explicit
		fildes(fd_type rhs) noexcept:
		_fd(rhs)
		{}

		inline
		fildes(fildes&& rhs) noexcept: _fd(rhs._fd) {
			rhs._fd = bad;
		}

		inline
		~fildes() {
			try {
				this->close();
			} catch (...) {}
		}

		inline fildes&
		operator=(fildes&& rhs) {
			std::swap(this->_fd, rhs._fd);
			return *this;
		}

		inline void
		close() {
			if (*this) {
				UNISTDX_CHECK(::close(this->_fd));
				this->_fd = bad;
			}
		}

		inline ssize_t
		read(void* buf, size_t n) const noexcept {
			return ::read(this->_fd, buf, n);
		}

		inline ssize_t
		write(const void* buf, size_t n) const noexcept {
			return ::write(this->_fd, buf, n);
		}

		inline fd_type
		get_fd() const noexcept {
			return this->_fd;
		}

		inline flag_type
		flags() const {
			return this->get_flags(F_GETFL);
		}

		inline flag_type
		fd_flags() const {
			return this->get_flags(F_GETFD);
		}

		inline void
		setf(flag_type rhs) {
			this->set_flag(F_SETFL, this->get_flags(F_GETFL) | rhs);
		}

		inline void
		unsetf(flag_type rhs) {
			this->set_flag(F_SETFL, this->get_flags(F_GETFL) & ~rhs);
		}

		#if defined(UNISTDX_HAVE_SETNOSIGPIPE)
		inline void
		setf(pipe_flag rhs) {
			this->set_flag(rhs, 1);
		}

		inline void
		unsetf(pipe_flag rhs) {
			this->set_flag(rhs, 0);
		}
		#endif

		inline void
		setf(fd_flag rhs) {
			this->set_flag(F_SETFD, rhs);
		}

		inline bool
		operator==(const fildes& rhs) const noexcept {
			return this->_fd == rhs._fd;
		}

		inline explicit
		operator bool() const noexcept {
			return this->_fd >= 0;
		}

		inline bool
		operator !() const noexcept {
			return !this->operator bool();
		}

		inline bool
		operator==(fd_type rhs) const noexcept {
			return this->_fd == rhs;
		}

		inline friend bool
		operator==(fd_type lhs, const fildes& rhs) noexcept {
			return rhs._fd == lhs;
		}

		friend std::ostream&
		operator<<(std::ostream& out, const fildes& rhs);

		void
		remap(fd_type new_fd);

		inline void
		validate() {
			this->get_flags(F_GETFD);
		}

	private:

		inline flag_type
		get_flags(int which) const {
			int ret;
			UNISTDX_CHECK(ret = ::fcntl(this->_fd, which));
			return ret;
		}

		inline void
		set_flag(int which, flag_type val) {
			UNISTDX_CHECK(::fcntl(this->_fd, which, val));
		}

	protected:
		fd_type _fd = bad;
	};

	std::ostream&
	operator<<(std::ostream& out, const fildes& rhs);

	static_assert(sizeof(fildes) == sizeof(fd_type), "bad fd size");

	template<class T>
	struct fildes_streambuf_traits {

		typedef void char_type;

		inline static std::streamsize
		write(T& sink, const char_type* s, std::streamsize n) {
			return sink.write(s, n);
		}

		inline static std::streamsize
		read(T& src, char_type* s, std::streamsize n) {
			return src.read(s, n);
		}

		inline static bool
		is_blocking(const T& rhs) {
			try {
				return !bool(rhs.flags() & T::non_blocking);
			} catch (sys::bad_call& err) {
				return false;
			}
		}

		inline static std::streamsize
		in_avail(T& rhs) {
			#if defined(UNISTDX_HAVE_FIONREAD)
			int nread;
			if (::ioctl(rhs.get_fd(), FIONREAD, &nread) < 0) {
				nread = 0;
			}
			return nread;
			#else
			return 0;
			#endif
		}

	};

	template<>
	struct streambuf_traits<sys::fildes>:
	public sys::fildes_streambuf_traits<sys::fildes>
	{};

}

#endif // SYS_IO_FILDES vim:filetype=cpp
