/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IO_POLLER
#define UNISTDX_IO_POLLER

#include <chrono>
#include <condition_variable>
#include <vector>

#include <unistdx/base/check>
#include <unistdx/base/unlock_guard>
#include <unistdx/bits/no_copy_and_move>
#include <unistdx/io/epoll_event>
#include <unistdx/io/fildes>
#include <unistdx/io/pipe>

#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_EVENT_POLLER)
#include <unistdx/base/log_message>
#endif

namespace sys {

    /**
    \brief File descriptor poller.
    \date 2018-05-21
    \ingroup semaphore container io
    \details
    \arg File descriptor poller implemented with \man{epoll_create1,2} system call
    having condition variable-like interface.
    \arg The poller has condition variable interface for waiting and notifying.
    */
    class event_poller {

    private:
        typedef std::chrono::steady_clock clock_type;
        template<class Duration>
        using time_point = std::chrono::time_point<clock_type, Duration>;
        typedef std::vector<epoll_event> container_type;

    public:
        /// Container element type.
        typedef typename container_type::value_type value_type;
        /// Container iterator type.
        typedef value_type* iterator;
        /// Container const iterator type.
        typedef const value_type* const_iterator;

    private:
        static const int no_timeout = -1;
        fildes _epollfd;
        /// Notification pipe.
        pipe _pipe;
        container_type _events;
        /// The number of events after the last wait operation.
        int _nevents = 0;

    public:

        /**
        \brief Construct event poller with \p maxevent number of events.
        \throws bad_call
        \see \man{epoll_ctl,2}
        \see \man{epoll_create1,2}
        */
        inline explicit
        event_poller(int maxevents=4096/sizeof(epoll_event)):
        _epollfd(::epoll_create1(EPOLL_CLOEXEC)),
        _pipe(),
        _events(std::max(maxevents, 1)) {
            this->xadd(epoll_event(this->pipe_in(), event::in));
        }

        ~event_poller() = default;

        UNISTDX_NO_COPY_AND_MOVE(event_poller)

        /**
        Returns file descriptor which is used to notify poller
        of an external event.
        */
        inline fd_type
        pipe_in() const noexcept {
            return this->_pipe.in().fd();
        }

        /**
        Notify poller of an external event via \link pipe_in \endlink.
        */
        inline void
        notify_one() noexcept {
            #if !defined(NDEBUG) && defined(UNISTDX_DEBUG_EVENT_POLLER)
            sys::log_message("poller", "notify_one");
            #endif
            char c = '!';
            this->_pipe.out().write(&c, sizeof(char));
        }

        /// \copydoc notify_one
        inline void
        notify_all() noexcept {
            this->notify_one();
        }

        /// Returns iterator to the beginning of array of events.
        inline const_iterator
        begin() const noexcept {
            return this->_events.data();
        }

        /// Returns iterator to the end of array of events.
        inline const_iterator
        end() const noexcept {
            return this->_events.data() + this->_nevents;
        }

        /**
        \brief
        Construct \link epoll_event \endlink in-place with
        file descriptor \p fd and event mask \p ev and
        add it to the poller.
        \throws bad_call
        \see \man{epoll_ctl,2}
        */
        inline void
        emplace(fd_type fd, event ev) {
            this->xadd(epoll_event(fd, ev));
        }

        /**
        \brief Add file descriptor-event mask pair to the poller.
        \throws bad_call
        \see \man{epoll_ctl,2}
        */
        inline void
        insert(const epoll_event& ev) {
            this->xadd(ev);
        }

        /**
        \brief Update event mask for existing file descriptor.
        \see \man{epoll_ctl,2}
        */
        inline void
        replace(const epoll_event& ev) {
            this->xmod(ev);
        }

        /**
        \brief Remove file descriptor \p fd from the poller.
        \throws bad_call
        \see \man{epoll_ctl,2}
        */
        inline void
        erase(fd_type fd) {
            this->xdel(fd);
        }

        /**
        \brief Remove file descriptor-event mask pair to the poller.
        \throws bad_call
        \see \man{epoll_ctl,2}
        \details
        Equivalent to <code>erase(ev.fd())</code>.
        */
        inline void
        erase(const epoll_event& ev) {
            this->xdel(ev.fd());
        }

        /**
        Change maximum number of events that the poller handles at a time
        */
        inline void
        resize(int new_size) {
            this->_events.resize(new_size);
        }

        /**
        Wait for events to occur unlocking \p lock for the duration
        of the wait.
        */
        template<class Lock>
        inline void
        wait(Lock& lock) {
            this->poll_wait(lock, no_timeout);
        }

        /**
        \brief
        Wait for events to occur unlocking \p lock for the duration
        of the wait until predicate \p pred becomes true.
        \throws bad_call if system error occurs, except
        \c std::errc::interrupted
        \see \man{epoll_wait,2}
        \see std::errc
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Pred>
        inline void
        wait(Lock& lock, Pred pred) {
            while (!pred()) {
                this->poll_wait(lock, no_timeout);
            }
        }

        /**
        \brief
        Wait for events to occur specified amount of time \p dur
        unlocking \p lock for the duration of the wait.
        \throws bad_call if system error occurs, except
        \c std::errc::interrupted
        \see \man{epoll_wait,2}
        \see std::errc
        */
        template<class Lock, class Rep, class Period>
        inline std::cv_status
        wait_for(Lock& lock, const std::chrono::duration<Rep,Period>& dur) {
            using namespace std::chrono;
            const auto d = duration_cast<milliseconds>(dur);
            int ret = this->poll_wait(lock, static_cast<int>(d.count()));
            return ret == 0 ? std::cv_status::timeout :
                   std::cv_status::no_timeout;
        }

        /**
        \brief
        Wait for events to occur specified amount of time \p dur
        unlocking \p lock for the duration of the wait until
        predicate \p pred becomes true or timeout occurs.
        \return predicate value
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Rep, class Period, class Pred>
        inline bool
        wait_for(
            Lock& lock,
            const std::chrono::duration<Rep,Period>& dur,
            Pred pred
        ) {
            while (!pred()) {
                if (this->wait_for(lock, dur) == std::cv_status::timeout) {
                    return pred();
                }
            }
            return true;
        }

        /**
        \brief
        Wait for events to occur until specified time \p tp
        unlocking \p lock for the duration of the wait.
        */
        template<class Lock, class Duration>
        inline std::cv_status
        wait_until(Lock& lock, const time_point<Duration>& tp) {
            return wait_for(
                lock,
                std::max(
                    clock_type::duration::zero(),
                    tp-
                    clock_type::now()
                )
            );
        }

        /**
        \brief
        Wait for events to occur until specified time \p tp
        unlocking \p lock for the duration of the wait until
        predicate \p pred becomes true.
        \return predicate value
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Duration, class Pred>
        bool
        wait_until(Lock& lock, const time_point<Duration>& tp, Pred pred) {
            return wait_for(
                lock,
                std::max(clock_type::duration::zero(), tp-clock_type::now()),
                pred
            );
        }

        /**
        \brief
        Wait for events to occur until specified time \p tp
        unlocking \p lock for the duration of the wait.
        */
        template<class Lock, class Clock, class Duration>
        std::cv_status
        wait_until(Lock& lock, const std::chrono::time_point<Clock, Duration>& tp) {
            typedef Clock other_clock;
            const auto delta = tp - other_clock::now();
            const auto new_tp = clock_type::now() + delta;
            return this->wait_until(lock, new_tp);
        }

        /**
        \brief
        Wait for events to occur until specified time \p dur
        unlocking \p lock for the duration of the wait until
        predicate \p pred becomes true or timeout occurs.
        \return predicate value
        \details
        \arg If \p pred is true upon the call to this method
        no waiting or unlocking is done
        \arg The mutex is locked when checking for the predicate.
        */
        template<class Lock, class Clock, class Duration, class Pred>
        inline bool
        wait_until(
            Lock& lock,
            const std::chrono::time_point<Clock, Duration>& tp,
            Pred pred
        ) {
            typedef Clock other_clock;
            const auto delta = tp - other_clock::now();
            const auto new_tp = clock_type::now() + delta;
            return this->wait_until(lock, new_tp, pred);
        }

    private:

        void
        xadd(epoll_event ev) {
            UNISTDX_CHECK(
                ::epoll_ctl(this->epoll_fd(), EPOLL_CTL_ADD, ev.fd(), &ev)
            );
        }

        void
        xmod(epoll_event ev) {
            UNISTDX_CHECK(
                ::epoll_ctl(this->epoll_fd(), EPOLL_CTL_MOD, ev.fd(), &ev)
            );
        }

        void
        xdel(fd_type fd) {
            UNISTDX_CHECK(
                ::epoll_ctl(this->epoll_fd(), EPOLL_CTL_DEL, fd, nullptr)
            );
        }

        template <class Lock>
        int
        poll_wait(Lock& lock, int timeout_millis) {
            int nfds;
            unlock_guard<Lock> g2(lock);
            #if !defined(NDEBUG) && defined(UNISTDX_DEBUG_EVENT_POLLER)
            sys::log_message("poller", "wait");
            #endif
            nfds = ::epoll_wait(
                this->_epollfd.fd(),
                this->_events.data(),
                this->_events.size(),
                timeout_millis
            );
            UNISTDX_CHECK(nfds);
            #if !defined(NDEBUG) && defined(UNISTDX_DEBUG_EVENT_POLLER)
            sys::log_message("poller", "wake up nfds=_", nfds);
            #endif
            this->_nevents = nfds;
            if (nfds > 0) {
                // TODO this is inefficient
                this->consume_pipe();
            }
            return nfds;
        }

        void
        consume_pipe() {
            const size_t n = 20;
            fd_type fd = this->pipe_in();
            char tmp[n];
            ssize_t c;
            while ((c = ::read(fd, tmp, n)) != -1) ;
        }

        inline fd_type
        epoll_fd() noexcept {
            return this->_epollfd.fd();
        }

    };

}

#endif // vim:filetype=cpp
