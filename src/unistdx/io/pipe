/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_IO_PIPE
#define UNISTDX_IO_PIPE

#include <unistdx/io/fildes>

namespace sys {

	union pipe {

		inline
		pipe(): _fds {} {
			this->open();
		}

		inline
		pipe(pipe&& rhs) noexcept:
		_fds {std::move(rhs._fds[0]), std::move(rhs._fds[1])}
		{}

		inline
		pipe(fd_type in, fd_type out) noexcept:
		_fds {sys::fildes(in), sys::fildes(out)}
		{}

		inline
		~pipe() {}

		inline fildes&
		in() noexcept {
			return this->_fds[0];
		}

		inline fildes&
		out() noexcept {
			return this->_fds[1];
		}

		inline const fildes&
		in() const noexcept {
			return this->_fds[0];
		}

		inline const fildes&
		out() const noexcept {
			return this->_fds[1];
		}

		void open();

		void close();

		friend std::ostream&
		operator<<(std::ostream& out, const pipe& rhs);

	private:
		sys::fildes _fds[2] = {};
		fd_type _rawfds[2];

		static_assert(sizeof(_fds) == sizeof(_rawfds), "bad sys::fildes size");
	};

	std::ostream&
	operator<<(std::ostream& out, const pipe& rhs);

}

#endif // vim:filetype=cpp
