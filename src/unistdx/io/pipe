/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_IO_PIPE
#define UNISTDX_IO_PIPE

#include <unistdx/io/fildes>

namespace sys {

    /**
    \brief A pipe constructed with \man{pipe,2} system call.
    \date 2018-05-23
    \ingroup io wrapper
    \see \man{pipe2,2}
    */
    class pipe {

    private:
        fildes _fds[2] = {};

    public:

        /**
        \brief Construct pipe with \man{pipe,2} system call.
        \throws bad_call
        \see \man{pipe2,2}
        \details
        Both file descriptors are in non-blocking mode
        and have close-on-exec flag set.
        */
        inline pipe() { this->open(); }

        /// Move-constructor.
        inline
        pipe(pipe&& rhs) noexcept:
        _fds {std::move(rhs._fds[0]), std::move(rhs._fds[1])}
        {}

        /// Construct pipe with existing file descriptors.
        inline
        pipe(fd_type in, fd_type out) noexcept:
        _fds {sys::fildes(in), sys::fildes(out)}
        {}

        pipe(const pipe&) = delete;
        pipe& operator=(const pipe&) = delete;

        /// Move-assignment.
        inline pipe&
        operator=(pipe&& rhs) noexcept {
            this->swap(rhs);
            return *this;
        }

        ~pipe() noexcept = default;

        /// Input file descriptor.
        inline fildes& in() noexcept { return this->_fds[0]; }

        /// Output file descriptor.
        inline fildes& out() noexcept { return this->_fds[1]; }

        /// Input file descriptor.
        inline const fildes& in() const noexcept { return this->_fds[0]; }

        /// Output file descriptor.
        inline const fildes& out() const noexcept { return this->_fds[1]; }

        /**
        \brief Create pipe with \man{pipe,2} system call.
        \throws bad_call
        \see \man{pipe2,2}
        */
        void open();

        /**
        \brief Close both pipe file descriptors.
        \throws bad_call
        \see \man{close,2}
        */
        void close();

        /// Swap with \p rhs.
        inline void
        swap(pipe& rhs) noexcept {
            sys::swap(this->_fds[0], rhs._fds[0]);
            sys::swap(this->_fds[1], rhs._fds[1]);
        }

        friend std::ostream&
        operator<<(std::ostream& out, const pipe& rhs);

    };

    /// Overload of \link std::swap \endlink for \link pipe \endlink.
    inline void
    swap(pipe& lhs, pipe& rhs) noexcept {
        lhs.swap(rhs);
    }

    /// Print pipe input and output file descriptors for debugging.
    std::ostream&
    operator<<(std::ostream& out, const pipe& rhs);

    class splice {

    private:
        unsigned int _flags = 0
        #if defined(UNISTDX_HAVE_SPLICE_F_NONBLOCK)
            | SPLICE_F_NONBLOCK
        #endif
        #if defined(UNISTDX_HAVE_SPLICE_F_MOVE)
            | SPLICE_F_MOVE
        #endif
        ;

    public:

        ssize_t
        operator()(fildes& in, fildes& out, size_t n);

        inline ssize_t
        operator()(fildes& in, pipe& out, size_t n) {
            return this->operator()(in, out.out(), n);
        }

        inline ssize_t
        operator()(pipe& in, fildes& out, size_t n) {
            return this->operator()(in.in(), out, n);
        }

    };

}

#endif // vim:filetype=cpp
