/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_BASE_BYTE_BUFFER
#define UNISTDX_BASE_BYTE_BUFFER

#include <limits>
#include <stdexcept>
#include <type_traits>

#include <unistdx/base/types>

namespace sys {

    template <class T>
    constexpr bool is_basic() {
        return std::is_same<T,bool>::value ||
               std::is_same<T,char>::value ||
               std::is_same<T,unsigned char>::value ||
               std::is_same<T,char16_t>::value ||
               std::is_same<T,char32_t>::value ||
               std::is_same<T,sys::u8>::value ||
               std::is_same<T,sys::u16>::value ||
               std::is_same<T,sys::u32>::value ||
               std::is_same<T,sys::u64>::value ||
               std::is_same<T,sys::i8>::value ||
               std::is_same<T,sys::i16>::value ||
               std::is_same<T,sys::i32>::value ||
               std::is_same<T,sys::i64>::value ||
               std::is_same<T,sys::f32>::value ||
               std::is_same<T,sys::f64>::value
               #if defined(UNISTDX_HAVE_FLOAT_128)
               || std::is_same<T,sys::f128>::value
               #endif
               ;
    }

    /**
    \brief
    Byte buffer which uses direct memory allocation for maximum performance.
    \date 2018-05-21
    \ingroup container
    \see \man{mmap,2}
    \see \man{mremap,2}
    \see \man{madvise,2}
    \details
    \arg Uses \man{mmap,2} and system calls to bypass memory allocators.
    \arg Uses \man{mremap,2} to efficiently resize the buffer without copying.
    \arg Uses \man{madvise,2} to optimise for sequential access and prevent core dumping.
    */
    class byte_buffer {

    public:
        /// Alias to \c char.
        using value_type = char;
        /// Pointer to \c char.
        using iterator = value_type*;
        /// Constant pointer to \c char.
        using const_iterator = const value_type*;
        /// Alias to \link std::size_t \endlink.
        using size_type = std::size_t;
        using pointer = void*;
        using const_pointer = const void*;

    private:
        value_type* _data = nullptr;
        size_type _size = 0;
        size_type _position = 0;
        size_type _limit = 0;

    public:

        byte_buffer() = default;
        byte_buffer(const byte_buffer&) = delete;
        byte_buffer& operator=(const byte_buffer&) = delete;

        /// Move-constructor.
        inline byte_buffer(byte_buffer&& rhs):
        _data(rhs._data), _size(rhs._size), _position(rhs._position), _limit(rhs._limit) {
            rhs._data = nullptr;
            rhs._size = 0;
            rhs._position = 0;
            rhs._limit = 0;
        }

        /**
        \brief Construct byte buffer with size \p size.
        \throws bad_call
        \see \man{mmap,2}
        \see \man{madvise,2}
        \details
        If \p size is nought, unusable buffer is created
        and no memory is allocated.
        */
        explicit byte_buffer(size_type size);

        ~byte_buffer();

        /// Get pointer to raw data.
        inline iterator
        data() noexcept {
            return this->_data;
        }

        /// Get pointer to raw data.
        inline const_iterator
        data() const noexcept {
            return this->_data;
        }

        /// Get iterator to the beginning of the container.
        inline iterator
        begin() noexcept {
            return this->_data;
        }

        /// Get iterator to the beginning of the container.
        inline const_iterator
        begin() const noexcept {
            return this->_data;
        }

        /// Get iterator to the end of the container.
        inline iterator
        end() noexcept {
            return this->_data + this->_size;
        }

        /// Get iterator to the end of the container.
        inline const_iterator
        end() const noexcept {
            return this->_data + this->_size;
        }

        /// Get number of bytes in byte buffer.
        inline size_type
        size() const noexcept {
            return this->_size;
        }

        /// Check if the buffer is valid.
        inline explicit
        operator bool() const noexcept {
            return this->_data;
        }

        /// Check if the buffer is valid.
        inline bool
        operator!() const noexcept {
            return !this->operator bool();
        }

        /**
        \brief Resize the buffer preserving its contents.
        \throws bad_call
        \see \man{mremap,2}
        \see \man{madvise,2}
        */
        void
        resize(size_type new_size);

        /**
        \brief Double the buffer size.
        \throws std::length_error when maximum size is reached.
        \throws bad_call when system error occurs
        \see \man{mremap,2}
        \see \man{madvise,2}
        */
        void grow();

        /// Returns maximum size a buffer may occupy (theoretical limit).
        inline static size_type
        max_size() noexcept {
            return std::numeric_limits<size_type>::max();
        }

        /// Swap with \p rhs.
        inline void
        swap(byte_buffer& rhs) noexcept {
            std::swap(this->_data, rhs._data);
            std::swap(this->_size, rhs._size);
            std::swap(this->_position, rhs._position);
            std::swap(this->_limit, rhs._limit);
        }

        inline size_type position() const { return this->_position; }
        inline size_type limit() const { return this->_limit; }
        inline size_type remaining() const { return this->_limit - this->_position; }
        inline void position(size_type rhs) { this->_position = rhs; }
        inline void limit(size_type rhs) { this->_limit = rhs; }
        inline void flip() { this->_limit = position(); this->_position = 0; }

        auto write(const_pointer src, size_type n) -> size_type;
        auto read(pointer dst, size_type n) -> size_type;
        void peek(pointer dst, size_type n);
        void bump(size_type n);
        void compact();
        void clear();

        template <class Sink> auto flush(Sink& dst) -> size_type {
            size_type nwritten = 0, n = 0;
            while (remaining() != 0 && (n = dst.write(data()+position(), remaining())) > 0) {
                this->_position += n;
                nwritten += n;
            }
            return nwritten;
        }

        template <class Source> auto fill(Source& src) -> size_type {
            size_type nread = 0, n = 0;
            while (true) {
                if (remaining() == 0) { grow(); }
                n = src.read(data()+position(), remaining());
                if (!(n > 0)) { break; }
                this->_position += n;
                nread += n;
            }
            return nread;
        }

        template <class T>
        auto write(T x) -> typename std::enable_if<is_basic<T>(),void>::type {
            this->write(&x, sizeof(T));
        }

        template <class T>
        auto read(T& x) -> typename std::enable_if<is_basic<T>(),void>::type {
            this->read(&x, sizeof(T));
        }

        template <class C, class T, class A>
        void write(const std::basic_string<C,T,A>& x) {
            this->write(static_cast<sys::u64>(x.size()));
            this->write(x.data(), x.size());
        }

        template <class C, class T, class A>
        void read(std::basic_string<C,T,A>& x) {
            sys::u64 size = 0;
            this->read<sys::u64>(size);
            x.resize(size);
            this->read(&x[0], x.size());
        }

    };

    /// Overload of \link std::swap \endlink for \link byte_buffer \endlink.
    inline void
    swap(byte_buffer& lhs, byte_buffer& rhs) noexcept {
        lhs.swap(rhs);
    }

}

#endif // vim:filetype=cpp
