#ifndef UNISTDX_BASE_WEBSOCKET
#define UNISTDX_BASE_WEBSOCKET

#include <iosfwd>
#include <unistdx/base/types>

namespace sys {

	enum class opcode_type : u8 {
		cont_frame   = 0x0,
		text_frame   = 0x1,
		binary_frame = 0x2,
		conn_close   = 0x8,
		ping         = 0x9,
		pong         = 0xa
	};

	union websocket_frame {

	public:
		static const u16 length16_tag = 126;
		static const u16 length64_tag = 127;
		static const size_t mask_size = 4;
		static const size_t base_size = 2;

	public:
		typedef u32 mask_type;
		typedef u16 length16_type;
		typedef u64 length64_type;

		struct {
			u16 opcode  : 4;
			u16 rsv3    : 1;
			u16 rsv2    : 1;
			u16 rsv1    : 1;
			u16 fin     : 1;
			u8          : 0;
			u16 len     : 7;
			u16 maskbit : 1;
			u8          : 0;
			u16 extlen;
			u8          : 0;
			u32 extlen2;
			u8          : 0;
			u64 footer;        /// extlen3 (16) + mask (32) + padding (16)
		} _hdr = {};
		char _bytes[sizeof(_hdr)];

		// check if header fields are aligned properly
		static_assert(
			offsetof(decltype(_hdr), extlen)  == 2,
			"bad offset of hdr.extlen"
		);
		static_assert(
			offsetof(decltype(_hdr), extlen2) == 4,
			"bad offset of hdr.extlen2"
		);
		static_assert(
			offsetof(decltype(_hdr), footer)  == 8,
			"bad offset of hdr.footer"
		);
		static_assert(sizeof(_hdr) == 16, "bad websocket frame header size");

		inline void
		fin(int rhs) noexcept {
			this->_hdr.fin = rhs;
		}

		inline void
		opcode(opcode_type rhs) noexcept {
			this->_hdr.opcode = static_cast<u16>(rhs);
		}

		inline opcode_type
		opcode() const noexcept {
			return static_cast<opcode_type>(this->_hdr.opcode);
		}

		inline bool
		is_masked() const noexcept {
			return this->_hdr.maskbit == 1;
		}

		inline bool
		is_binary() const noexcept {
			return this->opcode() == opcode_type::binary_frame;
		}

		inline bool
		has_valid_opcode() const noexcept {
			return this->_hdr.opcode >= 0x0 && this->_hdr.opcode <= 0xf;
		}

		inline size_t
		extlen_size() const noexcept {
			return this->_hdr.len == length16_tag ? sizeof(length16_type) :
			       this->_hdr.len == length64_tag ? sizeof(length64_type) : 0;
		}

		inline void
		len(u16 rhs) noexcept {
			this->_hdr.len = rhs;
		}

		inline void
		maskbit(u16 rhs) noexcept {
			this->_hdr.maskbit = rhs;
		}

		length64_type
		    payload_size() const noexcept;

		void
		    payload_size(length64_type rhs) noexcept;

		inline char*
		begin() noexcept {
			return this->_bytes;
		}

		inline const char*
		begin() const noexcept {
			return this->_bytes;
		}

		inline char*
		end() noexcept {
			return this->_bytes + this->size();
		}

		inline const char*
		end() const noexcept {
			return this->_bytes + this->size();
		}

		inline char*
		base() noexcept {
			return this->_bytes + base_size;
		}

		inline const char*
		base() const noexcept {
			return this->_bytes + base_size;
		}

		inline size_t
		size() const noexcept {
			return base_size + this->extlen_size()
			       + (this->is_masked() ? mask_size : 0);
		}

		static constexpr inline size_t
		max_size() noexcept {
			return base_size + sizeof(length64_type) + mask_size;
		}

		static constexpr inline size_t
		min_size() noexcept {
			return base_size;
		}

		mask_type
		mask() const noexcept;

		void
		mask(mask_type rhs) noexcept;

		void
		mask_payload(char* first, char* last) const noexcept;

		void
		clear() noexcept;

		friend std::ostream&
		operator<<(std::ostream& out, const websocket_frame& rhs);

	};

	std::ostream&
	operator<<(std::ostream& out, const websocket_frame& rhs);

}

#endif // vim:filetype=cpp
