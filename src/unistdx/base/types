/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BASE_TYPES
#define UNISTDX_BASE_TYPES

#include <cstddef>
#include <cstdint>

#include <unistdx/config>

namespace sys {

	typedef ::std::uint8_t u8;
	typedef ::std::uint16_t u16;
	typedef ::std::uint32_t u32;
	typedef ::std::uint64_t u64;

	typedef ::std::int8_t i8;
	typedef ::std::int16_t i16;
	typedef ::std::int32_t i32;
	typedef ::std::int64_t i64;

	typedef float f32;
	typedef double f64;
	#if defined(UNISTDX_HAVE_LONG_DOUBLE)
	typedef long double f128;
	static_assert(sizeof(f128) == 16, "bad f128 type");
	#endif

	#define MAKE_ASSERT(bits, bytes) \
	static_assert(sizeof(u ## bits) == bytes, "bad u" #bits " type"); \
	static_assert(sizeof(i ## bits) == bytes, "bad i" #bits " type")

	MAKE_ASSERT(8, 1);
	MAKE_ASSERT(16, 2);
	MAKE_ASSERT(32, 4);
	MAKE_ASSERT(64, 8);

	#undef MAKE_ASSERT

	static_assert(sizeof(f32) == 4, "bad f32 type");
	static_assert(sizeof(f64) == 8, "bad f64 type");

}

#endif // vim:filetype=cpp
