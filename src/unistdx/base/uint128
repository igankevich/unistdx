/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BASE_UINT128
#define UNISTDX_BASE_UINT128

#include <unistdx/base/types>
#include <unistdx/bits/uint128_parse>
#include <unistdx/config>

#if !defined(UNISTDX_HAVE_INT128)
#error __int128 builtin type is missing
#endif

namespace sys {
	typedef unsigned __int128 uint128_t;
	typedef uint128_t u128;
}

// Attempt to simulate useful behaviour for ``unsigned __int128''
// (input/output operators, static type information.)
namespace std {

	inline std::ostream&
	operator<<(std::ostream& out, unsigned __int128 rhs) {
		std::ostream::sentry s(out);
		if (s) {
			sys::bits::uint128_put(rhs, out);
		}
		return out;
	}

	inline std::istream&
	operator>>(std::istream& in, unsigned __int128& rhs) {
		std::istream::sentry s(in);
		if (s) {
			sys::bits::uint128_get(rhs, in);
		}
		return in;
	}

}

namespace std {

	template<> struct is_arithmetic<sys::uint128_t> {
		static const bool value = true;
	};

	template<> struct is_integral<sys::uint128_t> {
		static const bool value = true;
	};

	template<> struct is_unsigned<sys::uint128_t> {
		static const bool value = true;
	};

}

namespace sys {

	namespace literals {

		template<char ... Chars>
		constexpr uint128_t
		operator"" _u128() noexcept {
			return bits::parse_uint<uint128_t, sizeof...(Chars)>((const char[]){Chars...});
		}

	}

}

#include <unistdx/bits/uint128_limits>
#include <unistdx/bits/uint128_hash>

#endif // vim:filetype=cpp
