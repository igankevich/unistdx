/*
UNISTDX — C++ library for Linux system calls.
© 2021 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_BASE_ARRAY_VIEW
#define UNISTDX_BASE_ARRAY_VIEW

#include <cstdint>

namespace sys {

    template <class T>
    class array_view {

    public:
        using value_type = T;
        using pointer = value_type*;
        using const_pointer = const value_type*;
        using reference = value_type&;
        using const_reference = const value_type&;
        using size_type = std::size_t;

    private:
        value_type* _data{};
        size_type _size{};

    public:

        inline array_view(pointer data, size_type size) noexcept:
        _data(data), _size(size) {}

        inline array_view(pointer first, pointer last) noexcept:
        _data(first), _size(last-first) {}

        inline const_pointer data() const noexcept { return this->_data; }
        inline pointer data() noexcept { return this->_data; }
        inline size_type size() const noexcept { return this->_size; }
        inline pointer begin() noexcept { return this->_data; }
        inline const_pointer begin() const noexcept { return this->_data; }
        inline pointer end() noexcept { return this->_data + this->_size; }
        inline const_pointer end() const noexcept { return this->_data + this->_size; }
        inline reference front() noexcept { return *this->begin(); }
        inline const_reference front() const noexcept { return *this->begin(); }
        inline reference back() noexcept { return *(this->end()-1); }
        inline const_reference back() const noexcept { return *(this->end()-1); }
        inline bool empty() const noexcept { return this->_size == 0; }

        array_view() = default;
        ~array_view() = default;
        array_view(const array_view&) = default;
        array_view& operator=(const array_view&) = default;
        array_view(array_view&&) = default;
        array_view& operator=(array_view&&) = default;
    };

    template <>
    class array_view<void> {

    public:
        using value_type = void;
        using pointer = value_type*;
        using const_pointer = const value_type*;
        using size_type = std::size_t;

    private:
        value_type* _data{};
        size_type _size{};

    public:

        inline array_view(pointer data, size_type size) noexcept:
        _data(data), _size(size) {}

        inline const_pointer data() const noexcept { return this->_data; }
        inline pointer data() noexcept { return this->_data; }
        inline size_type size() const noexcept { return this->_size; }
        inline bool empty() const noexcept { return this->_size == 0; }

        array_view() = default;
        ~array_view() = default;
        array_view(const array_view&) = default;
        array_view& operator=(const array_view&) = default;
        array_view(array_view&&) = default;
        array_view& operator=(array_view&&) = default;
    };

}

#endif // vim:filetype=cpp
