#ifndef UNISTDX_BASE_STREAMBUF_TRAITS
#define UNISTDX_BASE_STREAMBUF_TRAITS

#include <streambuf>

namespace sys {

	/**
	\brief Traits that abstract read and write operations for stream buffers.
	\date 2018-05-22
	\author Ivan Gankevich
	\ingroup traits
	\details
	\arg With this class it is possible to plug arbitrary object (including
	another stream buffer) as a source or sink for stream buffer using
	\link basic_fildesbuf\endlink.
	\arg Generic implementation is done for \link std::streambuf\endlink.
	*/
	template<class T>
	struct streambuf_traits {

		/// Character type.
		typedef typename T::char_type char_type;

		/**
		Write \p n bytes from array pointed by \p s to buffer \p buf.
		*/
		inline static std::streamsize
		write(T& buf, const char_type* s, std::streamsize n) {
			return buf.sputn(s, n);
		}

		/**
		Read \p n bytes to array pointed by \p s from buffer \p buf.
		*/
		inline static std::streamsize
		read(T& buf, char_type* s, std::streamsize n) {
			return buf.sgetn(s, n);
		}

		/// Check if the source/sink is blocking.
		inline static bool
		is_blocking(const T&) {
			return false;
		}

		/// Check how many bytes are available for reading in buffer \p buf.
		inline static std::streamsize
		in_avail(T& buf) {
			return buf.in_avail();
		}

	};


}

#endif // vim:filetype=cpp
