#ifndef BASE_N_RANDOM_BYTES
#define BASE_N_RANDOM_BYTES

#include <cstddef>

namespace sys {

	template<class Result, class Engine>
	Result
	n_random_bytes(Engine& engine) {
		typedef Result result_type;
		typedef typename Engine::result_type base_result_type;
		static_assert(sizeof(base_result_type) > 0, "bad base result type");
		static_assert(sizeof(result_type) > 0, "bad result type");
		static_assert(
			sizeof(result_type) % sizeof(base_result_type) == 0,
			"bad result type"
		);
		constexpr const std::size_t NUM_BASE_RESULTS =
			sizeof(result_type) / sizeof(base_result_type);
		union {
			result_type value {};
			base_result_type base[NUM_BASE_RESULTS];
		} result;
		base_result_type* first = result.base;
		base_result_type* last = first + NUM_BASE_RESULTS;
		while (first != last) {
			*first = engine();
			++first;
		}
		return result.value;
	}

}

#endif // BASE_N_RANDOM_BYTES vim:filetype=cpp
