/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BASE_CHECK
#define UNISTDX_BASE_CHECK

#include <system_error>
#include <iosfwd>

#define UNISTDX_THROW_BAD_CALL() \
	throw ::sys::bad_call(__FILE__, __LINE__, __func__)

#define UNISTDX_CHECK(func) \
{ \
	if ((func) == -1) { \
		throw ::sys::bad_call(__FILE__, __LINE__, __func__); \
	} \
}

#define UNISTDX_CHECK2(func, ret) \
{ \
	if ((func) == (ret)) { \
		throw ::sys::bad_call(__FILE__, __LINE__, __func__); \
	} \
}

#define UNISTDX_CHECK_IF_NOT(good_err, func) \
{ \
	if ((func) == -1 && errno != (good_err)) { \
		throw ::sys::bad_call(__FILE__, __LINE__, __func__); \
	} \
}

namespace sys {

	struct bad_call: public std::system_error {

		inline
		bad_call(const char* file, const int line, const char* function) noexcept:
		std::system_error(errno, std::generic_category()),
		_file(file), _line(line), _function(function)
		{}

		friend std::ostream&
		operator<<(std::ostream& out, const bad_call& rhs);

	private:
		const char* _file;
		const int _line;
		const char* _function;
	};

	std::ostream&
	operator<<(std::ostream& out, const bad_call& rhs);

}

#endif // vim:filetype=cpp
