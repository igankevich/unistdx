#ifndef UNISTDX_BASE_SHA1
#define UNISTDX_BASE_SHA1

#include <unistdx/base/types>

namespace sys {

	/**
	\brief Computes bytes digest using SHA-1 algorithm.
	\date 2018-05-21
	\author Ivan Gankevich
	\ingroup base
	\details Computes bytes digest using
	<a href="https://tools.ietf.org/html/rfc3174"> US Secure Hash Algorithm 1
	(SHA-1) algorithm</a>.
	*/
	class sha1 {

	private:
		static const u32 h0 = 0x67452301;
		static const u32 h1 = 0xefcdab89;
		static const u32 h2 = 0x98badcfe;
		static const u32 h3 = 0x10325476;
		static const u32 h4 = 0xc3d2e1f0;

	private:
		union {
			unsigned char _block[64];
			u32 _words[80];
			u64 _dwords[8];
		};
		union {
			u32 _digest[5];
			unsigned char _bytes[20];
		};
		unsigned char* _blockptr;
		std::size_t _length = 0;

	public:

		inline
		sha1() noexcept:
		_digest{h0, h1, h2, h3, h4},
		_blockptr{_block}
		{}

		inline void
		reset() {
			this->_digest[0] = h0;
			this->_digest[1] = h1;
			this->_digest[2] = h2;
			this->_digest[3] = h3;
			this->_digest[4] = h4;
			this->_blockptr = this->_block;
			this->_length = 0;
		}

		inline void
		put(const char* first, std::size_t n) {
			this->xput(first, first+n, n);
		}

		inline void
		put(const char* first, const char* last) {
			this->xput(first, last, last-first);
		}

		inline void
		compute() noexcept {
			if (this->_blockptr != this->block_end()) {
				this->pad_block();
			}
		}

		inline void
		digest(char* result) noexcept {
			for (int i=0; i<20; ++i) {
				result[i] = this->_bytes[i];
			}
		}

		inline void
		digest(u32* result) noexcept {
			for (int i=0; i<5; ++i) {
				result[i] = this->_digest[i];
			}
		}

		inline const u32*
		digest() const noexcept {
			return this->_digest;
		}

		inline const unsigned char*
		digest_bytes() const noexcept {
			return this->_bytes;
		}

	private:

		void
		xput(const char* s, const char* sn, std::size_t n);

		void
		process_block() noexcept;

		void
		pad_block() noexcept;

		inline unsigned char*
		block_begin() noexcept {
			return this->_block;
		}

		inline unsigned char*
		block_end() noexcept {
			return this->_block + 64;
		}

	};

}

#endif // vim:filetype=cpp
