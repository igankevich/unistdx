#ifndef UNISTDX_BASE_UNLOCK_GUARD
#define UNISTDX_BASE_UNLOCK_GUARD

#include <unistdx/bits/no_copy_and_move>

namespace sys {

	/**
	\brief The inverse of standard lock guard.
	\date 2018-05-21
	\author Ivan Gankevich
	\ingroup guard
	\tparam Mutex mutex type
	*/
	template<class Mutex>
	class unlock_guard {

	public:
		/// The type of mutex.
		typedef Mutex mutex_type;

	private:
		Mutex& _mtx;

	public:

		/// Construct unlock guard with mutex \p m and unlock the mutex.
		inline explicit
		unlock_guard(mutex_type& m) noexcept:
		_mtx(m)
		{ this->unlock(); }

		/// Destroy unlock guard and lock the mutex.
		inline
		~unlock_guard() noexcept {
			this->lock();
		}

		/// Lock the mutex.
		inline void
		lock() noexcept {
			this->_mtx.lock();
		}

		/// Unlock the mutex.
		inline void
		unlock() noexcept {
			this->_mtx.unlock();
		}

		UNISTDX_NO_COPY_AND_MOVE(unlock_guard)

	};

}

#endif // vim:filetype=cpp
