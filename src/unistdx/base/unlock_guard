#ifndef UNISTDX_BASE_UNLOCK_GUARD
#define UNISTDX_BASE_UNLOCK_GUARD

#include <unistdx/bits/no_copy_and_move>

namespace sys {

	/**
	\brief The inverse of standard lock guard.
	\date 2018-05-21
	\author Ivan Gankevich
	\ingroup base guard
	*/
	template<class Mutex>
	class unlock_guard {

	public:
		typedef Mutex mutex_type;

	private:
		Mutex& _mtx;

	public:
		inline explicit
		unlock_guard(mutex_type& m) noexcept:
		_mtx(m)
		{ this->unlock(); }

		inline
		~unlock_guard() noexcept {
			this->lock();
		}

		inline void
		lock() noexcept {
			this->_mtx.lock();
		}

		inline void
		unlock() noexcept {
			this->_mtx.unlock();
		}

		UNISTDX_NO_COPY_AND_MOVE(unlock_guard)

	};

	/// @deprecated
	template<class Lock, class It, class Func>
	inline void
	for_each_unlock(Lock& lock, It first, It last, Func func) {
		while (first != last) {
			unlock_guard<Lock> unlock(lock);
			func(*first);
			++first;
		}
	}

}

#endif // vim:filetype=cpp
