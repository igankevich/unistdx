/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BASE_UNLOCK_GUARD
#define UNISTDX_BASE_UNLOCK_GUARD

#include <unistdx/bits/no_copy_and_move>

namespace sys {

	template<class Mutex>
	class unlock_guard {

	public:
		typedef Mutex mutex_type;

	private:
		Mutex& _mtx;

	public:
		inline explicit
		unlock_guard(mutex_type& m) noexcept:
		_mtx(m)
		{ this->unlock(); }

		inline
		~unlock_guard() noexcept {
			this->lock();
		}

		inline void
		lock() noexcept {
			this->_mtx.lock();
		}

		inline void
		unlock() noexcept {
			this->_mtx.unlock();
		}

		UNISTDX_NO_COPY_AND_MOVE(unlock_guard)

	};

	/// @deprecated
	template<class Lock, class It, class Func>
	inline void
	for_each_unlock(Lock& lock, It first, It last, Func func) {
		while (first != last) {
			unlock_guard<Lock> unlock(lock);
			func(*first);
			++first;
		}
	}

}

#endif // vim:filetype=cpp
