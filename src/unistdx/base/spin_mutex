#ifndef UNISTDX_BASE_SPIN_MUTEX
#define UNISTDX_BASE_SPIN_MUTEX

#include <atomic>

#include <unistdx/bits/no_copy_and_move>

namespace sys {

	/**
	\defgroup mutex Mutexes
	\brief Mutual exclusion.
	*/

	/**
	\brief Fast mutex that does not use system calls.
	\date 2018-05-21
	\author Ivan Gankevich
	\ingroup base mutex
	\details
	\arg Uses \c std::atomic_flag.
	*/
	class spin_mutex {

	private:
		std::atomic_flag _flag = ATOMIC_FLAG_INIT;

	public:

		/// Lock the mutex.
		inline void
		lock() noexcept {
			while (this->_flag.test_and_set(std::memory_order_acquire));
		}

		/// Unlock the mutex.
		inline void
		unlock() noexcept {
			this->_flag.clear(std::memory_order_release);
		}

		/// Try to lock the mutex without blocking.
		inline bool
		try_lock() noexcept {
			return !this->_flag.test_and_set(std::memory_order_acquire);
		}

		/// Construct spin mutex.
		inline
		spin_mutex() noexcept = default;

		UNISTDX_NO_COPY_AND_MOVE(spin_mutex)

	};

}

#endif // vim:filetype=cpp
