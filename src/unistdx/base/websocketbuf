#ifndef UNISTDX_BASE_WEBSOCKETBUF
#define UNISTDX_BASE_WEBSOCKETBUF

#include <streambuf>
#include <string>
#include <unordered_map>
#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_WEBSOCKETBUF)
#include <unistdx/base/log_message>
#endif
#include <unistdx/base/packetbuf>
#include <unistdx/base/websocket>

namespace sys {

	template<class Ch, class Tr=std::char_traits<Ch> >
	class basic_websocketbuf: public virtual basic_packetbuf<Ch,Tr> {

	public:
		using typename std::basic_streambuf<Ch,Tr>::pos_type;
		using typename std::basic_streambuf<Ch,Tr>::off_type;
		using typename std::basic_streambuf<Ch,Tr>::char_type;
		using typename std::basic_streambuf<Ch,Tr>::traits_type;

		enum struct role_type {
			server,
			client
		};

	private:

		enum struct server_state {
			initial,
			parsing_http_method,
			parsing_http_headers,
			validating_headers,
			writing_handshake,
			end,
		};

		enum struct client_state {
			initial,
			writing_handshake,
			parsing_http_status,
			parsing_http_headers,
			validating_headers,
			end
		};

		typedef std::unordered_map<std::string, std::string> map_type;

	private:
		client_state _cstate = client_state::initial;
		server_state _sstate = server_state::initial;
		role_type _role = role_type::server;
		map_type _headers;
		bool _valid = true;
		websocket_frame _iframe;

	public:

		inline void
		role(role_type r) noexcept {
			this->_role = r;
		}

		inline role_type
		role() const noexcept {
			return this->_role;
		}

		inline bool
		handshake() override {
			return (this->_role == role_type::server)
			       ? this->server_handshake()
				   : this->client_handshake();
		}

		bool
		server_handshake();

		bool
		client_handshake();

	private:

		void
		put_header() override;

		std::streamsize
		overwrite_header(std::streamsize n) override;

		virtual bool
		xgetheader(
			std::streamsize& header_size,
			std::streamsize& payload_size
		) override;

		void
		on_payload() override;

		void
		initiate_handshake();

		void
		write_handshake();

		void
		put_websocket_key();

		void
		put_websocket_accept_header();

		void
		parse_http_status();

		void
		parse_http_method();

		void
		parse_http_headers();

		void
		validate_http_headers();

		inline bool
		has_header(const std::string& key) {
			return this->_headers.find(key) != this->_headers.end();
		}

		inline bool
		has_header(const std::string& key, const std::string& value) {
			auto result = this->_headers.find(key);
			return result != this->_headers.end() && result->second == value;
		}

		#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_WEBSOCKETBUF)
		void
		setstate(server_state s);

		#else
		inline void
		setstate(server_state s) noexcept {
			this->_sstate = s;
		}

		#endif

		#if !defined(NDEBUG) && defined(UNISTDX_DEBUG_WEBSOCKETBUF)
		void
		setstate(client_state s);

		#else
		inline void
		setstate(client_state s) noexcept {
			this->_cstate = s;
		}

		#endif

		char_type*
		find_the_end_of_the_line() noexcept;

	};

}

#endif // vim:filetype=cpp
