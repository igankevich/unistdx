/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_BASE_LOG_MESSAGE
#define UNISTDX_BASE_LOG_MESSAGE

#include <cassert>

#include <unistdx/bits/macros>
#include <unistdx/io/sysstream>

namespace sys {

    /**
    \brief Write formatted log message.
    \date 2018-05-22
    \details
    \arg The message is buffered, so it is safe to use this class
    in multi-threaded programme.
    \arg Message arguments are inserted using their output operators.
    \arg Insertion location is determined by underscore, or \c spec character.
    \arg Every message is prefixed by abstract name.
    It can be object name, class name or any other identified that distinguishes
    message origin.
    \arg Message names are right-aligned which makes log look like chat, where
    different subsystems talk to each other.
    \arg Message is logged in destructor.
    */
    class log_message {

    private:
        osysstream _str;
        char _spec = '_';

    public:

        /**
        \brief Create log message.
        \date 2018-05-22
        \details
        Create log message with name \p name, argument marker '_',
        formatted text \p fmt, and arguments \p tokens, that will be
        sent to standard error stream when destructor is called.
        */
        template<class ... Args>
        explicit
        log_message(const char* name, const char* fmt, const Args& ... tokens):
        log_message(name, '_', fmt, tokens ...)
        {}

        /**
        \brief Create log message.
        \date 2018-05-22
        \details
        Create log message with name \p name, argument marker \p spec,
        formatted text \p fmt, and arguments \p tokens, that will be
        sent to standard error stream when destructor is called.
        */
        template<class ... Args>
        explicit
        log_message(
            const char* name,
            char spec,
            const char* fmt,
            const Args& ... tokens
        ):
        _str(STDERR_FILENO, 256),
        _spec(spec) {
            assert(name != nullptr); // LCOV_EXCL_LINE
            assert(fmt != nullptr); // LCOV_EXCL_LINE
            this->write_name(name);
            this->format_msg(fmt, tokens ...);
        }

        /**
        \brief Create log message.
        \date 2018-06-05
        \details
        Create log message with name \p name, argument marker \p spec,
        that will be sent to standard error stream when destructor is called.
        */
        template<class ... Args>
        explicit
        log_message(const char* name, char spec='_'):
        _str(STDERR_FILENO, 256),
        _spec(spec) {
            assert(name != nullptr); // LCOV_EXCL_LINE
            this->write_name(name);
        }

        /// Append newline character and flush the stream.
        inline
        ~log_message() {
            char ch = '\n';
            this->_str.buf().sputn(&ch, 1);
            this->_str.buf().pubflush();
        }

        /// Access log message stream.
        inline std::ostream&
        out() noexcept {
            return this->_str;
        }

    private:

        inline void
        format_msg(const char* s) {
            assert(s != nullptr); // LCOV_EXCL_LINE
            this->_str << s;
        }

        template<class T, class ... Args>
        void
        format_msg(const char* s, const T& value, const Args& ... args) {
            assert(s != nullptr); // LCOV_EXCL_LINE
            const char* olds = s;
            while (*s && *s != this->_spec) {
                ++s;
            }
            this->_str.rdbuf()->sputn(olds, s - olds);
            this->_str << value;
            if (*s) {
                this->format_msg(++s, args ...);
            }
        }

        inline void
        write_name(const char* name) {
            assert(name != nullptr); // LCOV_EXCL_LINE
            this->_str.width(10);
            this->_str.setf(std::ios::right, std::ios::adjustfield);
            this->_str << name << ": ";
        }

    };

}

#endif // vim:filetype=cpp
