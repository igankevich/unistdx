/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BASE_LOG_MESSAGE
#define UNISTDX_BASE_LOG_MESSAGE

#include <cassert>

#include <unistdx/io/sysstream>

namespace sys {

	class log_message {

	public:

		template<class ... Args>
		explicit
		log_message(
			std::ostream& rhs,
			const char* name,
			char spec,
			const char* fmt,
			const Args& ... tokens
		):
		_log(rhs),
		_spec(spec) {
			assert(name);
			assert(fmt);
			this->write_name(name);
			this->format_msg(fmt, tokens ...);
		}

		template<class ... Args>
		explicit
		log_message(
			std::ostream& rhs,
			const char* name,
			const char* fmt,
			const Args& ... tokens
		):
		log_message(rhs, name, '_', fmt, tokens ...)
		{}

		template<class ... Args>
		explicit
		log_message(const char* name, const char* fmt, const Args& ... tokens):
		log_message(name, '_', fmt, tokens ...)
		{}

		template<class ... Args>
		explicit
		log_message(
			const char* name,
			char spec,
			const char* fmt,
			const Args& ... tokens
		):
		_str(STDERR_FILENO, 256),
		_log(_str),
		_spec(spec) {
			assert(name);
			assert(fmt);
			this->write_name(name);
			this->format_msg(fmt, tokens ...);
		}

		~log_message();

		template<class T>
		std::ostream&
		operator<<(const T& rhs) {
			return this->_log << rhs;
		}

		inline std::ostream&
		operator<<(std::ostream& (*rhs)(std::ostream&)) {
			return this->_log << rhs;
		}

		inline std::ostream&
		out() noexcept {
			return this->_log;
		}

	private:

		inline void
		format_msg(const char* s) {
			this->_str << s;
		}

		template<class T, class ... Args>
		void
		format_msg(const char* s, const T& value, const Args& ... args) {
			const char* olds = s;
			while (*s && *s != this->_spec) {
				++s;
			}
			this->_log.rdbuf()->sputn(olds, s - olds);
			this->_log << value;
			if (*s) {
				this->format_msg(++s, args ...);
			}
		}

		inline void
		write_name(const char* name) {
			this->_log.width(10);
			this->_log.setf(std::ios::right, std::ios::adjustfield);
			this->_log << name << ": ";
		}

		osysstream _str;
		std::ostream& _log;
		char _spec = '_';

	};

}

#endif // vim:filetype=cpp
