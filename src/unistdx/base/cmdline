#ifndef UNISTDX_BASE_CMDLINE
#define UNISTDX_BASE_CMDLINE

#include <functional>
#include <istream>
#include <sstream>
#include <string>

namespace sys {

	template <class T>
	class key_value {

	public:
		typedef std::string key_type;

	private:
		key_type _key;
		T& _value;

	public:
		inline
		key_value(const key_type& key, T& value):
		_key(key),
		_value(value)
		{}

		inline bool
		operator()(int pos, const std::string& arg) {
			bool success = false;
			std::string::size_type eq_pos = arg.find('=');
			if (eq_pos != std::string::npos) {
				if (arg.compare(0, eq_pos, this->_key) == 0) {
					std::stringstream in(arg.substr(eq_pos+1));
					in >> this->_value;
					success = !in.fail();
				}
			}
			return success;
		}

	};

	template <class T>
	key_value<T>
	make_key_value(const std::string& key, T& value) {
		return key_value<T>(key, value);
	}

	struct ignore_first_argument {
		inline bool
		operator()(int pos, const std::string&) {
			return pos == 0;
		}
	};

	typedef std::function<bool (int,const std::string&)>
	    input_operator_type;

	void
	parse_arguments(
		int argc,
		const char* argv[],
		input_operator_type* input_operators
	);

}

#endif // UNISTDX_BASE_CMDLINE vim:filetype=cpp
