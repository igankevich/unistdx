/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_NET_BASE64
#define UNISTDX_NET_BASE64

#include <cstddef>
#include <limits>
#include <stdexcept>

namespace sys {

	inline size_t
	base64_encoded_size(size_t len) {
		if (len > std::numeric_limits<size_t>::max()/4u*3u-2u) {
			throw std::length_error("base64 length is too large");
		}
		return ((len + 2u) / 3u) * 4u;
	}

	inline constexpr size_t
	base64_max_decoded_size(size_t len) noexcept {
		return (len / 4u) * 3u;
	}

	void
	base64_encode(const char* first, size_t n, char* result);

	inline void
	base64_encode(const char* first, const char* last, char* result) {
		base64_encode(first, last-first, result);
	}

	size_t
	base64_decode(const char* first, size_t n, char* result);

	inline size_t
	base64_decode(const char* first, const char* last, char* result) {
		return base64_decode(first, last-first, result);
	}

}

#endif // vim:filetype=cpp
