/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_BASE_BASE64
#define UNISTDX_BASE_BASE64

#include <cstddef>
#include <limits>
#include <stdexcept>

#include <unistdx/bits/macros>

namespace sys {

    /**
    \brief The length of \p len bytes sequence encoded in BASE64.
    \see \rfc{4648}
    \throws std::length_error when \p len is too large to be encoded
    as BASE64 string on this system
    */
    inline size_t
    base64_encoded_size(size_t len) {
        if (len > std::numeric_limits<size_t>::max()/4u*3u-2u) {
            throw std::length_error("base64 length is too large"); // LCOV_EXCL_LINE
        }
        return ((len + 2u) / 3u) * 4u;
    }

    /**
    \brief The length of \p len bytes sequence decoded from BASE64.
    \see \rfc{4648}
    */
    UNISTDX_CONST size_t
    base64_max_decoded_size(size_t len) noexcept {
        return (len / 4u) * 3u;
    }

    /**
    \brief Encode byte sequence with BASE64.
    \see \rfc{4648}
    \details
    Encode byte sequence pointed by \p first with length \p n
    with BASE64 and put result to memory location pointed by
    \p result.
    */
    UNISTDX_FLATTEN void
    base64_encode(const char* first, size_t n, char* result) noexcept;

    /**
    \brief Encode byte sequence with BASE64.
    \see \rfc{4648}
    \details
    Encode byte sequence located between \p first and \p last
    with BASE64 and put result to memory location pointed by
    \p result.
    */
    inline void
    base64_encode(const char* first, const char* last, char* result) noexcept {
        base64_encode(first, last-first, result);
    }

    /**
    \brief Decode BASE64 byte sequence.
    \see \rfc{4648}
    \return the length of the decoded sequence
    \throws std::invalid_argument when input sequence is not valid BASE64 string
    \details
    Decode BASE64 byte sequence pointed by \p first with length \p n
    and put result to memory location pointed by \p result.
    */
    UNISTDX_FLATTEN size_t
    base64_decode(const char* first, size_t n, char* result);

    /**
    \brief Decode BASE64 byte sequence.
    \see \rfc{4648}
    \return the length of the decoded sequence
    \throws std::invalid_argument when input sequence is not valid BASE64 string
    \details
    Decode BASE64 byte sequence between \p first and \p last
    and put result to memory location pointed by \p result.
    */
    inline size_t
    base64_decode(const char* first, const char* last, char* result) {
        return base64_decode(first, last-first, result);
    }

}

#endif // vim:filetype=cpp
