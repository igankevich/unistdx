#ifndef UNISTDX_BITS_UINT128_PARSE
#define UNISTDX_BITS_UINT128_PARSE

namespace sys {

	namespace bits {

		inline constexpr char
		const_tolower(char ch) noexcept {
			return ch >= 'A' && ch <= 'F' ? ('a'+ch-'A') : ch;
		}

		template<unsigned int radix, class Ch>
		constexpr Ch
		to_int(Ch ch) noexcept {
			return radix == 16 && ch >= 'a' ? ch-'a'+10 : ch-'0';
		}

		template<class Uint, unsigned int radix, class It>
		constexpr Uint
		do_parse_uint(It first, It last, Uint val=0) noexcept {
			return first == last ? val
				: do_parse_uint<Uint, radix>(first+1, last,
				val*radix + to_int<radix>(const_tolower(*first)));
		}

		template<class Uint, std::size_t n, class Arr>
		constexpr Uint
		parse_uint(Arr arr) noexcept {
			return
				n >= 2 && arr[0] == '0' && arr[1] == 'x' ? do_parse_uint<Uint,16>(arr+2, arr + n) :
				n >= 2 && arr[0] == '0' && arr[1] >= '1' && arr[1] <= '9' ? do_parse_uint<Uint,8>(arr+1, arr + n) :
				do_parse_uint<Uint,10>(arr, arr+n);
		}

	}

}
#endif // vim:filetype=cpp
