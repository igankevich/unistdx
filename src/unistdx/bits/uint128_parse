#ifndef BASE_BITS_UINT128_PARSE
#define BASE_BITS_UINT128_PARSE

#include <ostream>
#include <istream>

namespace sys {

	namespace bits {

		inline constexpr char
		const_tolower(char ch) noexcept {
			return ch >= 'A' && ch <= 'F' ? ('a'+ch-'A') : ch;
		}

		template<unsigned int radix, class Ch>
		constexpr Ch
		to_int(Ch ch) noexcept {
			return radix == 16 && ch >= 'a' ? ch-'a'+10 : ch-'0';
		}

		inline int
		get_stream_radix(const std::ios_base& out) noexcept {
			return (out.flags() & std::ios_base::hex) ? 16 :
				(out.flags() & std::ios_base::oct) ? 8 : 10;
		}

		template<class Uint, unsigned int radix, class It>
		constexpr Uint
		do_parse_uint(It first, It last, Uint val=0) noexcept {
			return first == last ? val
				: do_parse_uint<Uint, radix>(first+1, last,
				val*radix + to_int<radix>(const_tolower(*first)));
		}

		template<class Uint, std::size_t n, class Arr>
		constexpr Uint
		parse_uint(Arr arr) noexcept {
			return
				n >= 2 && arr[0] == '0' && arr[1] == 'x' ? do_parse_uint<Uint,16>(arr+2, arr + n) :
				n >= 2 && arr[0] == '0' && arr[1] >= '1' && arr[1] <= '9' ? do_parse_uint<Uint,8>(arr+1, arr + n) :
				do_parse_uint<Uint,10>(arr, arr+n);
		}

		template<class T>
		void
		uint128_put(T n, std::ostream& out) {

			if (n == 0) { out << '0'; return; }

			static constexpr const unsigned int
			MAX_DIGITS_BASE8 = 43;
			//static constexpr const unsigned int
			//MAX_DIGITS_BASE10 = 39;
			//static constexpr const unsigned int
			//MAX_DIGITS_BASE16 = 32;

			unsigned int radix = get_stream_radix(out);
    		char buf[MAX_DIGITS_BASE8] = {};
    		int i = MAX_DIGITS_BASE8;

    		while (n) {
				T remainder = n%radix;
				n /= radix;
        		buf[--i] = "0123456789abcdef"[remainder];
    		}

			out.rdbuf()->sputn(buf + i, sizeof(buf) - i);
		}

		template<class T>
		void
		uint128_get(T& rhs, std::istream& in) {
			rhs = 0;
			unsigned int radix = get_stream_radix(in);
			char ch;
			while (in >> ch) {
				unsigned int n = radix;
				switch (radix) {
					case 16: {
						ch = std::tolower(ch);
						if (ch >= 'a' && ch <= 'f') {
							n = ch - 'a' + 10;
						} else if (ch >= '0' && ch <= '9') {
							n = ch - '0';
						}
					} break;
					case 8:
						if (ch >= '0' && ch <= '7') {
							n = ch - '0';
						}
						break;
					case 10:
					default:
						if (ch >= '0' && ch <= '9') {
							n = ch - '0';
						}
						break;
				}
				if (n == radix) {
					break;
				}

				rhs *= radix;
				rhs += n;
			}
		}

	}

}

#endif // BASE_BITS_UINT128_PARSE vim:filetype=cpp
