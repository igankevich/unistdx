/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BITS_UINT128_HASH
#define UNISTDX_BITS_UINT128_HASH

namespace std {

	template<>
	struct hash<sys::uint128_t> {

		typedef size_t result_type;
		typedef ::sys::uint128_t argument_type;

		inline size_t
		operator()(const sys::uint128_t& rhs) const noexcept {
			using ::sys::u64;
			std::hash<u64> h;
			#if defined(UNISTDX_INTERNAL_UINT128_EMULATE)
			return h(rhs.lo) ^ h(rhs.hi);
			#else
			using namespace sys::literals;
			return h(u64(rhs & 0xffffffffffffffff_u128)) ^
			       h(u64((rhs >> 64) & 0xffffffffffffffff_u128));
			#endif
		}

	};

}

#endif // vim:filetype=cpp
