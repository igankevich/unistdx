#ifndef UNISTDX_BITS_ADDR_PARSE
#define UNISTDX_BITS_ADDR_PARSE

#include <istream>
#include <limits>
#include <ostream>

namespace sys {

	namespace bits {

		template<char C>
		struct Const_char {

			inline friend std::ostream&
			operator<<(std::ostream& out, Const_char) {
				return out << C;
			}

			inline friend std::istream&
			operator>>(std::istream& in, Const_char) {
				if (in.get() != C) in.setstate(std::ios::failbit);
				return in;
			}

		};

		template<class Base, class Rep>
		struct Num {

			inline constexpr
			Num():
			n(0) {}

			inline constexpr
			Num(Rep x):
			n(x) {}

			inline friend std::ostream&
			operator<<(std::ostream& out, Num rhs) {
				return out << rhs.n;
			}

			inline friend std::istream&
			operator>>(std::istream& in, Num& rhs) {
				in >> rhs.n;
				if (rhs.n > std::numeric_limits<Base>::max()) {
					in.setstate(std::ios::failbit);
				}
				return in;
			}

			inline constexpr
			operator Rep() const {
				return n;
			}

			inline constexpr Rep
			rep() const {
				return n;
			}

		private:
			Rep n;
		};

		typedef Const_char<':'> Colon;
		typedef Const_char<'.'> Dot;

	}

}

#endif // vim:filetype=cpp
