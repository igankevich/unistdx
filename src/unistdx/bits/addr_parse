/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BITS_ADDR_PARSE
#define UNISTDX_BITS_ADDR_PARSE

#include <istream>
#include <limits>
#include <ostream>

namespace sys {

	namespace bits {

		template<char C>
		struct Const_char {

			inline friend std::ostream&
			operator<<(std::ostream& out, Const_char) {
				return out << C;
			}

			inline friend std::istream&
			operator>>(std::istream& in, Const_char) {
				if (in.get() != C) in.setstate(std::ios::failbit);
				return in;
			}

		};

		template<class Base, class Rep>
		struct Num {

			inline constexpr
			Num():
			n(0) {}

			inline constexpr
			Num(Rep x):
			n(x) {}

			inline friend std::ostream&
			operator<<(std::ostream& out, Num rhs) {
				return out << rhs.n;
			}

			inline friend std::istream&
			operator>>(std::istream& in, Num& rhs) {
				in >> rhs.n;
				if (rhs.n > std::numeric_limits<Base>::max()) {
					in.setstate(std::ios::failbit);
				}
				return in;
			}

			inline constexpr
			operator Rep() const {
				return n;
			}

			inline constexpr Rep
			rep() const {
				return n;
			}

		private:
			Rep n;
		};

		typedef Const_char<':'> Colon;
		typedef Const_char<'.'> Dot;

	}

}

#endif // vim:filetype=cpp
