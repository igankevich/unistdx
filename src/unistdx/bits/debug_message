#ifndef UNISTDX_BITS_DEBUG_MESSAGE
#define UNISTDX_BITS_DEBUG_MESSAGE

#include <cassert>
#include <iostream>
#include <sstream>

namespace sys {

	class debug_message {

	public:

		template<class ... Args>
		explicit
		debug_message(const char* name, const char* fmt, const Args& ... tokens):
		debug_message(name, '_', fmt, tokens ...)
		{}

		template<class ... Args>
		explicit
		debug_message(
			const char* name,
			char spec,
			const char* fmt,
			const Args& ... tokens
		):
		_spec(spec) {
			assert(name);
			assert(fmt);
			this->write_name(name);
			this->format_msg(fmt, tokens ...);
		}

		~debug_message() {
			this->_str << '\n';
			std::clog << this->_str.str();
		}

		template<class T>
		std::ostream&
		operator<<(const T& rhs) {
			return this->_str << rhs;
		}

		inline std::ostream&
		operator<<(std::ostream& (*rhs)(std::ostream&)) {
			return this->_str << rhs;
		}

		inline std::ostream&
		out() noexcept {
			return this->_str;
		}

	private:

		inline void
		format_msg(const char* s) {
			this->_str << s;
		}

		template<class T, class ... Args>
		void
		format_msg(const char* s, const T& value, const Args& ... args) {
			const char* olds = s;
			while (*s && *s != this->_spec) {
				++s;
			}
			this->_str.rdbuf()->sputn(olds, s - olds);
			this->_str << value;
			if (*s) {
				this->format_msg(++s, args ...);
			}
		}

		inline void
		write_name(const char* name) {
			this->_str.width(10);
			this->_str.setf(std::ios::right, std::ios::adjustfield);
			this->_str << name << ": ";
		}

		std::stringstream _str;
		char _spec = '_';

	};

}

#endif // vim:filetype=cpp
