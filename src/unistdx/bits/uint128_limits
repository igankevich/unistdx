/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BITS_UINT128_LIMITS
#define UNISTDX_BITS_UINT128_LIMITS

#include <limits>

namespace std {

	template <>
	class numeric_limits<sys::uint128_t> {
	public:
		static constexpr bool is_specialized = true;

		static constexpr sys::uint128_t
		min() noexcept {
			using namespace sys::literals;
			return 0_u128;
		}

		static constexpr sys::uint128_t
		max() noexcept {
			using namespace sys::literals;
			return 0xffffffffffffffffffffffffffffffff_u128;
		}

		static constexpr sys::uint128_t
		lowest() noexcept {
			return min();
		}

		static constexpr int digits = 128;
		static constexpr int digits10 = 38;
		static constexpr bool is_signed = false;
		static constexpr bool is_integer = true;
		static constexpr bool is_exact = true;
		static constexpr int radix = 2;

		static constexpr sys::uint128_t
		epsilon() noexcept {
			using namespace sys::literals;
			return 0_u128;
		}

		static constexpr sys::uint128_t
		round_error() noexcept {
			using namespace sys::literals;
			return 0_u128;
		}

		static constexpr int min_exponent = 0;
		static constexpr int min_exponent10 = 0;
		static constexpr int max_exponent = 0;
		static constexpr int max_exponent10 = 0;

		static constexpr bool has_infinity = false;
		static constexpr bool has_quiet_NaN = false;
		static constexpr bool has_signaling_NaN = false;
		static constexpr float_denorm_style has_denorm = denorm_absent;
		static constexpr bool has_denorm_loss = false;

		static constexpr sys::uint128_t
		infinity() noexcept {
			using namespace sys::literals;
			return 0_u128;
		}

		static constexpr sys::uint128_t
		quiet_NaN() noexcept {
			using namespace sys::literals;
			return 0_u128;
		}

		static constexpr sys::uint128_t
		signaling_NaN() noexcept {
			using namespace sys::literals;
			return 0_u128;
		}

		static constexpr sys::uint128_t
		denorm_min() noexcept {
			using namespace sys::literals;
			return 0_u128;
		}

		static constexpr bool is_iec559 = false;
		static constexpr bool is_bounded = true;
		static constexpr bool is_modulo = false;

		static constexpr bool traps = false;
		static constexpr bool tinyness_before = false;
		static constexpr float_round_style round_style = round_toward_zero;

	};

}

#endif // vim:filetype=cpp
