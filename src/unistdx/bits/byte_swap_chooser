/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_BITS_BYTE_SWAP_CHOOSER
#define UNISTDX_BITS_BYTE_SWAP_CHOOSER

#include <algorithm>

#include <unistdx/net/byte_swap>
#include <unistdx/net/byte_order>

namespace sys {

	namespace bits {

		template<class Int, bool network_order, bool integral>
		struct byte_swap_chooser {};

		template<class Int>
		struct byte_swap_chooser<Int, true, true> {

			inline void
			to_network_format() noexcept {}

			inline void
			to_host_format() noexcept {}

			inline constexpr bool
			operator==(const byte_swap_chooser& rhs) const noexcept {
				return this->_intval == rhs._intval;
			}

		private:
			Int _intval;
		};

		template<class Int>
		struct byte_swap_chooser<Int, false, true> {

			inline void
			to_network_format() noexcept {
				this->_intval = byte_swap<Int>(this->_intval);
			}

			inline void
			to_host_format() noexcept {
				this->to_network_format();
			}

			inline constexpr bool
			operator==(const byte_swap_chooser& rhs) const noexcept {
				return _intval == rhs._intval;
			}

		private:
			Int _intval;
		};

		template<class Arr>
		struct byte_swap_chooser<Arr, true, false> {

			inline void
			to_network_format() noexcept {}

			inline void
			to_host_format() noexcept {}

			inline bool
			operator==(const byte_swap_chooser& rhs) const noexcept {
				return std::equal(this->_arr, this->_arr + sizeof(Arr), rhs._arr);
			}

		private:
			Arr _arr;
		};

		template<class Arr>
		struct byte_swap_chooser<Arr, false, false> {

			inline void
			to_network_format() noexcept {
				std::reverse(this->_arr, this->_arr + sizeof(Arr));
			}

			inline void
			to_host_format() noexcept {
				this->to_network_format();
			}

			inline bool
			operator==(const byte_swap_chooser& rhs) const noexcept {
				return std::equal(this->_arr, this->_arr + sizeof(Arr), rhs._arr);
			}

		private:
			Arr _arr;
		};

		template<size_t bytes>
		struct Integral: public byte_swap_chooser<u8[bytes],is_network_byte_order(),false> {};
		template<>
		struct Integral<1>: public byte_swap_chooser<u8,is_network_byte_order(),true> {};
		template<>
		struct Integral<2>: public byte_swap_chooser<u16,is_network_byte_order(),true> {};
		template<>
		struct Integral<4>: public byte_swap_chooser<u32,is_network_byte_order(),true> {};
		template<>
		struct Integral<8>: public byte_swap_chooser<u64,is_network_byte_order(),true> {};
		template<>
		struct Integral<16>: public byte_swap_chooser<uint128_t,is_network_byte_order(),true> {};

	}

}

#endif // vim:filetype=cpp
