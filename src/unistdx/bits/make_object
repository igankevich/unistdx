/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_BITS_MAKE_OBJECT
#define UNISTDX_BITS_MAKE_OBJECT

#include <ostream>

namespace sys {

    namespace bits {

        template<class ... Args> struct Field {
            inline friend std::ostream&
            operator<<(std::ostream& out, const Field&) {
                return out;
            }
        };

        template<class Key, class Value>
        struct Field<Key, Value> {

            inline
            Field(const Key& k, const Value& v):
            _key(k), _val(v)
            {}

            inline friend std::ostream&
            operator<<(std::ostream& out, const Field& rhs) {
                return out << rhs._key << '=' << rhs._val;
            }

        private:
            const Key& _key;
            const Value& _val;
        };

        template<class Key, class Value, class ... Args>
        struct Field<Key, Value, Args...>: public Field<Args...> {

            inline
            Field(const Key& k, const Value& v, const Args& ... args):
            Field<Args...>(args...),
            _key(k), _val(v)
            {}

            inline friend std::ostream&
            operator<<(std::ostream& out, const Field& rhs) {
                return out << rhs._key << '=' << rhs._val << ','
                    << static_cast<Field<Args...>>(rhs);
            }

        private:
            const Key& _key;
            const Value& _val;
        };

        template<class ... Args>
        struct Function: public Field<Args...> {

            inline explicit
            Function(const char* name, const Args& ... args):
            Field<Args...>(args...),
            _name(name)
            {}

            inline friend std::ostream&
            operator<<(std::ostream& out, const Function& rhs) {
                return out << rhs._name << '(' << static_cast<Field<Args...>>(rhs) << ')';
            }

        private:
            const char* _name;
        };

        template<class ... Args>
        struct Object: public Field<Args...> {

            inline explicit
            Object(const Args& ... rhs):
            Field<Args...>(rhs...)
            {}

            inline friend std::ostream&
            operator<<(std::ostream& out, const Object& rhs) {
                return out << '{' << static_cast<Field<Args...>>(rhs) << '}';
            }

        };

        template<class ... Args>
        struct Sentence {
            inline friend std::ostream&
            operator<<(std::ostream& out, const Sentence&) {
                return out;
            }
        };

        template<class T>
        struct Sentence<T> {

            inline explicit
            Sentence(const T& k):
            _word(k)
            {}

            inline friend std::ostream&
            operator<<(std::ostream& out, const Sentence& rhs) {
                return out << rhs._word;
            }

        private:
            const T& _word;
        };

        template<class T, class ... Args>
        struct Sentence<T, Args...>: public Sentence<Args...> {

            inline
            Sentence(const T& k, const Args& ... args):
            Sentence<Args...>(args...),
            _word(k)
            {}

            inline friend std::ostream&
            operator<<(std::ostream& out, const Sentence& rhs) {
                return out << rhs._word << ' ' << static_cast<Sentence<Args...>>(rhs);
            }

        private:
            const T& _word;
        };

    }

}

#endif // vim:filetype=cpp
