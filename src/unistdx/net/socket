#ifndef UNISTDX_NET_SOCKET
#define UNISTDX_NET_SOCKET

#include <fcntl.h>
#include <unistd.h>

#include <chrono>

#include <unistdx/bits/socket>
#include <unistdx/config>
#include <unistdx/io/fildes>
#include <unistdx/net/endpoint>

namespace sys {

	typedef struct ::msghdr message_header;
	typedef struct ::cmsghdr cmessage_header;
	#if defined(UNISTDX_HAVE_SCM_CREDENTIALS)
	typedef struct ::ucred user_credentials;
	#endif
	typedef struct ::iovec io_vector;

	struct socket: public fildes {

		typedef int opt_type;
		typedef std::chrono::system_clock clock_type;
		typedef clock_type::duration duration;

		enum option : opt_type {
			reuse_addr = SO_REUSEADDR,
			keep_alive = SO_KEEPALIVE,
			pass_credentials = SO_PASSCRED,
		};

		enum shutdown_how {
			shut_read = SHUT_RD,
			shut_write = SHUT_WR,
			shut_read_write = SHUT_RDWR
		};

		static const flag_type default_flags
		    = SOCK_STREAM | UNISTDX_SOCK_NONBLOCK | UNISTDX_SOCK_CLOEXEC;

		socket() = default;

		socket(const socket&) = delete;

		socket&
		operator=(const socket&) = delete;

		inline explicit
		socket(socket&& rhs) noexcept:
		sys::fildes(std::move(rhs)) {}

		inline explicit
		socket(fildes&& rhs) noexcept:
		sys::fildes(std::move(rhs)) {}

		/// Bind on @bind_addr and listen.
		explicit
		socket(const endpoint& bind_addr);

		/// Bind on @bind_addr and connect to a server on @conn_addr.
		socket(const endpoint& bind_addr, const endpoint& conn_addr);

		socket(family_type family, flag_type flags=default_flags);

		inline
		~socket() {
			this->close();
		}

		inline socket&
		operator=(socket&& rhs) {
			sys::fildes::operator=(std::move(static_cast<sys::fildes&&>(rhs)));
			return *this;
		}

		void
		bind(const endpoint& e);

		void
		listen();

		void
		connect(const endpoint& e);

		void
		accept(socket& sock, endpoint& addr);

		void
		shutdown(shutdown_how how);

		void
		close();

		void
		setopt(option opt);

		#if defined(UNISTDX_HAVE_TCP_USER_TIMEOUT)
		void
		set_user_timeout(const duration& d);

		#endif

		/// @deprecated We use event-based error notifications.
		int
		error() const noexcept;

		inline endpoint
		bind_addr() const {
			endpoint addr;
			socklen_type len = sizeof(endpoint);
			::getsockname(this->_fd, addr.sockaddr(), &len);
			return addr;
		}

		inline endpoint
		name() const {
			endpoint addr;
			socklen_type len = sizeof(endpoint);
			UNISTDX_CHECK(::getsockname(this->_fd, addr.sockaddr(), &len));
			return addr;
		}

		inline endpoint
		peer_name() const {
			endpoint addr;
			socklen_type len = sizeof(endpoint);
			UNISTDX_CHECK(::getpeername(this->_fd, addr.sockaddr(), &len));
			return addr;
		}

		inline fd_type
		fd() const noexcept {
			return this->_fd;
		}

		inline ssize_t
		send(const message_header* hdr, int flags=0) const noexcept {
			return ::sendmsg(this->_fd, hdr, flags);
		}

		inline ssize_t
		receive(message_header* hdr, int flags=0) const noexcept {
			return ::recvmsg(this->_fd, hdr, flags);
		}

		#if defined(UNISTDX_HAVE_SO_PEERCRED)
		user_credentials
		credentials() const;

		#endif

		friend std::ostream&
		operator<<(std::ostream& out, const socket& rhs);

	protected:

		inline explicit
		socket(fd_type sock) noexcept:
		sys::fildes(sock) {}

	private:
		void
		create_socket_if_necessary(const endpoint& e);

	};

	std::ostream&
	operator<<(std::ostream& out, const socket& rhs);

	#if defined(UNISTDX_HAVE_SCM_CREDENTIALS)
	void
	send_credentials(socket& sock, const void* data, size_t n);

	void
	receive_credentials(socket& sock, message_header& h, void* data, size_t n);

	#endif

	template<>
	struct streambuf_traits<sys::socket>:
		public sys::fildes_streambuf_traits<sys::socket>
	{};

}

#endif // vim:filetype=cpp
