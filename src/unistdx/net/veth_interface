#ifndef UNISTDX_NET_VETH_INTERFACE
#define UNISTDX_NET_VETH_INTERFACE

#include <unistdx/net/netlink_socket>
#include <unistdx/net/network_interface>

namespace sys {

    class veth_interface: public network_interface {

    private:
        network_interface _peer;

    public:

        inline explicit
        veth_interface(const std::string& name, const std::string& peer):
        network_interface(name), _peer(peer) { this->init(); }
        inline ~veth_interface() { if (!*this) { return; } down(); destroy(); }

        veth_interface() = default;
        veth_interface(veth_interface&&) = default;
        veth_interface& operator=(veth_interface&&) = default;
        veth_interface(const veth_interface&) = delete;
        veth_interface& operator=(const veth_interface&) = delete;

        void init();
        void destroy();

        inline const network_interface& peer() const { return this->_peer; }
        inline network_interface& peer() { return this->_peer; }

    };

}

#endif // vim:filetype=cpp
