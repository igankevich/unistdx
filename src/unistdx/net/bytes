#ifndef UNISTDX_NET_BYTES
#define UNISTDX_NET_BYTES

#include <algorithm>
#include <ostream>

#include <unistdx/base/ios_guard>
#include <unistdx/bits/byte_swap_chooser>
#include <unistdx/bits/octet>
#include <unistdx/it/intersperse_iterator>
#include <unistdx/net/byte_order>
#include <unistdx/net/byte_swap>

namespace sys {

	/**
	\brief Container, that uses object binary representation as its contents.
	\date 2018-05-23
	\author Ivan Gankevich
	\ingroup container net
	\tparam T object type
	\tparam Ch character (byte) type
	*/
	template<class T, class Ch=char>
	union bytes {

	public:
		/// Object type.
		typedef T object_type;
		/// Character (byte) type.
		typedef Ch value_type;
		/// Iterator type.
		typedef value_type* iterator;
		/// Constant iterator.
		typedef const value_type* const_iterator;
		/// Size type.
		typedef std::size_t size_type;

	private:
		typedef bits::Integral<sizeof(object_type)> integral_type;

	private:
		object_type _val;
		integral_type _intval;
		value_type _bytes[sizeof(object_type)];

	public:

		inline constexpr
		bytes() noexcept:
		_val {} {}

		/// Copy-constructor.
		inline constexpr
		bytes(const bytes &rhs) noexcept:
		_val(rhs._val) {}

		/**
		Construct bytes container using \p rhs binary representaton as its contents.
		*/
		inline constexpr
		bytes(object_type rhs) noexcept:
		_val(rhs) {}

		/**
		Construct bytes container from byte sequence described by two iterators.
		*/
		template<class It>
		inline
		bytes(It first, It last) noexcept {
			std::copy(first, last, this->_bytes);
		}

		/**
		Construct bytes container from byte sequence described
		by iterator \p first and sequence size \p n.
		*/
		template<class It>
		inline
		bytes(It first, size_type n) noexcept {
			std::copy_n(first, n, this->_bytes);
		}

		/// Convert binary representation to network byte order in-place.
		inline void
		to_network_format() noexcept {
			this->_intval.to_network_format();
		}

		/// Convert binary representation to native byte order in-place.
		inline void
		to_host_format() noexcept {
			this->_intval.to_host_format();
		}

		/// Automatically cast to value type.
		inline
		operator object_type&() noexcept {
			return this->_val;
		}

		/// Automatically cast to value type.
		inline constexpr
		operator const object_type&() const noexcept {
			return this->_val;
		}

		/// Access a byte by index.
		inline constexpr value_type
		operator[](size_type idx) const noexcept {
			return this->_bytes[idx];
		}

		/// Access a byte by index.
		inline value_type&
		operator[](size_type idx) noexcept {
			return this->_bytes[idx];
		}

		/// Byte-wise compare.
		inline constexpr bool
		operator==(const bytes& rhs) const noexcept {
			return this->_intval == rhs._intval;
		}

		/// Byte-wise compare.
		inline constexpr bool
		operator!=(const bytes& rhs) const noexcept {
			return !this->operator==(rhs);
		}

		/// Get pointer to the first byte.
		inline iterator
		data() noexcept {
			return this->_bytes;
		}

		/// Get pointer to the first byte.
		inline const_iterator
		data() const noexcept {
			return this->_bytes;
		}

		/// Get iterator to the beginning of the byte sequence.
		inline iterator
		begin() noexcept {
			return this->_bytes;
		}

		/// Get iterator to the beginning of the byte sequence.
		inline constexpr const_iterator
		begin() const noexcept {
			return this->_bytes;
		}

		/// Get iterator to the end of the byte sequence.
		inline iterator
		end() noexcept {
			return this->_bytes + sizeof(object_type);
		}

		/// Get iterator to the end of the byte sequence.
		inline constexpr const_iterator
		end() const noexcept {
			return this->_bytes + sizeof(object_type);
		}

		/// Get the first byte.
		inline value_type&
		front() noexcept {
			return *this->begin();
		}

		/// Get the last byte.
		inline value_type&
		back() noexcept {
			return *(this->end() - 1);
		}

		/// Get object.
		inline constexpr const object_type&
		value() const noexcept {
			return this->_val;
		}

		/// Get object.
		inline object_type&
		value() noexcept {
			return this->_val;
		}

		/// Get the number of bytes.
		inline static constexpr size_type
		size() noexcept {
			return sizeof(object_type);
		}

		/// Fill with noughts.
		inline void
		clear() {
			std::fill_n(this->data(), this->size(), value_type{});
		}

		static_assert(
			sizeof(decltype(_val)) == sizeof(decltype(_intval)),
			"bad integral type"
		);

	};

	/// \brief Construct byte sequence from object \p rhs.
	/// \ingroup net
	template<class T>
	inline constexpr bytes<T>
	make_bytes(T rhs) noexcept {
		return bytes<T>(rhs);
	}

	/// Print byte sequence in hexadecimal form.
	template<class T, class B>
	inline std::ostream&
	operator<<(std::ostream& out, const bytes<T,B>& rhs) {
		std::ostream::sentry s(out);
		if (s) {
			ios_guard g(out);
			out.setf(std::ios::hex, std::ios::basefield);
			out.fill('0');
			intersperse_iterator<bits::octet,char> it(out, ' ');
			std::copy(rhs.begin(), rhs.end(), it);
		}
		return out;
	}

}

#endif // vim:filetype=cpp
