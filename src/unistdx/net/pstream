#ifndef UNISTDX_NET_PSTREAM
#define UNISTDX_NET_PSTREAM

#include <cassert>
#include <stdexcept>

#include <unistdx/base/packetbuf>
#include <unistdx/base/types>
#include <unistdx/bits/no_copy_and_move>
#include <unistdx/config>
#include <unistdx/net/bstream>

namespace sys {

	template<class Ch, class Tr=std::char_traits<Ch>, class Size=u32>
	class basic_pstream: public basic_bstream<Ch,Tr,Size> {

	private:
		typedef basic_bstream<Ch,Tr,Size> base_type;

	public:
		typedef Ch char_type;
		typedef Tr traits_type;
		typedef Size size_type;
		typedef basic_packetbuf<Ch,Tr> streambuf_type;
		typedef std::basic_string<Ch,Tr> string_type;
		typedef typename streambuf_type::ipacket_guard ipacket_guard;

	private:
		streambuf_type* _buf2 = nullptr;

	public:

		basic_pstream() = default;

		basic_pstream(basic_pstream&& rhs):
		base_type(std::move(rhs)),
		_buf2(rhs._buf2)
		{ rhs._buf2 = nullptr; }

		basic_pstream(const basic_pstream&) = delete;

		basic_pstream&
		operator=(const basic_pstream&) = delete;

		basic_pstream&
		operator=(basic_pstream&&) = delete;

		~basic_pstream() = default;

		inline explicit
		basic_pstream(streambuf_type* buf):
		base_type(buf)
		{
			this->_buf2 = buf;
		}

		inline streambuf_type*
		rdbuf() noexcept {
			return this->_buf2;
		}

		inline const streambuf_type*
		rdbuf() const noexcept {
			return this->_buf2;
		}

		inline streambuf_type*
		rdbuf(streambuf_type* rhs) {
			streambuf_type* old = this->rdbuf();
			this->base_type::rdbuf(rhs);
			return old;
		}

		inline void
		begin_packet() {
			this->rdbuf()->begin_packet();
		}

		inline void
		end_packet() {
			this->rdbuf()->end_packet();
		}

		inline bool
		read_packet() {
			return this->rdbuf()->read_packet();
		}

		inline void
		skip_packet() {
			this->rdbuf()->skip_packet();
		}

		inline void
		cancel_packet() {
			this->rdbuf()->cancel_packet();
		}

		/// Append packet payload starting from the beginning.
		inline void
		append_payload(basic_pstream& rhs) {
			assert(this->rdbuf());
			assert(rhs.rdbuf());
			::sys::append_payload(*this->rdbuf(), *rhs.rdbuf());
		}

		/// Append packet payload starting from the current position.
		inline void
		append_payload_cur(basic_pstream& src) {
			assert(this->rdbuf());
			assert(src.rdbuf());
			::sys::append_payload(
				*this->rdbuf(),
				*src.rdbuf(),
				src.rdbuf()->ipayload_offset()
			);
		}

		inline explicit
		operator bool() const noexcept {
			return true;
		}

		inline bool
		operator!() const noexcept {
			return !operator bool();
		}

	};

	typedef basic_pstream<char> pstream;
	typedef pstream::ipacket_guard ipacket_guard;

	template<class Stream>
	class opacket_guard {

	private:
		Stream& _stream;

	public:
		inline explicit
		opacket_guard(Stream& m) noexcept:
		_stream(m)
		{}

		inline
		~opacket_guard() noexcept {
			this->_stream.cancel_packet();
		}

		UNISTDX_NO_COPY_AND_MOVE(opacket_guard)

	};

}

#endif // vim:filetype=cpp
