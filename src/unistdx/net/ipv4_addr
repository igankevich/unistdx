#ifndef UNISTDX_NET_IPV4_ADDR
#define UNISTDX_NET_IPV4_ADDR

#include <netinet/in.h>

#include <functional>
#include <iosfwd>

#include <unistdx/net/bit_count>
#include <unistdx/net/ipaddr_traits>
#include <unistdx/net/pstream>

namespace sys {

	typedef struct ::sockaddr sa_type;
	/// IPv4 socket address type.
	typedef struct ::sockaddr_in sockinet4_type;
	/// IPv4 Internet address type.
	typedef struct ::in_addr inet4_type;
	/// IPv4 address representation unsigned integer type.
	typedef ::in_addr_t addr4_type;
	typedef ::in_port_t port_type;
	typedef ::sa_family_t sa_family_type;
	/// Network prefix type.
	typedef unsigned int prefix_type;

	union endpoint;

	/**
	\brief IPv4 address class.
	\date 2018-05-23
	\author Ivan Gankevich
	*/
	union ipv4_addr {

		/// Octet type.
		typedef u8 oct_type;
		/// Unsigned 4-byte integer type.
		typedef addr4_type rep_type;

		inline constexpr
		ipv4_addr() noexcept:
		addr(0) {}

		/// Construct IPv4 address from integer type.
		inline constexpr explicit
		ipv4_addr(addr4_type rhs) noexcept:
		addr(rhs) {}

		/// Copy-constructor.
		inline constexpr
		ipv4_addr(const ipv4_addr& rhs) noexcept:
		addr(rhs.addr) {}

		/// Construct IPv4 address from \c in_addr system type.
		inline constexpr explicit
		ipv4_addr(const inet4_type& rhs) noexcept:
		addr(rhs.s_addr) {}

		/// Construct IPv4 address manually specifying each octet.
		inline constexpr
		ipv4_addr(oct_type o1, oct_type o2, oct_type o3, oct_type o4):
			addr(from_octets(o1, o2, o3, o4)) {}

		/// Construct IPv4 address from \c sockaddr system type.
		inline
		ipv4_addr(const sa_type &rhs) noexcept;

		friend std::ostream&
		operator<<(std::ostream& out, ipv4_addr rhs);

		friend std::istream&
		operator>>(std::istream& in, ipv4_addr& rhs);

		/// Put address in binary form.
		inline friend bstream&
		operator<<(bstream& out, const ipv4_addr& rhs) {
			return out << rhs._bytes;
		}

		/// Get address in binary form.
		inline friend bstream&
		operator>>(bstream& in, ipv4_addr& rhs) {
			return in >> rhs._bytes;
		}

		/// Get integer representation of the address.
		inline constexpr addr4_type
		rep() const {
			return this->addr;
		}

		/// Automatically cast to \c in_addr system type.
		inline constexpr
		operator const inet4_type&() const noexcept {
			return this->inaddr;
		}

		/// Compare address integer representations.
		inline constexpr bool
		operator<(const ipv4_addr& rhs) const noexcept {
			return this->addr < rhs.addr;
		}

		/// \copydoc operator<
		inline constexpr bool
		operator==(ipv4_addr rhs) const noexcept {
			return this->addr == rhs.addr;
		}

		/// \copydoc operator<
		inline constexpr bool
		operator!=(ipv4_addr rhs) const noexcept {
			return this->addr != rhs.addr;
		}

		/// Returns true if integer representations is non-nought.
		inline constexpr explicit
		operator bool() const noexcept {
			return this->addr != 0;
		}

		/// Returns true if integer representations is nought.
		inline constexpr bool
		operator!() const noexcept {
			return this->addr == 0;
		}

		/// Get address octet by index.
		inline constexpr oct_type
		operator[](size_t i) const noexcept {
			return this->_bytes[i];
		}

		/// Return network prefix assuming that this address is network mask.
		inline prefix_type
		to_prefix() const noexcept {
			return bit_count(addr);
		}

		/// Create network mask from network prefix.
		inline static ipv4_addr
	    from_prefix(prefix_type prefix) noexcept;

	private:

		template<class Q>
		inline constexpr static
		Q
		position_helper(Q a, Q netmask) noexcept {
			return a - (a & netmask);
		}

	public:

		/// Compute address position in the subnetwork specified by \p netmask.
		inline constexpr addr4_type
		position(ipv4_addr netmask) const noexcept {
			return position_helper(
				to_host_format(rep()),
				to_host_format(netmask.rep())
			);
		}

	private:

		inline constexpr static addr4_type
		from_octets(oct_type o1, oct_type o2, oct_type o3, oct_type o4) {
			return (
				((o1 << 0)  & UINT32_C(0xff)) |
				((o2 << 8)  & UINT32_C(0xff00)) |
				((o3 << 16) & UINT32_C(0xff0000)) |
				((o4 << 24) & UINT32_C(0xff000000)));
		}

		addr4_type addr;
		inet4_type inaddr;
		bytes<addr4_type> _bytes;

		static_assert(sizeof(addr) == sizeof(inaddr), "bad ipv4_addr size");
		static_assert(sizeof(addr) == sizeof(_bytes), "bad ipv4_addr size");
	};

	/// Print textual representation of the address.
	std::ostream&
	operator<<(std::ostream& out, ipv4_addr rhs);

	/// Parse textual representation of the address.
	std::istream&
	operator>>(std::istream& in, ipv4_addr& rhs);

	/// \copydoc ipaddr_traits
	template<>
	struct ipaddr_traits<ipv4_addr> {

		/// Octet type.
		typedef ipv4_addr::oct_type oct_type;

		/// First octet of loopback address.
		static constexpr const oct_type loopback_first_octet = 127;
		/// IP-address family.
		static constexpr const sa_family_type family = AF_INET;

		/// Localhost address.
		inline static constexpr ipv4_addr
		localhost() noexcept {
			return ipv4_addr {127,0,0,1};
		}

		/// Loopback network mask.
		inline static constexpr ipv4_addr
		loopback_mask() noexcept {
			return ipv4_addr {255,0,0,0};
		}

		/// Wide area network mask.
		inline static constexpr ipv4_addr
		widearea_mask() noexcept {
			return ipv4_addr {255,255,255,255};
		}

		/// Get IPv4 address from endpoint.
		inline static constexpr ipv4_addr
		address(const endpoint& rhs) noexcept;

		/// Get IPv4 port from endpoint.
		inline static constexpr port_type
		port(const endpoint& rhs) noexcept;

	};

	ipv4_addr
	ipv4_addr::from_prefix(prefix_type prefix) noexcept {
		constexpr const size_t nbits = sizeof(addr4_type) *
		                               std::numeric_limits<unsigned char>::digits;
		return nbits == prefix
		       ? ipaddr_traits<ipv4_addr>::widearea_mask()
			   : ipv4_addr((addr4_type(1) << prefix) - addr4_type(1));
	}

}

namespace std {

	/// Specialisation of \link std::hash\endlink for \link sys::ipv4_addr\endlink.
	template<>
	struct hash<sys::ipv4_addr>: public std::hash<sys::ipv4_addr::rep_type> {

	private:
		typedef std::hash<sys::ipv4_addr::rep_type> base_type;

	public:
		/// Hash function return value type.
		typedef size_t result_type;
		/// Hash function argument type.
		typedef sys::ipv4_addr argument_type;

		/// Return hash of 8-byte integer that represents the address.
		inline result_type
		operator()(const argument_type& rhs) const noexcept {
			return base_type::operator()(rhs.rep());
		}

	};

}

#endif // vim:filetype=cpp
