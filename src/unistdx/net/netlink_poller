/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_NET_NETLINK_POLLER
#define UNISTDX_NET_NETLINK_POLLER

#include <cstring>
#include <iosfwd>
#include <memory>
#include <string>

#include <unistdx/base/byte_buffer>
#include <unistdx/base/flag>
#include <unistdx/config>
#include <unistdx/io/poller>
#include <unistdx/it/iterator_pair>
#include <unistdx/net/netlink_attribute_iterator>
#include <unistdx/net/netlink_message_iterator>
#include <unistdx/net/socket>
#include <unistdx/util/system>

#if !defined(UNISTDX_HAVE_LINUX_NETLINK_H)
#error netlink.h is required to use netlink
#endif

#include <asm/types.h>
#include <linux/netlink.h>
#include <linux/rtnetlink.h>
#include <linux/veth.h>

namespace sys {

    namespace bits {

        template <class T, class Message>
        inline T*
        routing_attributes_ptr(Message* m) noexcept {
            return reinterpret_cast<T*>(
                reinterpret_cast<char*>(m) + NLMSG_ALIGN(sizeof(Message))
            );
        }

        template <class T, class Message>
        inline const T*
        routing_attributes_ptr(const Message* m) noexcept {
            return reinterpret_cast<const T*>(
                reinterpret_cast<const char*>(m) + NLMSG_ALIGN(sizeof(Message))
            );
        }

    }

    /// \brief Netlink message flags.
    /// \ingroup net
    enum class netlink_message_flags: u16 {
        request = NLM_F_REQUEST,
        multipart = NLM_F_MULTI,
        acknowledge = NLM_F_ACK,
        echo = NLM_F_ECHO,
        dump_inconsistent = NLM_F_DUMP_INTR,
        dump_filtered = NLM_F_DUMP_FILTERED,
        root = NLM_F_ROOT,
        all_matching = NLM_F_MATCH,
        atomic = NLM_F_ATOMIC,
        dump = NLM_F_DUMP,
        replace = NLM_F_REPLACE,
        exclude = NLM_F_EXCL,
        create = NLM_F_CREATE,
        append = NLM_F_APPEND,
    };

    template <>
    struct is_flag<netlink_message_flags>: public std::true_type {};

    /// \brief Netlink message types.
    /// \ingroup net
    enum class netlink_message_type: u16 {
        /// Message is to be ignored.
        noop = NLMSG_NOOP,
        /// Message is an error and its payload is \c nlmsgerr system structure.
        error = NLMSG_ERROR,
        /// Message is the last part of multipart message.
        done = NLMSG_DONE,
        /// Message data was lost due to buffer overrun.
        overrun = NLMSG_OVERRUN
    };

    /**
    \brief Netlink message header.
    \date 2018-05-24
    \ingroup wrapper net
    \details
    A wrapper around \c nlmsghdr system type
    (see \man{netlink,7}).
    */
    class netlink_header: public ::nlmsghdr {

    public:

        /// Length of message with header.
        inline u32
        length() const noexcept {
            return this->nlmsg_len;
        }

        /// Set the length of the message with header.
        inline void
        length(u32 rhs) noexcept {
            this->nlmsg_len = rhs;
        }

        /// Payload type
        inline netlink_message_type
        type() const noexcept {
            return netlink_message_type(this->nlmsg_type);
        }

        /// Additional flags.
        inline u16
        flags() const noexcept {
            return this->nlmsg_flags;
        }

        /// Set additional flags.
        inline void
        flags(u16 rhs) noexcept {
            this->nlmsg_flags = rhs;
        }

        /// Set additional flags.
        inline void
        flags(netlink_message_flags rhs) noexcept {
            this->nlmsg_flags = static_cast<u16>(rhs);
        }

        /// Message sequence number.
        inline u32
        sequence() const noexcept {
            return this->nlmsg_seq;
        }

        /// Message sequence number.
        inline u32 increment_sequence() { return ++this->nlmsg_seq; }

        /// Sender port identifier.
        inline u32
        port() const noexcept {
            return this->nlmsg_pid;
        }

        /// Returns true, if message type is to be ignored.
        inline bool
        noop() const noexcept {
            return this->type() == netlink_message_type::noop;
        }

        /// Returns true, if message is the last part of multipart message.
        inline bool
        done() const noexcept {
            return this->type() == netlink_message_type::done;
        }

        /// Returns true, if message is an error.
        inline bool
        error() const noexcept {
            return this->type() == netlink_message_type::error;
        }

        /// Returns true, if message data was lost due to buffer overrun.
        inline bool
        overrun() const noexcept {
            return this->type() == netlink_message_type::overrun;
        }

        /// Returns true, if the message is valid (see \man{netlink,3}).
        inline bool
        ok(u32 len) const noexcept {
            return NLMSG_OK(this, len);
        }

        /// Returns the next header in multipart message.
        inline netlink_header*
        next(int len) noexcept {
            return static_cast<netlink_header*>(NLMSG_NEXT(this, len));
        }

        /// Returns message payload length.
        inline int
        payload_length(int len) const noexcept {
            return NLMSG_PAYLOAD(this, len);
        }

        /// Returns iterator to the first message.
        template <class T>
        inline netlink_message_iterator<T>
        begin(int len) noexcept {
            return netlink_message_iterator<T>(
                static_cast<T*>(this),
                len
            );
        }

        /// Returns iterator to the end of messages.
        template <class T>
        inline netlink_message_iterator<T>
        end() noexcept {
            return netlink_message_iterator<T>();
        }

        /// Returns all messages as traversable container.
        template <class T>
        inline iterator_pair<netlink_message_iterator<T>>
        messages(int len) noexcept {
            return make_view(this->begin<T>(len), this->end<T>());
        }

        template <class T>
        inline T* message() { return static_cast<T*>(NLMSG_DATA(this)); }

        template <class T>
        inline const T* message() const { return static_cast<T*>(NLMSG_DATA(this)); }

        template <class T>
        inline T* tail() {
            return reinterpret_cast<T*>(
                reinterpret_cast<u8*>(this) + NLMSG_ALIGN(this->length())
            );
        }

    };

    /**
    \brief Netlink route attributes.
    \date 2018-05-24
    \ingroup wrapper net
    \tparam A attribute enumeration
    \details
    A wrapper around \c rtattr system type (see \man{rtnetlink,7}).
    */
    template <class A>
    class rtattributes: public ::rtattr {

    public:

        /// Attributes enumeration type.
        typedef A attributes_type;

        /// Returns true, if the attrubute is valid (see \man{rtnetlink,3}.
        inline bool
        ok(int len) const noexcept {
            return RTA_OK(this, len);
        }

        /// Returns the next attrubute.
        inline rtattributes*
        next(int len) noexcept {
            return static_cast<rtattributes*>(RTA_NEXT(this, len));
        }

        /// Returns the pointer to the beginning of attribute data.
        template <class T>
        inline T* data() { return static_cast<T*>(RTA_DATA(this)); }
        inline void data(const void* ptr, u16 n) { std::memcpy(RTA_DATA(this), ptr, n); }

        /// Attribute length.
        inline u16 length() const { return this->rta_len; }
        inline void length(u16 rhs) { this->rta_len = rhs; }

        /// Attribute type (see \man{rtnetlink,3}).
        inline attributes_type type() const { return attributes_type(this->rta_type); }
        inline void type(attributes_type rhs) { this->rta_type = u16(rhs); }

    };

    /// \brief Interface address attributes.
    /// \ingroup net
    enum class ifaddr_attribute: u32 {
        unspecified = IFA_UNSPEC,
        address = IFA_ADDRESS,
        local_address = IFA_LOCAL,
        interface_name = IFA_LABEL,
        broadcast_address = IFA_BROADCAST,
        anycast_address = IFA_ANYCAST,
        address_info = IFA_CACHEINFO,
        multicast_address = IFA_MULTICAST,
        flags = IFA_FLAGS,
    };

    /// Returns attribute name.
    const char*
    to_string(ifaddr_attribute rhs);

    /// Print attribute name for debugging.
    std::ostream&
    operator<<(std::ostream& out, const ifaddr_attribute& rhs);

    /// \brief Interface address message types.
    /// \ingroup net
    enum class ifaddr_message_type: u16 {
        get_address = RTM_GETADDR,
        new_address = RTM_NEWADDR,
        delete_address = RTM_DELADDR,
    };

    /**
    \brief Netlink interaface address message.
    \date 2018-05-24
    \ingroup wrapper net
    \details
    A wrapper around \c ifaddrmsg system type (see \man{rtnetlink,7}).
    */
    class ifaddr_message: public ::ifaddrmsg {

    public:

        /// Route attribute type.
        typedef rtattributes<ifaddr_attribute> attr_type;

        /// Get address family.
        inline family_type
        family() const noexcept {
            return static_cast<family_type>(this->ifa_family);
        }

        /// Set address family.
        inline void
        family(family_type rhs) noexcept {
            this->ifa_family = static_cast<u8>(rhs);
        }

        /// Get address prefix.
        inline int
        prefix() const noexcept {
            return static_cast<int>(this->ifa_prefixlen);
        }

        /// Get address flags.
        inline unsigned char
        flags() const noexcept {
            return this->ifa_flags;
        }

        /// Get address scope.
        inline unsigned char
        scope() const noexcept {
            return this->ifa_scope;
        }

        /// Get address index.
        inline int
        index() const noexcept {
            return this->ifa_index;
        }

        /// Set address index.
        inline void
        index(int rhs) noexcept {
            this->ifa_index = rhs;
        }

        /// Get route attributes.
        inline attr_type*
        routing_attributes() noexcept {
            return bits::routing_attributes_ptr<attr_type,::ifaddrmsg>(this);
        }

        /// Get route attributes.
        inline const attr_type*
        routing_attributes() const noexcept {
            return bits::routing_attributes_ptr<attr_type,::ifaddrmsg>(this);
        }

        /// Returns iterator to the first attribute.
        inline netlink_attribute_iterator<attr_type>
        begin(int len) noexcept {
            return netlink_attribute_iterator<attr_type>(
                this->routing_attributes(),
                len
            );
        }

        /// Returns iterator to the end of attributes.
        inline netlink_attribute_iterator<attr_type>
        end() noexcept {
            return netlink_attribute_iterator<attr_type>();
        }

        /// Returns all attributes as traversable container.
        inline iterator_pair<netlink_attribute_iterator<attr_type>>
        attributes(int len) {
            return make_view(this->begin(len), this->end());
        }

    };

    /**
    \brief Netlink interface address message header.
    \date 2018-05-24
    \ingroup wrapper net
    \details
    A wrapper around \c nlmsghdr for \c ifaddrmsg netlink messages
    (see \man{rtnetlink,7}).
    */
    class ifaddr_message_header: public netlink_header {

    public:

        /// Returns true, if the message contains address that was added.
        inline bool
        new_address() const noexcept {
            return this->netlink_header::type() == netlink_message_type(RTM_NEWADDR);
        }

        /// Returns true, if the message contains address that was deleted.
        inline bool
        delete_address() const noexcept {
            return this->netlink_header::type() == netlink_message_type(RTM_DELADDR);
        }

        /// Returns true, if the message contains address.
        inline bool
        get_address() const noexcept {
            return this->netlink_header::type() == netlink_message_type(RTM_GETADDR);
        }

        /// Returns pointer to message payload.
        inline ifaddr_message*
        message() noexcept {
            return static_cast<ifaddr_message*>(NLMSG_DATA(this));
        }

        /// Returns pointer to message payload.
        inline const ifaddr_message*
        message() const noexcept {
            return static_cast<const ifaddr_message*>(NLMSG_DATA(this));
        }

        /// \copydoc netlink_header::payload_length
        inline int
        payload_length() const noexcept {
            return NLMSG_PAYLOAD(this, sizeof(::ifaddrmsg));
        }

        /// Set message type.
        inline void
        type(ifaddr_message_type rhs) noexcept {
            this->nlmsg_type = static_cast<u16>(rhs);
        }

        using netlink_header::type;

    };

    enum class ifinfo_message_type: u16 {
        new_link = RTM_NEWLINK,
        delete_link = RTM_DELLINK,
        get_link = RTM_GETLINK,
        set_link = RTM_SETLINK,
    };

    enum class ifinfo_attribute: u32 {
        unspecified = IFLA_UNSPEC,
        interface_name = IFLA_IFNAME,
        link_info = IFLA_LINKINFO,
        link_info_kind = IFLA_INFO_KIND,
        link_info_data = IFLA_INFO_DATA,
        veth_peer_info = VETH_INFO_PEER,
        network_namespace_fd = IFLA_NET_NS_FD,
    };

    class ifinfo_message: public ::ifinfomsg {

    private:
        using base_type = ::ifinfomsg;

    public:

        using attr_type = rtattributes<ifinfo_attribute>;
        using message_type = ifinfo_message_type;

        inline family_type family() const { return family_type(this->ifi_family); }
        inline message_type type() const { return message_type(this->ifi_type); }
        inline int index() const { return this->ifi_index; }
        inline u8 flags() const { return this->ifi_flags; }
        inline u32 change_mask() const { return this->ifi_change; }
        inline void family(family_type rhs) { this->ifi_family = static_cast<u8>(rhs); }
        inline void type(message_type rhs) { this->ifi_type = u16(rhs); }
        inline void index(int rhs) noexcept { this->ifi_index = rhs; }
        inline void flags(u8 rhs) { this->ifi_flags = rhs; }
        inline void change_mask(u32 rhs) { this->ifi_change = rhs; }

        /// Get route attributes.
        inline attr_type*
        routing_attributes() noexcept {
            return bits::routing_attributes_ptr<attr_type,base_type>(this);
        }

        /// Get route attributes.
        inline const attr_type*
        routing_attributes() const noexcept {
            return bits::routing_attributes_ptr<attr_type,base_type>(this);
        }

        /// Returns iterator to the first attribute.
        inline netlink_attribute_iterator<attr_type>
        begin(int len) noexcept {
            return netlink_attribute_iterator<attr_type>(
                this->routing_attributes(),
                len
            );
        }

        /// Returns iterator to the end of attributes.
        inline netlink_attribute_iterator<attr_type>
        end() noexcept {
            return netlink_attribute_iterator<attr_type>();
        }

        /// Returns all attributes as traversable container.
        inline iterator_pair<netlink_attribute_iterator<attr_type>>
        attributes(int len) {
            return make_view(this->begin(len), this->end());
        }

    };

    class ifinfo_message_header: public netlink_header {

    public:

        using message_type = ifinfo_message_type;

        /// Returns pointer to message payload.
        inline ifinfo_message*
        message() { return netlink_header::message<ifinfo_message>(); }

        /// Returns pointer to message payload.
        inline const ifinfo_message*
        message() const { return netlink_header::message<const ifinfo_message>(); }

        inline int payload_length() const { return NLMSG_PAYLOAD(this, sizeof(message_type)); }
        inline message_type type() const { return message_type(this->nlmsg_type); }
        inline void type(message_type rhs) { this->nlmsg_type = u16(rhs); }

    };

    class ifinfo_request {

    public:
        using attr_type = ifinfo_message::attr_type;
        using message_type = ifinfo_message;

    private:
        struct data_type {
            ifinfo_message_header _header;
            message_type _message;
        };
        data_type* _data{};
        byte_buffer _buffer;

    public:
        inline ifinfo_request():
        _buffer(page_size()) {
            this->_data = new (this->_buffer.data()) data_type;
            header().length(NLMSG_LENGTH(sizeof(ifinfo_message)));
        }
        inline ~ifinfo_request() { this->_data->~data_type(); }
        inline ifinfo_message_header& header() { return this->_data->_header; }
        inline ifinfo_message& message() { return this->_data->_message; }

        inline void
        write(socket& sock) {
            header().increment_sequence();
            auto nbytes = sock.write(this->_buffer.data(), header().length());
            if (nbytes != header().length()) { throw bad_call(); }
        }

        inline void
        add(ifinfo_attribute type, const void* data, u16 size) {
            u16 nbytes = RTA_LENGTH(size);
            u32 new_length = NLMSG_ALIGN(header().length()) + RTA_ALIGN(nbytes);
            if (new_length > this->_buffer.size()) {
                throw std::length_error("attribute size exceeds message size");
            }
            attr_type* attr = header().tail<attr_type>();
            attr->type(type);
            attr->length(nbytes);
            if (data) { attr->data(data, size); }
            header().length(new_length);
        }

        inline void
        add(ifinfo_attribute type, const std::string& value) {
            this->add(type, value.data(), value.size()+1); // TODO +1?
        }

        inline attr_type*
        begin(ifinfo_attribute type) {
            attr_type* attr = header().tail<attr_type>();
            this->add(type, nullptr, 0);
            return attr;
        }

        inline void
        end(attr_type* attr) {
            attr->length(header().tail<u8>() - reinterpret_cast<u8*>(attr));
        }

        inline void skip(u16 n) { header().length(header().length()+n); }

    };


    /**
    \brief Container for netlink messages.
    \date 2018-05-25
    \ingroup container net
    */
    template <class T>
    class netlink_container {

    public:
        /// Message header type.
        typedef T value_type;
        /// Message length type.
        typedef int size_type;
        /// Message iterator type.
        typedef netlink_message_iterator<T> iterator;

    private:
        int _len = 0;
        netlink_header* _header{};
        byte_buffer _buffer;

    public:

        inline netlink_container():
        _buffer(page_size()) {
            _header = new (this->_buffer.data()) netlink_header;
        }

        inline ~netlink_container() { this->_header->~netlink_header(); }
        inline const netlink_header& header() const noexcept { return *this->_header; }
        inline netlink_header& header() noexcept { return *this->_header; }

        /// Read netlink message sequence from socket \p sock.
        inline void
        read(socket& sock) {
            this->_len = sock.read(this->_buffer.data(), this->_buffer.size());
        }

        /// Returns the pointer to the beginning of message sequence.
        inline iterator begin() noexcept {
            return header().template begin<value_type>(this->_len);
        }

        /// Returns the pointer to the end of message sequence.
        inline iterator end() noexcept {
            return header().template end<value_type>();
        }

        /// Netlink message length.
        inline int length() const noexcept { return this->_len; }

    };

    /// \brief Netlink container for interface address messages.
    /// \ingroup net
    using ifaddr_message_container = sys::netlink_container<sys::ifaddr_message_header>;
    using ifinfo_message_container = sys::netlink_container<sys::ifinfo_message_header>;

}

#endif // vim:filetype=cpp
