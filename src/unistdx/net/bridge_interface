#ifndef UNISTDX_NET_BRIDGE_INTERFACE
#define UNISTDX_NET_BRIDGE_INTERFACE

#include <unistdx/net/network_interface>

namespace sys {

    class bridge_interface: public network_interface {

    protected:
        using network_interface::traits_type;

    public:

        inline explicit bridge_interface(const std::string& name):
        network_interface(name) { init(); }
        inline ~bridge_interface() { if (!*this) { return; } down(); destroy(); }

        bridge_interface() = default;
        bridge_interface(bridge_interface&&) = default;
        bridge_interface& operator=(bridge_interface&&) = default;
        bridge_interface(const bridge_interface&) = delete;
        bridge_interface& operator=(const bridge_interface&) = delete;

        void init();
        void destroy();
        void add(const sys::network_interface& iface);
        void remove(const sys::network_interface& iface);

    };

}

#endif // vim:filetype=cpp
