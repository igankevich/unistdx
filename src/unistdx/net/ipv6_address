/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_NET_IPV6_ADDRESS
#define UNISTDX_NET_IPV6_ADDRESS

#include <netinet/in.h>

#include <functional>
#include <iosfwd>

#include <unistdx/base/types>
#include <unistdx/base/uint128>
#include <unistdx/config>
#include <unistdx/net/bit_count>
#include <unistdx/net/ipaddr_traits>
#include <unistdx/net/pstream>

namespace sys {

    typedef struct ::sockaddr sa_type;
    /// IPv6 socket address type.
    typedef struct ::sockaddr_in6 sockinet6_type;
    /// IPv6 Internet address type.
    typedef struct ::in6_addr inet6_type;
    /// IPv6 address representation unsigned integer type.
    typedef u128 addr6_type;
    typedef ::in_port_t port_type;
    typedef ::sa_family_t sa_family_type;
    typedef unsigned int prefix_type;

    class ipv6_socket_address;
    class socket_address;

    /**
    \brief IPv6 address class.
    \date 2018-05-23
    \ingroup net
    */
    class ipv6_address {

    public:
        /// Hextet type (2-byte unsigned integer).
        typedef u16 hex_type;
        /// Octet type (1-byte unsigned integer).
        typedef u8 value_type;
        /// Unsigned 16-byte integer type.
        typedef addr6_type rep_type;
        /// Pointer to octet.
        typedef value_type* pointer;
        /// Constant pointer to octet.
        typedef const value_type* const_pointer;
        /// Reference to octet.
        typedef value_type& reference;
        /// Constant reference to octet.
        typedef const value_type& const_reference;
        /// Iterator.
        typedef pointer iterator;
        /// Constant iterator.
        typedef const_pointer const_iterator;
        /// Alias to \link std::size_t \endlink.
        typedef size_t size_type;

    private:
        union {
            addr6_type _integer;
            inet6_type _address;
            u64 _integers[2];
            hex_type _hextets[8];
            value_type _octets[16];
            char _bytes[16];
        };

    public:

        inline constexpr
        ipv6_address() noexcept:
        _address {} {}

        /// Copy-constructor.
        inline constexpr
        ipv6_address(const ipv6_address &rhs) noexcept:
        _address(rhs._address) {}

        /// Construct IPv6 address from integer type.
        inline constexpr explicit
        ipv6_address(addr6_type rhs) noexcept:
        _integer{rhs} {}

        /// Construct IPv4 address from \c in6_addr system type.
        inline constexpr explicit
        ipv6_address(const inet6_type& rhs) noexcept:
        _address(rhs) {}

        /// Construct IPv4 address manually specifying each hextet.
        inline constexpr
        ipv6_address(
            hex_type h1,
            hex_type h2,
            hex_type h3,
            hex_type h4,
            hex_type h5,
            hex_type h6,
            hex_type h7,
            hex_type h8
        ): _hextets{h1, h2, h3, h4, h5, h6, h7, h8} {}

        explicit ipv6_address(const char* rhs);

        /// Automatically cast to \c in6_addr system type.
        inline constexpr
        operator const inet6_type&() const {
            return this->_address;
        }

        inline constexpr const u64* integers() const noexcept { return this->_integers; }

        /// Get integer representation of the address.
        inline constexpr const addr6_type&
        rep() const noexcept {
            return this->_integer;
        }

        /// Get address octet by index.
        inline constexpr value_type
        operator[](size_t i) const noexcept {
            return this->_bytes[i];
        }

        /// Compare address integer representations.
        inline bool
        operator<(const ipv6_address& rhs) const {
            return this->_integer < rhs._integer;
        }

        inline bool operator<=(const ipv6_address& rhs) const noexcept {
            return this->operator<(rhs) || this->operator==(rhs);
        }

        inline bool operator>(const ipv6_address& rhs) const noexcept {
            return !this->operator<(rhs) && !this->operator==(rhs);
        }

        inline bool operator>=(const ipv6_address& rhs) const noexcept {
            return !this->operator<(rhs);
        }

        /// \copydoc operator<
        inline bool
        operator==(const ipv6_address& rhs) const {
            return this->_integer == rhs._integer;
        }

        /// \copydoc operator<
        inline bool
        operator!=(ipv6_address rhs) const noexcept {
            return !this->operator==(rhs);
        }

        /// Returns true if integer representations is non-nought.
        inline constexpr explicit
        operator bool() const {
            return this->_integer != 0;
        }

        /// Returns true if integer representations is nought.
        inline constexpr bool
        operator!() const {
            return !this->operator bool();
        }

        friend std::ostream&
        operator<<(std::ostream& out, const ipv6_address& rhs);

        friend std::istream&
        operator>>(std::istream& in, ipv6_address& rhs);

        /// Put address in binary form.
        inline friend bstream&
        operator<<(bstream& out, const ipv6_address& rhs) {
            return out.write(rhs._bytes, rhs.size());
        }

        /// Get address in binary form.
        inline friend bstream&
        operator>>(bstream& in, ipv6_address& rhs) {
            return in.read(rhs._bytes, rhs.size());
        }

        /// Return network prefix assuming that this address is network mask.
        inline prefix_type
        to_prefix() const noexcept {
            return bit_count(this->_integer);
        }

        /// Create network mask from network prefix.
        inline static ipv6_address
        from_prefix(prefix_type prefix) noexcept;

        /// Get pointer to the first octet.
        inline pointer
        data() noexcept {
            return this->_octets;
        }

        /// Get pointer to the first octet.
        inline const_pointer
        data() const noexcept {
            return this->_octets;
        }

        /// Get iterator to the beginning of octet array.
        inline iterator
        begin() noexcept {
            return this->data();
        }

        /// Get iterator to the beginning of octet array.
        inline const_iterator
        begin() const noexcept {
            return this->data();
        }

        /// Get the number of octets.
        inline constexpr static size_type
        size() noexcept {
            return sizeof(_octets);
        }

        /// Get iterator to the end of octet array.
        inline iterator
        end() noexcept {
            return this->data() + this->size();
        }

        /// Get iterator to the end of octet array.
        inline const_iterator
        end() const noexcept {
            return this->data() + this->size();
        }

        /// Get first octet.
        inline reference
        front() noexcept {
            return this->_octets[0];
        }

        /// Get first octet.
        inline value_type
        front() const noexcept {
            return this->_octets[0];
        }

        /// Get last octet.
        inline reference
        back() noexcept {
            return this->_octets[3];
        }

        /// Get last octet.
        inline value_type
        back() const noexcept {
            return this->_octets[3];
        }

        /// Fill with noughts.
        void
        clear();

    private:

        template<class Q>
        inline constexpr static
        Q
        position_helper(const Q& a, const Q& netmask) noexcept {
            return a - (a & netmask);
        }

    public:

        /// Compute address position in the subnetwork specified by \p netmask.
        inline constexpr addr6_type
        position(const ipv6_address& netmask) const noexcept {
            return position_helper(
                to_host_format(rep()),
                to_host_format(netmask.rep())
            );
        }

    private:

        static constexpr int
        num_hextets() {
            return sizeof(_hextets) / sizeof(hex_type);
        }

        static_assert(sizeof(_integers) == sizeof(_address), "bad ipv6_address size");
        static_assert(sizeof(_integers) == sizeof(_hextets), "bad ipv6_address size");
        static_assert(sizeof(_integers) == sizeof(_bytes), "bad ipv6_address size");

    };

    /// Print textual representation of the address.
    std::ostream&
    operator<<(std::ostream& out, const ipv6_address& rhs);

    /// Parse textual representation of the address.
    std::istream&
    operator>>(std::istream& in, ipv6_address& rhs);

    /**
    \brief
    Specialisation of \link ipaddr_traits \endlink for \link ipv6_address \endlink.
    */
    template<>
    struct ipaddr_traits<ipv6_address> {

        /// Octet type.
        typedef ipv6_address::value_type value_type;

        /// Socket address type.
        using socket_address_type = ipv6_socket_address;

        /// First octet of loopback address.
        static constexpr const value_type loopback_first_octet = 0;
        /// IP-address family.
        static constexpr const sa_family_type family = AF_INET6;

        /// Localhost address.
        inline static constexpr ipv6_address
        localhost() noexcept {
            return ipv6_address {0,0,0,0,0,0,0,1};
        }

        /// Loopback network mask.
        inline static constexpr ipv6_address
        loopback_mask() noexcept {
            return widearea_mask();
        }

        /// Wide area network mask.
        inline static constexpr ipv6_address
        widearea_mask() noexcept {
            return ipv6_address {0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff};
        }

        /// Get IPv6 address from socket_address.
        inline static ipv6_address
        address(const socket_address& rhs) noexcept;

        /// Get IPv6 port from socket_address.
        inline static port_type
        port(const socket_address& rhs) noexcept;

    };

    ipv6_address
    ipv6_address::from_prefix(prefix_type prefix) noexcept {
        constexpr const size_t nbits = sizeof(addr6_type) *
                                       std::numeric_limits<unsigned char>::digits;
        return nbits == prefix
               ? ipaddr_traits<ipv6_address>::widearea_mask()
               : ipv6_address((addr6_type(1) << prefix) - addr6_type(1));
    }

}

namespace std {

    /// Specialisation of \link std::hash \endlink for \link sys::ipv6_address \endlink.
    template<>
    struct hash<sys::ipv6_address>: public std::hash<sys::ipv6_address::rep_type> {

    private:
        typedef std::hash<sys::ipv6_address::rep_type> base_type;

    public:
        /// Hash function return value type.
        typedef size_t result_type;
        /// Hash function argument type.
        typedef sys::ipv6_address argument_type;

        /// Return hash of 16-byte integer that represents the address.
        inline result_type
        operator()(const argument_type& rhs) const noexcept {
            return base_type::operator()(rhs.rep());
        }

    };

}

#endif // vim:filetype=cpp
