#ifndef UNISTDX_NET_BSTREAM
#define UNISTDX_NET_BSTREAM

#include <cassert>
#include <limits>
#include <stdexcept>
#include <streambuf>
#include <string>

#include <unistdx/base/types>
#include <unistdx/bits/macros>
#include <unistdx/config>
#include <unistdx/net/bytes>

#define UNISTDX_MAKE_PUT_GET_OPERATOR(tp) \
    inline basic_bstream & \
    operator<<(tp rhs) { \
        return this->write(rhs); \
    } \
    inline basic_bstream& \
    operator>>(tp& rhs) { \
        return this->read(rhs); \
    }

namespace sys {

    /**
    \brief
    Input/output stream that reads/writes everything in binary format
    with network byte order.
    \date 2018-04-20
    \author Ivan Gankevich
    \ingroup stream net
    \tparam Ch character type
    \tparam Tr character traits type
    \tparam Size size type (defaults to 4-byte integer)
    */
    template <class Ch, class Tr=std::char_traits<Ch>, class Size=u32>
    class basic_bstream {

    public:
        /// Character type.
        typedef Ch char_type;
        /// Character traits type.
        typedef Tr traits_type;
        /// Size type (defaults to 4-byte integer).
        typedef Size size_type;
        /// Stream buffer type.
        typedef std::basic_streambuf<Ch,Tr> streambuf_type;
        /// String type used for input and output.
        typedef std::basic_string<Ch,Tr> string_type;

    private:
        typedef std::numeric_limits<Size> size_type_limits;
        typedef std::numeric_limits<typename string_type::size_type>
            string_size_type_limits;

    private:
        streambuf_type* _buf = nullptr;

    public:

        basic_bstream() = default;

        /// Construct binary stream for stream buffer \p buf.
        inline explicit
        basic_bstream(streambuf_type* buf):
        _buf(buf) {}

        /// Move-constructor.
        inline
        basic_bstream(basic_bstream&& rhs):
        _buf(rhs._buf) {
            rhs._buf = nullptr;
        }

        basic_bstream(const basic_bstream&) = delete;

        basic_bstream&
        operator=(const basic_bstream&) = delete;

        basic_bstream&
        operator=(basic_bstream&&) = delete;

        ~basic_bstream() = default;

        /// Get stream buffer.
        inline streambuf_type*
        rdbuf() noexcept {
            return this->_buf;
        }

        /// Get stream buffer.
        inline const streambuf_type*
        rdbuf() const noexcept {
            return this->_buf;
        }

        /// Set stream buffer to \p rhs.
        inline streambuf_type*
        rdbuf(streambuf_type* rhs) {
            streambuf_type* old = this->_buf;
            this->_buf = rhs;
            return old;
        }

        /// Synchronise both input and output buffers.
        inline void
        sync() {
            assert(this->_buf); // LCOV_EXCL_LINE
            this->_buf->pubsync();
        }

        /// Synchronise both input and output buffers.
        inline void
        flush() {
            assert(this->_buf); // LCOV_EXCL_LINE
            this->_buf->pubsync();
        }

        /// Insert operator for standard type.
        inline basic_bstream&
        operator<<(bool rhs) {
            return this->write(rhs ? char(1) : char(0));
        }

        /// Get operator for standard type.
        inline basic_bstream&
        operator>>(bool& rhs) {
            char c = 0;
            this->read(c);
            rhs = c == 1;
            return *this;
        }

        /// \{
        UNISTDX_MAKE_PUT_GET_OPERATOR(char)
        UNISTDX_MAKE_PUT_GET_OPERATOR(i8)
        UNISTDX_MAKE_PUT_GET_OPERATOR(i16)
        UNISTDX_MAKE_PUT_GET_OPERATOR(i32)
        UNISTDX_MAKE_PUT_GET_OPERATOR(i64)
        UNISTDX_MAKE_PUT_GET_OPERATOR(u8)
        UNISTDX_MAKE_PUT_GET_OPERATOR(u16)
        UNISTDX_MAKE_PUT_GET_OPERATOR(u32)
        UNISTDX_MAKE_PUT_GET_OPERATOR(u64)
        UNISTDX_MAKE_PUT_GET_OPERATOR(f32)
        UNISTDX_MAKE_PUT_GET_OPERATOR(f64)
        #if defined(UNISTDX_HAVE_FLOAT_128)
        UNISTDX_MAKE_PUT_GET_OPERATOR(f128)
        #endif
        UNISTDX_MAKE_PUT_GET_OPERATOR(string_type)
        /// \}

        /// Insert operator for \link bytes\endlink.
        template<class T>
        inline basic_bstream&
        operator<<(const sys::bytes<T,Ch>& rhs) {
            return this->write(rhs.begin(), rhs.size());
        }

        /// Get operator for \link bytes\endlink.
        template<class T>
        inline basic_bstream&
        operator>>(sys::bytes<T,Ch>& rhs) {
            return this->read(rhs.begin(), rhs.size());
        }

        /**
        Put \p n bytes from byte buffer pointed by \p buf
        to binary stream.
        */
        inline basic_bstream&
        write(const char_type* buf, std::streamsize n) {
            assert(this->_buf); // LCOV_EXCL_LINE
            assert(n == 0 || (buf && n > 0)); // LCOV_EXCL_LINE
            this->_buf->sputn(buf, n);
            return *this;
        }

        /**
        Get \p n bytes from binary stream and store them
        in byte buffer pointed by \p buf.
        */
        inline basic_bstream&
        read(char_type* buf, std::streamsize n) {
            assert(this->_buf); // LCOV_EXCL_LINE
            assert(n == 0 || (buf && n > 0)); // LCOV_EXCL_LINE
            this->_buf->sgetn(buf, n);
            return *this;
        }

    private:

        template<class T>
        inline basic_bstream&
        write(T rhs) {
            #ifndef IGNORE_ISO_IEC559
            static_assert(
                std::is_integral<T>::value or (
                    std::is_floating_point<T>::value and
                    std::numeric_limits<T>::is_iec559
                ),
                "This system does not support ISO IEC 559"
                " floating point representation for either float, double or long double"
                " types, i.e. there is no portable way of"
                " transmitting floating point numbers over the network"
                " without precision loss. If all computers in the network do not"
                " conform to this standard but represent floating point"
                " numbers exactly in the same way, you can ignore this assertion"
                " by defining IGNORE_ISO_IEC559."
            );
            #endif
            bytes<T,Ch> val = rhs;
            val.to_network_format();
            return this->write(val.begin(), val.size());
        }

        inline basic_bstream&
        write(const string_type& rhs) {
            if (rhs.size() > size_type_limits::max()) {
                throw std::invalid_argument("string is too long");
            }
            const size_type length = static_cast<size_type>(rhs.size());
            this->write(length);
            this->_buf->sputn(rhs.c_str(), length);
            return *this;
        }

        template<class T>
        inline basic_bstream&
        read(T& rhs) {
            sys::bytes<T,Ch> val;
            this->read(val.begin(), val.size());
            val.to_host_format();
            rhs = val;
            return *this;
        }

        inline basic_bstream&
        read(string_type& rhs) {
            size_type length = 0;
            this->read(length);
            if (length > string_size_type_limits::max()) {
                throw std::invalid_argument("string is too long");
            }
            rhs.resize(length);
            this->read(&rhs[0], length);
            return *this;
        }

    };

    /// Alias to basic_bstream<char>.
    typedef basic_bstream<char> bstream;

}

#undef UNISTDX_MAKE_PUT_GET_OPERATOR

#endif // vim:filetype=cpp
