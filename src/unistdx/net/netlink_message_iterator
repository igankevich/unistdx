#ifndef UNISTDX_NET_NETLINK_MESSAGE_ITERATOR
#define UNISTDX_NET_NETLINK_MESSAGE_ITERATOR

#include <cassert>
#include <iterator>

namespace sys {

	/**
	\brief Iterator for netlink multipart messages.
	\date 2018-05-25
	\author Ivan Gankevich
	\ingroup iter
	*/
	template <class T>
	class netlink_message_iterator: public std::iterator<std::input_iterator_tag, T> {

	private:
		typedef T message_type;
		typedef typename std::iterator<std::input_iterator_tag, T> base_type;

	public:
		using typename base_type::iterator_category;
		using typename base_type::value_type;
		using typename base_type::pointer;
		using typename base_type::reference;
		using typename base_type::difference_type;

	private:
		typedef const value_type* const_pointer;
		typedef const value_type& const_reference;

	private:
		message_type* _message = nullptr;
		int _len = 0;

	public:

		/// Construct netlink iterator from message pointer \p rhs.
		inline explicit
		netlink_message_iterator(message_type* rhs, int len):
		_message(rhs),
		_len(len) {
			assert(this->_message);
			assert(this->_len >= 0);
		}

		netlink_message_iterator() = default;

		inline
		~netlink_message_iterator() = default;

		/// Copy-constructor.
		netlink_message_iterator(const netlink_message_iterator&) = default;

		/// Assignment.
		inline netlink_message_iterator&
		operator=(const netlink_message_iterator&) noexcept = default;

		/// Compare pointers.
		inline constexpr bool
		operator==(const netlink_message_iterator& rhs) const noexcept {
			return this->_message == rhs._message;
		}

		/// Compare pointers.
		inline constexpr bool
		operator!=(const netlink_message_iterator& rhs) const noexcept {
			return !this->operator==(rhs);
		}

		/// Dereference.
		inline reference
		operator*() noexcept {
			return *this->_message;
		}

		/// Dereference.
		inline constexpr const_reference
		operator*() const noexcept {
			return *this->_message;
		}

		/// Access object by pointer.
		inline pointer
		operator->() noexcept {
			return this->_message;
		}

		/// Access object by pointer.
		inline constexpr const_pointer
		operator->() const noexcept {
			return this->_message;
		}

		/// Increment.
		inline netlink_message_iterator&
		operator++() noexcept {
			this->do_next();
			return *this;
		}

		/// Post-increment.
		inline netlink_message_iterator
		operator++(int) noexcept {
			netlink_message_iterator tmp(*this);
			this->do_next();
			return tmp;
		}

	private:

		inline bool
		ok() const noexcept {
			return this->_message->ok(this->_len);
		}

		inline bool
		done() const noexcept {
			return this->_message->done();
		}

		inline value_type*
		next() noexcept {
			return static_cast<value_type*>(this->_message->next(this->_len));
		}

		inline void
		do_next() noexcept {
			assert(this->_message);
			if (this->ok() && !this->done()) {
				this->_message = this->next();
			} else {
				this->_message = nullptr;
			}
		}

	};

}

#endif // vim:filetype=cpp
