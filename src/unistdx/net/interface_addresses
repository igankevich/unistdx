/*
UNISTDX — C++ library for Linux system calls.
© 2016, 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_NET_INTERFACE_ADDRESSES
#define UNISTDX_NET_INTERFACE_ADDRESSES

#include <unistdx/bits/interface_addresses>
#include <unistdx/net/interface_address>
#include <unistdx/net/interface_address_iterator>

namespace sys {

    /**
    \brief Interface addresses container.
    \date 2018-05-23
    \ingroup wrapper container
    \see \man{getifaddrs,3}
    \deprecated Use netlink wrappers instead
    \details
    Wraps \c ifaddrs system type.
    */
    class interface_addresses {

    public:
        /// Alias to \c ifaddrs system type.
        typedef ifaddrs_type value_type;
        /// Iterator type.
        typedef interface_address_iterator iterator;
        /// Size type.
        typedef std::size_t size_type;

    private:
        ifaddrs_type* _addrs = nullptr;

    public:

        /**
        \brief Calls \man{getifaddrs,3}.
        \throws bad_call
        \see \man{getifaddrs,3}
        */
        inline
        interface_addresses() {
            UNISTDX_CHECK(::getifaddrs(&this->_addrs));
        }

        /**
        \brief Calls \man{freeifaddrs,3}.
        \see \man{freeifaddrs,3}
        */
        inline
        ~interface_addresses() noexcept {
            if (this->_addrs) {
                ::freeifaddrs(this->_addrs);
            }
        }

        /// Get iterator to the first address.
        inline iterator
        begin() noexcept {
            return iterator(this->_addrs);
        }

        /// Get iterator to the first address.
        inline iterator
        begin() const noexcept {
            return iterator(this->_addrs);
        }

        /// Get iterator to the end of the address sequence.
        inline static constexpr iterator
        end() noexcept {
            return iterator();
        }

        /// Returns true, if there are no addresses in the list.
        inline bool
        empty() const noexcept {
            return this->begin() == this->end();
        }

        /// Compute the number of addresses in the list.
        inline size_type
        size() const noexcept {
            return std::distance(this->begin(), this->end());
        }

    };

    /**
    \brief Copy all addresses of the specified type to \p result.
    \date 2018-05-23
    \deprecated Use netlink wrappers instead
    */
    template<class Addr, class Result>
    inline void
    enumerate_ifaddrs(Result result) {
        typedef typename sys::ipaddr_traits<Addr> traits_type;
        sys::interface_addresses addrs;
        std::for_each(
            addrs.begin(), addrs.end(),
            [&result] (const sys::ifaddrs_type& rhs) {
                if (rhs.ifa_addr && rhs.ifa_addr->sa_family == traits_type::family) {
                    const Addr addr(*rhs.ifa_addr);
                    const Addr netmask(*rhs.ifa_netmask);
                    *result = interface_address<Addr>(addr, netmask);
                    ++result;
                }
            }
        );
    }

}

#endif // vim:filetype=cpp
