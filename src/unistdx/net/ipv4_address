/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_NET_IPV4_ADDRESS
#define UNISTDX_NET_IPV4_ADDRESS

#include <netinet/in.h>

#include <functional>
#include <iosfwd>

#include <unistdx/net/bit_count>
#include <unistdx/net/ipaddr_traits>
#include <unistdx/net/pstream>

namespace sys {

    typedef struct ::sockaddr sa_type;
    /// IPv4 socket address type.
    typedef struct ::sockaddr_in sockinet4_type;
    /// IPv4 Internet address type.
    typedef struct ::in_addr inet4_type;
    /// IPv4 address representation unsigned integer type.
    typedef ::in_addr_t addr4_type;
    typedef ::in_port_t port_type;
    typedef ::sa_family_t sa_family_type;
    /// Network prefix type.
    typedef unsigned int prefix_type;

    class ipv4_socket_address;
    class socket_address;

    /**
    \brief IPv4 address class.
    \date 2018-05-23
    \ingroup net
    */
    class ipv4_address {

    public:
        /// Octet type.
        typedef u8 value_type;
        /// Unsigned 4-byte integer type.
        typedef addr4_type rep_type;
        /// Pointer to octet.
        typedef value_type* pointer;
        /// Constant pointer to octet.
        typedef const value_type* const_pointer;
        /// Reference to octet.
        typedef value_type& reference;
        /// Constant reference to octet.
        typedef const value_type& const_reference;
        /// Iterator.
        typedef pointer iterator;
        /// Constant iterator.
        typedef const_pointer const_iterator;
        /// Alias to \link std::size_t \endlink.
        typedef size_t size_type;

    private:
        union {
            addr4_type _integer;
            inet4_type _address;
            value_type _octets[4] {};
            char _bytes[4];
        };

    public:

        inline constexpr
        ipv4_address() noexcept:
        _integer{0} {}

        /// Construct IPv4 address from integer type.
        inline constexpr explicit
        ipv4_address(addr4_type rhs) noexcept:
        _integer{rhs} {}

        /// Copy-constructor.
        inline constexpr
        ipv4_address(const ipv4_address& rhs) noexcept:
        _integer{rhs._integer} {}

        /// Construct IPv4 address from \c in_addr system type.
        inline constexpr explicit
        ipv4_address(const inet4_type& rhs) noexcept:
        _integer{rhs.s_addr} {}

        /// Construct IPv4 address manually specifying each octet.
        inline constexpr
        ipv4_address(value_type o1, value_type o2, value_type o3, value_type o4):
        _octets{o1,o2,o3,o4} {}

        /// Construct IPv4 address from \c sockaddr system type.
        inline ipv4_address(const sa_type &rhs) noexcept:
        _address(reinterpret_cast<const sockinet4_type&>(rhs).sin_addr)
        {}

        explicit ipv4_address(const char* rhs);

        friend std::ostream&
        operator<<(std::ostream& out, ipv4_address rhs);

        friend std::istream&
        operator>>(std::istream& in, ipv4_address& rhs);

        /// Put address in binary form.
        inline friend bstream&
        operator<<(bstream& out, const ipv4_address& rhs) {
            return out.write(rhs._bytes, rhs.size());
        }

        /// Get address in binary form.
        inline friend bstream&
        operator>>(bstream& in, ipv4_address& rhs) {
            return in.read(rhs._bytes, rhs.size());
        }

        /// Get integer representation of the address.
        inline constexpr addr4_type
        rep() const {
            return this->_integer;
        }

        /// Automatically cast to \c in_addr system type.
        inline constexpr
        operator const inet4_type&() const noexcept {
            return this->_address;
        }

        /// Compare address integer representations.
        inline constexpr bool
        operator<(const ipv4_address& rhs) const noexcept {
            return this->_integer < rhs._integer;
        }

        inline constexpr bool operator<=(const ipv4_address& rhs) const noexcept {
            return this->operator<(rhs) || this->operator==(rhs);
        }

        inline constexpr bool operator>(const ipv4_address& rhs) const noexcept {
            return !this->operator<(rhs) && !this->operator==(rhs);
        }

        inline constexpr bool operator>=(const ipv4_address& rhs) const noexcept {
            return !this->operator<(rhs);
        }

        /// \copydoc operator<
        inline constexpr bool
        operator==(ipv4_address rhs) const noexcept {
            return this->_integer == rhs._integer;
        }

        /// \copydoc operator<
        inline constexpr bool
        operator!=(ipv4_address rhs) const noexcept {
            return this->_integer != rhs._integer;
        }

        /// Returns true if integer representations is non-nought.
        inline constexpr explicit
        operator bool() const noexcept {
            return this->_integer != 0;
        }

        /// Returns true if integer representations is nought.
        inline constexpr bool
        operator!() const noexcept {
            return this->_integer == 0;
        }

        /// Get reference to the specified octet.
        inline reference
        operator[](size_type i) noexcept {
            return this->_octets[i];
        }

        /// Get specified octet.
        inline constexpr value_type
        operator[](size_type i) const noexcept {
            return this->_octets[i];
        }

        /// Get pointer to the first octet.
        inline pointer
        data() noexcept {
            return this->_octets;
        }

        /// Get pointer to the first octet.
        inline const_pointer
        data() const noexcept {
            return this->_octets;
        }

        /// Get iterator to the beginning of octet array.
        inline iterator
        begin() noexcept {
            return this->data();
        }

        /// Get iterator to the beginning of octet array.
        inline const_iterator
        begin() const noexcept {
            return this->data();
        }

        /// Get the number of octets.
        inline constexpr static size_type
        size() noexcept {
            return sizeof(_octets);
        }

        /// Get iterator to the end of octet array.
        inline iterator
        end() noexcept {
            return this->data() + this->size();
        }

        /// Get iterator to the end of octet array.
        inline const_iterator
        end() const noexcept {
            return this->data() + this->size();
        }

        /// Get first octet.
        inline reference
        front() noexcept {
            return this->_octets[0];
        }

        /// Get first octet.
        inline value_type
        front() const noexcept {
            return this->_octets[0];
        }

        /// Get last octet.
        inline reference
        back() noexcept {
            return this->_octets[3];
        }

        /// Get last octet.
        inline value_type
        back() const noexcept {
            return this->_octets[3];
        }

        inline void
        clear() {
            this->_integer = UINT32_C(0);
        }

        /// Return network prefix assuming that this address is network mask.
        inline prefix_type
        to_prefix() const noexcept {
            return bit_count(_integer);
        }

        /// Create network mask from network prefix.
        inline static ipv4_address
        from_prefix(prefix_type prefix) noexcept;

    private:

        template<class Q>
        inline constexpr static
        Q
        position_helper(Q a, Q netmask) noexcept {
            return a - (a & netmask);
        }

    public:

        /// Compute address position in the subnetwork specified by \p netmask.
        inline constexpr addr4_type
        position(ipv4_address netmask) const noexcept {
            return position_helper(
                to_host_format(rep()),
                to_host_format(netmask.rep())
            );
        }

        static_assert(sizeof(_integer) == sizeof(_address), "bad ipv4_address size");
        static_assert(sizeof(_integer) == sizeof(_octets), "bad ipv4_address size");

    };

    /// Print textual representation of the address.
    std::ostream&
    operator<<(std::ostream& out, ipv4_address rhs);

    /// Parse textual representation of the address.
    std::istream&
    operator>>(std::istream& in, ipv4_address& rhs);

    /**
    \brief
    Specialisation of \link ipaddr_traits \endlink for \link ipv4_address \endlink.
    */
    template<>
    struct ipaddr_traits<ipv4_address> {

        /// Octet type.
        using value_type = ipv4_address::value_type;

        /// Socket address type.
        using socket_address_type = ipv4_socket_address;

        /// First octet of loopback address.
        static constexpr const value_type loopback_first_octet = 127;
        /// IP-address family.
        static constexpr const sa_family_type family = AF_INET;

        /// Localhost address.
        inline static constexpr ipv4_address
        localhost() noexcept {
            return ipv4_address {127,0,0,1};
        }

        /// Loopback network mask.
        inline static constexpr ipv4_address
        loopback_mask() noexcept {
            return ipv4_address {255,0,0,0};
        }

        /// Wide area network mask.
        inline static constexpr ipv4_address
        widearea_mask() noexcept {
            return ipv4_address {255,255,255,255};
        }

        /// Get IPv4 address from socket_address.
        inline static ipv4_address
        address(const socket_address& rhs) noexcept;

        /// Get IPv4 port from socket_address.
        inline static port_type
        port(const socket_address& rhs) noexcept;

    };

    ipv4_address
    ipv4_address::from_prefix(prefix_type prefix) noexcept {
        constexpr const size_t nbits = sizeof(addr4_type) *
                                       std::numeric_limits<unsigned char>::digits;
        return nbits == prefix
               ? ipaddr_traits<ipv4_address>::widearea_mask()
               : ipv4_address((addr4_type(1) << prefix) - addr4_type(1));
    }

}

namespace std {

    /// Specialisation of \link std::hash \endlink for \link sys::ipv4_address \endlink.
    template<>
    struct hash<sys::ipv4_address>: public std::hash<sys::ipv4_address::rep_type> {

    private:
        typedef std::hash<sys::ipv4_address::rep_type> base_type;

    public:
        /// Hash function return value type.
        typedef size_t result_type;
        /// Hash function argument type.
        typedef sys::ipv4_address argument_type;

        /// Return hash of 8-byte integer that represents the address.
        inline result_type
        operator()(const argument_type& rhs) const noexcept {
            return base_type::operator()(rhs.rep());
        }

    };

}

#endif // vim:filetype=cpp
