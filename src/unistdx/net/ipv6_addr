#ifndef UNISTDX_NET_IPV6_ADDR
#define UNISTDX_NET_IPV6_ADDR

#include <netinet/in.h>

#include <functional>
#include <iosfwd>

#include <unistdx/base/types>
#include <unistdx/base/uint128>
#include <unistdx/net/bit_count>
#include <unistdx/net/ipaddr_traits>
#include <unistdx/net/pstream>

namespace sys {

	typedef struct ::sockaddr sa_type;
	/// IPv6 socket address type.
	typedef struct ::sockaddr_in6 sockinet6_type;
	/// IPv6 Internet address type.
	typedef struct ::in6_addr inet6_type;
	/// IPv6 address representation unsigned integer type.
	typedef uint128_t addr6_type;
	typedef ::in_port_t port_type;
	typedef ::sa_family_t sa_family_type;
	typedef unsigned int prefix_type;

	union endpoint;

	/**
	\brief IPv6 address class.
	\date 2018-05-23
	\author Ivan Gankevich
	\ingroup net
	*/
	union ipv6_addr {

	public:
		/// Hextet type (2-byte unsigned integer).
		typedef u16 hex_type;
		/// Octet type (1-byte unsigned integer).
		typedef u8 oct_type;
		/// Unsigned 16-byte integer type.
		typedef addr6_type rep_type;

	private:
		addr6_type addr;
		inet6_type inaddr;
		hex_type _hextets[8];
		bytes<inet6_type> _bytes;

	public:

		inline constexpr
		ipv6_addr() noexcept:
		inaddr {} {}

		/// Copy-constructor.
		inline constexpr
		ipv6_addr(const ipv6_addr &rhs) noexcept:
		inaddr(rhs.inaddr) {}

		/// Construct IPv6 address from integer type.
		inline constexpr explicit
		ipv6_addr(addr6_type rhs) noexcept:
		addr(rhs) {}

		/// Construct IPv4 address from \c in6_addr system type.
		inline constexpr explicit
		ipv6_addr(const inet6_type& rhs) noexcept:
		inaddr(rhs) {}

		/// Construct IPv4 address manually specifying each hextet.
		inline constexpr
		ipv6_addr(
			hex_type h1,
			hex_type h2,
			hex_type h3,
			hex_type h4,
			hex_type h5,
			hex_type h6,
			hex_type h7,
			hex_type h8
		):
		addr(from_hextets(h1, h2, h3, h4, h5, h6, h7, h8)) {}

		/// Automatically cast to \c in6_addr system type.
		inline constexpr
		operator const inet6_type&() const {
			return this->inaddr;
		}

		/// Get integer representation of the address.
		inline constexpr const addr6_type&
		rep() const noexcept {
			return this->addr;
		}

		/// Get address octet by index.
		inline constexpr oct_type
		operator[](size_t i) const noexcept {
			return this->_bytes[i];
		}

		/// Compare address integer representations.
		inline constexpr bool
		operator<(const ipv6_addr& rhs) const {
			return this->addr < rhs.addr;
		}

		/// \copydoc operator<
		inline constexpr bool
		operator==(const ipv6_addr& rhs) const {
			return this->addr == rhs.addr;
		}

		/// \copydoc operator<
		inline constexpr bool
		operator!=(ipv6_addr rhs) const noexcept {
			return this->addr != rhs.addr;
		}

		/// Returns true if integer representations is non-nought.
		inline constexpr explicit
		operator bool() const {
			return this->addr != 0;
		}

		/// Returns true if integer representations is nought.
		inline constexpr bool
		operator!() const {
			return !this->operator bool();
		}

		friend std::ostream&
		operator<<(std::ostream& out, const ipv6_addr& rhs);

		friend std::istream&
		operator>>(std::istream& in, ipv6_addr& rhs);

		/// Put address in binary form.
		inline friend bstream&
		operator<<(bstream& out, const ipv6_addr& rhs) {
			return out << rhs._bytes;
		}

		/// Get address in binary form.
		inline friend bstream&
		operator>>(bstream& in, ipv6_addr& rhs) {
			return in >> rhs._bytes;
		}

		/// Return network prefix assuming that this address is network mask.
		inline prefix_type
		to_prefix() const noexcept {
			return bit_count(addr);
		}

		/// Create network mask from network prefix.
		inline static ipv6_addr
	    from_prefix(prefix_type prefix) noexcept;

	private:

		template<class Q>
		inline constexpr static
		Q
		position_helper(const Q& a, const Q& netmask) noexcept {
			return a - (a & netmask);
		}

	public:

		/// Compute address position in the subnetwork specified by \p netmask.
		inline constexpr addr6_type
		position(const ipv6_addr& netmask) const noexcept {
			return position_helper(
				to_host_format(rep()),
				to_host_format(netmask.rep())
			);
		}

	private:

		inline constexpr const hex_type*
		begin() const noexcept {
			return this->_hextets;
		}

		inline constexpr const hex_type*
		end() const noexcept {
			return this->_hextets + num_fields();
		}

		inline hex_type*
		begin() noexcept {
			return this->_hextets;
		}

		inline hex_type*
		end() noexcept {
			return this->_hextets + num_fields();
		}

		static constexpr int
		num_fields() {
			return sizeof(_hextets) / sizeof(hex_type);
		}

		constexpr static addr6_type
		from_hextets(
			addr6_type h1,
			addr6_type h2,
			addr6_type h3,
			addr6_type h4,
			addr6_type h5,
			addr6_type h6,
			addr6_type h7,
			addr6_type h8
		) {
			#define UINT128_C(x) x ## _u128
			using namespace literals;
			return (
				((h1 << 0)   & UINT128_C(0xffff)) |
				((h2 << 16)  & UINT128_C(0xffff0000)) |
				((h3 << 32)  & UINT128_C(0xffff00000000)) |
				((h4 << 48)  & UINT128_C(0xffff000000000000)) |
				((h5 << 64)  & UINT128_C(0xffff0000000000000000)) |
				((h6 << 80)  & UINT128_C(0xffff00000000000000000000)) |
				((h7 << 96)  & UINT128_C(0xffff000000000000000000000000)) |
				((h8 << 112) & UINT128_C(0xffff0000000000000000000000000000)));
			#undef UINT128_C
		}

		static_assert(sizeof(addr) == sizeof(inaddr), "bad ipv6_addr size");
		static_assert(sizeof(addr) == sizeof(_hextets), "bad ipv6_addr size");
		static_assert(sizeof(addr) == sizeof(_bytes), "bad ipv6_addr size");
	};

	/// Print textual representation of the address.
	std::ostream&
	operator<<(std::ostream& out, const ipv6_addr& rhs);

	/// Parse textual representation of the address.
	std::istream&
	operator>>(std::istream& in, ipv6_addr& rhs);

	/// \copydoc ipaddr_traits
	template<>
	struct ipaddr_traits<ipv6_addr> {

		/// Octet type.
		typedef ipv6_addr::oct_type oct_type;

		/// First octet of loopback address.
		static constexpr const oct_type loopback_first_octet = 0;
		/// IP-address family.
		static constexpr const sa_family_type family = AF_INET6;

		/// Localhost address.
		inline static constexpr ipv6_addr
		localhost() noexcept {
			return ipv6_addr {0,0,0,0,0,0,0,1};
		}

		/// Loopback network mask.
		inline static constexpr ipv6_addr
		loopback_mask() noexcept {
			return widearea_mask();
		}

		/// Wide area network mask.
		inline static constexpr ipv6_addr
		widearea_mask() noexcept {
			return ipv6_addr {0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff};
		}

		/// Get IPv6 address from endpoint.
		inline static constexpr ipv6_addr
		address(const endpoint& rhs) noexcept;

		/// Get IPv6 port from endpoint.
		inline static constexpr port_type
		port(const endpoint& rhs) noexcept;

	};

	ipv6_addr
	ipv6_addr::from_prefix(prefix_type prefix) noexcept {
		constexpr const size_t nbits = sizeof(addr6_type) *
		                               std::numeric_limits<unsigned char>::digits;
		return nbits == prefix
		       ? ipaddr_traits<ipv6_addr>::widearea_mask()
			   : ipv6_addr((addr6_type(1) << prefix) - addr6_type(1));
	}

}

namespace std {

	/// Specialisation of \link std::hash\endlink for \link sys::ipv6_addr\endlink.
	template<>
	struct hash<sys::ipv6_addr>: public std::hash<sys::ipv6_addr::rep_type> {

	private:
		typedef std::hash<sys::ipv6_addr::rep_type> base_type;

	public:
		/// Hash function return value type.
		typedef size_t result_type;
		/// Hash function argument type.
		typedef sys::ipv6_addr argument_type;

		/// Return hash of 16-byte integer that represents the address.
		inline result_type
		operator()(const argument_type& rhs) const noexcept {
			return base_type::operator()(rhs.rep());
		}

	};

}

#endif // vim:filetype=cpp
