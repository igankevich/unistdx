/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_NET_IFADDRS_ITERATOR
#define UNISTDX_NET_IFADDRS_ITERATOR

#include <unistdx/bits/ifaddrs>

namespace sys {

	typedef struct ::ifaddrs ifaddrs_type;

	class ifaddrs_iterator:
		public std::iterator<std::input_iterator_tag, ifaddrs_type> {

	public:
		typedef ifaddrs_type* pointer;
		typedef const ifaddrs_type* const_pointer;
		typedef ifaddrs_type& reference;
		typedef const ifaddrs_type& const_reference;

	private:
		pointer _ifa = nullptr;

	public:

		inline explicit constexpr
		ifaddrs_iterator(pointer rhs) noexcept:
		_ifa(rhs) {}

		inline constexpr
		ifaddrs_iterator() noexcept = default;

		inline
		~ifaddrs_iterator() = default;

		inline constexpr
		ifaddrs_iterator(const ifaddrs_iterator&) noexcept = default;

		inline ifaddrs_iterator&
		operator=(const ifaddrs_iterator&) noexcept = default;

		inline constexpr bool
		operator==(const ifaddrs_iterator& rhs) const noexcept {
			return this->_ifa == rhs._ifa;
		}

		inline constexpr bool
		operator!=(const ifaddrs_iterator& rhs) const noexcept {
			return !operator==(rhs);
		}

		inline reference
		operator*() noexcept {
			return *this->_ifa;
		}

		inline constexpr const_reference
		operator*() const noexcept {
			return *this->_ifa;
		}

		inline pointer
		operator->() noexcept {
			return this->_ifa;
		}

		inline constexpr const_pointer
		operator->() const noexcept {
			return this->_ifa;
		}

		inline ifaddrs_iterator&
		operator++() noexcept {
			this->next(); return *this;
		}

		inline ifaddrs_iterator
		operator++(int) noexcept {
			ifaddrs_iterator tmp(*this); this->next(); return tmp;
		}

	private:

		inline void
		next() noexcept {
			this->_ifa = this->_ifa->ifa_next;
		}

	};


}

#endif // vim:filetype=cpp
