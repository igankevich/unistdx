#ifndef UNISTDX_NET_IFADDR
#define UNISTDX_NET_IFADDR

#include <tuple>
#include <unistdx/base/check>
#include <unistdx/net/endpoint>
#include <unistdx/net/subnet_iterator>

namespace sys {

	template<class Addr>
	class ifaddr {

		typedef ipaddr_traits<Addr> traits_type;

	public:

		typedef Addr addr_type;
		typedef typename addr_type::rep_type rep_type;
		typedef subnet_iterator<addr_type> iterator;

		inline constexpr
		ifaddr(const addr_type& addr, const addr_type& netmask) noexcept:
		_address(addr), _netmask(netmask)
		{}

		inline constexpr
		ifaddr(const addr_type& addr, const prefix_type prefix) noexcept:
		_address(addr), _netmask(addr_type::from_prefix(prefix))
		{}

		inline constexpr
		ifaddr() noexcept = default;

		inline constexpr
		ifaddr(const ifaddr&) noexcept = default;

		inline constexpr
		ifaddr(ifaddr&&) noexcept = default;

		inline ifaddr&
		operator=(const ifaddr&) noexcept = default;

		inline constexpr const addr_type&
		address() const noexcept {
			return this->_address;
		}

		inline constexpr const addr_type&
		netmask() const noexcept {
			return this->_netmask;
		}

		inline prefix_type
		prefix() const noexcept {
			return this->_netmask.to_prefix();
		}

		inline constexpr const addr_type&
		gateway() const noexcept {
			return addr_type(this->first());
		}

		inline constexpr rep_type
		position() const noexcept {
			return this->_address.position(this->_netmask);
		}

		inline constexpr iterator
		begin() const noexcept {
			return iterator(this->first());
		}

		inline constexpr iterator
		middle() const noexcept {
			return iterator(this->_address);
		}

		inline constexpr iterator
		end() const noexcept {
			return iterator(this->last());
		}

		inline constexpr rep_type
		count() const noexcept {
			return this->last() - this->first();
		}

		inline constexpr bool
		contains(const addr_type& rhs) const noexcept {
			return this->contains(to_host_format(rhs.rep()));
		}

		inline constexpr bool
		is_loopback() const noexcept {
			return this->_address[0] == traits_type::loopback_first_octet &&
			       this->_netmask == traits_type::loopback_mask();
		}

		inline constexpr bool
		is_widearea() const noexcept {
			return this->_netmask == traits_type::widearea_mask();
		}

		inline explicit constexpr
		operator bool() const noexcept {
			return static_cast<bool>(this->_address) &&
			       static_cast<bool>(this->_netmask);
		}

		inline constexpr bool
		operator!() const noexcept {
			return !this->operator bool();
		}

		inline constexpr bool
		operator==(const ifaddr& rhs) const noexcept {
			return this->_address == rhs._address &&
			       this->_netmask == rhs._netmask;
		}

		inline constexpr bool
		operator!=(const ifaddr& rhs) const noexcept {
			return !this->operator==(rhs);
		}

		inline constexpr bool
		operator<(const ifaddr& rhs) const noexcept {
			return std::tie(this->_address, this->_netmask) <
			       std::tie(rhs._address, rhs._netmask);
		}

		template <class X>
		friend std::ostream&
		operator<<(std::ostream& out, const ifaddr<X>& rhs);

		template <class X>
		friend std::istream&
		operator>>(std::istream& in, ifaddr<X>& rhs);

	private:

		inline constexpr bool
		contains(const rep_type& a) const noexcept {
			return this->first() <= a && a < this->last();
		}

		inline constexpr rep_type
		first() const noexcept {
			return (this->addr_long() & this->mask_long()) + 1;
		}

		inline constexpr rep_type
		last() const noexcept {
			return (this->addr_long() & this->mask_long()) +
			       (~this->mask_long());
		}

		inline constexpr const rep_type
		addr_long() const noexcept {
			return to_host_format(this->_address.rep());
		}

		inline constexpr const rep_type
		mask_long() const noexcept {
			return to_host_format(this->_netmask.rep());
		}

		template<class X>
		friend class std::hash;

		addr_type _address;
		addr_type _netmask;
	};

	template <class Addr>
	std::ostream&
	operator<<(std::ostream& out, const ifaddr<Addr>& rhs);

	template <class Addr>
	std::istream&
	operator>>(std::istream& in, ifaddr<Addr>& rhs);

}

namespace std {

	template<class Addr>
	struct hash<sys::ifaddr<Addr> >: public std::hash<Addr> {

		typedef size_t result_type;
		typedef sys::ifaddr<Addr> argument_type;

		inline size_t
		operator()(const argument_type& rhs) const noexcept {
			typedef std::hash<Addr> addr_hash;
			return
			    addr_hash::operator()(rhs._address) ^
			    addr_hash::operator()(rhs._netmask);

		}

	};

}

#endif // vim:filetype=cpp
