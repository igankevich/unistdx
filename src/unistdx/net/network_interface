#ifndef UNISTDX_NET_NETWORK_INTERFACE
#define UNISTDX_NET_NETWORK_INTERFACE

#include <net/if.h>

#include <string>

#include <unistdx/config>
#include <unistdx/io/fildes>
#include <unistdx/net/interface_address>
#include <unistdx/net/socket>
#include <unistdx/net/ipv4_address>

namespace sys {

    enum class network_interface_flags: u16 {
        #if defined(UNISTDX_HAVE_IFF_ALLMULTI)
        receive_all_multicast_packets = IFF_ALLMULTI,
        #endif
        #if defined(UNISTDX_HAVE_IFF_BROADCAST)
        broadcast = IFF_BROADCAST,
        #endif
        #if defined(UNISTDX_HAVE_IFF_DEBUG)
        debug = IFF_DEBUG,
        #endif
        #if defined(UNISTDX_HAVE_IFF_LOOPBACK)
        loopback = IFF_LOOPBACK,
        #endif
        #if defined(UNISTDX_HAVE_IFF_MASTER)
        master = IFF_MASTER,
        #endif
        #if defined(UNISTDX_HAVE_IFF_MULTICAST)
        multicast = IFF_MULTICAST,
        #endif
        #if defined(UNISTDX_HAVE_IFF_NOARP)
        no_arg = IFF_NOARP,
        #endif
        #if defined(UNISTDX_HAVE_IFF_NOTRAILERS)
        no_trailers = IFF_NOTRAILERS,
        #endif
        #if defined(UNISTDX_HAVE_IFF_POINTOPOINT)
        point_to_point = IFF_POINTOPOINT,
        #endif
        #if defined(UNISTDX_HAVE_IFF_PORTSEL)
        media = IFF_PORTSEL,
        #endif
        #if defined(UNISTDX_HAVE_IFF_PROMISC)
        promiscuous = IFF_PROMISC,
        #endif
        #if defined(UNISTDX_HAVE_IFF_RUNNING)
        running = IFF_RUNNING,
        #endif
        #if defined(UNISTDX_HAVE_IFF_SLAVE)
        slave = IFF_SLAVE,
        #endif
        #if defined(UNISTDX_HAVE_IFF_UP)
        up = IFF_UP,
        #endif
    };

    template <>
    struct is_flag<network_interface_flags>: public std::true_type {};

    class network_interface {

    public:
        static constexpr size_t max_name_size() { return IFNAMSIZ-1; }

    public:
        using flag = network_interface_flags;
        using interface_address_type = sys::interface_address<sys::ipv4_address>;

    protected:
        using network_interface_request = ::ifreq;
        using traits_type = std::string::traits_type;

    protected:
        std::string _name;
        mutable socket _socket{family_type::inet,socket_type::datagram};

    public:

        inline explicit
        network_interface(std::string name): _name(name) {
            if (name.size() > max_name_size()) { throw std::invalid_argument("bad name"); }
        }

        explicit network_interface(int index);

        network_interface() = default;
        network_interface(network_interface&&) = default;
        network_interface& operator=(network_interface&&) = default;
        network_interface(const network_interface&) = delete;
        network_interface& operator=(const network_interface&) = delete;

        void flags(flag f);
        auto flags() const -> flag;
        void setf(flag f);
        void unsetf(flag f);
        auto index() const -> int;
        auto address() const -> interface_address_type;
        void address(const interface_address_type& addr);
        void set_namespace(fd_type ns);

        inline const std::string& name() const { return this->_name; }
        inline void up() { this->setf(flag::up); }
        inline void down() { this->unsetf(flag::up); }
        inline explicit operator bool() const { return !this->_name.empty(); }
        inline bool operator !() const { return !this->operator bool(); }

    };

}


#endif // vim:filetype=cpp
