#ifndef SYS_ENDPOINT_HH
#define SYS_ENDPOINT_HH

#include <netinet/in.h>
#include <sys/types.h>

#include <functional>
#include <iosfwd>
#include <tuple>

#include <unistdx/net/bit_count>
#include <unistdx/net/byte_order>
#include <unistdx/net/family>
#include <unistdx/net/ipaddr_traits>
#include <unistdx/net/ipv4_addr>
#include <unistdx/net/ipv6_addr>

namespace sys {

	typedef struct ::sockaddr sa_type;
	typedef ::socklen_t socklen_type;
	typedef ::in_port_t port_type;

	template<class Addr>
	inline constexpr sockinet6_type
	new_sockinet(family_type f, port_type p, Addr h);

	template<>
	inline constexpr sockinet6_type
	new_sockinet<ipv6_addr>(family_type f, port_type p, ipv6_addr h) {
		return sockinet6_type {
			#if defined(__MACH__)
				   0,
			#endif
				   static_cast<sa_family_type>(f),
				   to_network_format<port_type>(p),
				   0, // flowinfo
				   static_cast<const inet6_type&>(h),
				   0 // scope
		};
	}

	template<>
	inline constexpr sockinet6_type
	new_sockinet<ipv4_addr>(family_type f, port_type p, ipv4_addr h) {
		return sockinet6_type {
			#if defined(__MACH__)
				   0,
			#endif
				   static_cast<sa_family_type>(f),
				   to_network_format<port_type>(p),
				   h.rep(),
				   IN6ADDR_ANY_INIT,
				   0 // scope
		};
	}

	union endpoint {

		typedef uint16_t portable_family_type;

		inline constexpr
		endpoint() noexcept {}

		inline constexpr
		endpoint(const endpoint &rhs) noexcept:
		_addr6(rhs._addr6) {}

		inline
		endpoint(const char* h, const port_type p) {
			this->addr(h, p);
		}

		inline constexpr
		endpoint(const ipv4_addr h, const port_type p) noexcept:
		_addr6(new_sockinet(family_type::inet, p, h)) {}

		inline constexpr
		endpoint(const ipv6_addr &h, const port_type p) noexcept:
		_addr6(new_sockinet(family_type::inet6, p, h)) {}

		inline constexpr
		endpoint(const sockinet4_type &rhs) noexcept:
		_addr4(rhs) {}

		inline constexpr
		endpoint(const sockinet6_type &rhs) noexcept:
		_addr6(rhs) {}

		inline constexpr
		endpoint(const sa_type &rhs) noexcept:
		_sockaddr(rhs) {}

		inline constexpr
		endpoint(const endpoint &rhs, const port_type newport) noexcept:
		_addr6(
			rhs.family() == family_type::inet ?
			new_sockinet<ipv4_addr>(
				family_type::inet,
				newport,
				ipv4_addr(rhs._addr6.sin6_flowinfo)
			) :
			new_sockinet<ipv6_addr>(
				family_type::inet6,
				newport,
				ipv6_addr(rhs._addr6.sin6_addr)
			)
		) {}

		inline bool
		operator<(const endpoint& rhs) const noexcept {
			return family() == family_type::inet
			       ? std::make_tuple(sa_family(), addr4(), port4())
			       < std::make_tuple(rhs.sa_family(), rhs.addr4(), rhs.port4())
				   : std::make_tuple(sa_family(), addr6(), port6())
			       < std::make_tuple(rhs.sa_family(), rhs.addr6(), rhs.port6());
		}

		inline constexpr bool
		operator==(const endpoint& rhs) const noexcept {
			return (sa_family() == rhs.sa_family() || sa_family() == 0 ||
			        rhs.sa_family() == 0)
			       && (family() == family_type::inet
			           ? addr4() == rhs.addr4() && port4() == rhs.port4()
					   : addr6() == rhs.addr6() && port6() == rhs.port6());
		}

		inline bool
		operator>=(const endpoint& rhs) const noexcept {
			return !operator<(rhs);
		}

		inline constexpr bool
		operator!=(const endpoint& rhs) const noexcept {
			return !operator==(rhs);
		}

		inline constexpr explicit
		operator bool() const noexcept {
			return sa_family() != 0 && (family() == family_type::inet
			                            ? static_cast<bool>(addr4())
										: static_cast<bool>(addr6()));
		}

		inline constexpr bool
		operator!() const noexcept {
			return !operator bool();
		}

		friend std::ostream&
		operator<<(std::ostream& out, const endpoint& rhs);

		friend std::istream&
		operator>>(std::istream& in, endpoint& rhs);

		friend pstream&
		operator<<(pstream& out, const endpoint& rhs);

		friend pstream&
		operator>>(pstream& in, endpoint& rhs);

		inline constexpr addr4_type
		address() const noexcept {
			return to_host_format<addr4_type>(this->addr4().rep());
		}

		inline constexpr port_type
		port() const noexcept {
			return to_host_format<port_type>(this->port4());
		}

		inline constexpr family_type
		family() const noexcept {
			return static_cast<family_type>(this->_addr6.sin6_family);
		}

		inline constexpr sa_family_type
		sa_family() const noexcept {
			return this->_addr6.sin6_family;
		}

		inline void
		reset() noexcept {
			this->_addr4.sin_family = 0;
			this->_addr4.sin_port = 0;
			this->_addr4.sin_addr.s_addr = 0;
		}

		inline constexpr ipv4_addr
		addr4() const noexcept {
			return ipv4_addr(this->_addr4.sin_addr);
		}

	public:

		inline sa_type*
		sockaddr() noexcept {
			return &this->_sockaddr;
		}

		inline sa_type*
		sockaddr() const noexcept {
			return const_cast<sa_type*>(&this->_sockaddr);
		}

		inline constexpr socklen_type
		sockaddrlen() const noexcept {
			return this->family() == family_type::inet6
			       ? sizeof(sockinet6_type)
				   : sizeof(sockinet4_type);
		}

		friend struct std::hash<sys::endpoint>;

	private:

		inline constexpr port_type
		port4() const {
			return this->_addr4.sin_port;
		}

		inline constexpr ipv6_addr
		addr6() const {
			return ipv6_addr(this->_addr6.sin6_addr);
		}

		inline constexpr port_type
		port6() const {
			return this->_addr6.sin6_port;
		}

		void
		    addr(const char* host, port_type p);

		sockinet6_type _addr6 = {};
		sockinet4_type _addr4;
		sa_type _sockaddr;

		friend ipv4_addr;
	};

	std::ostream&
	operator<<(std::ostream& out, const endpoint& rhs);

	std::istream&
	operator>>(std::istream& in, endpoint& rhs);

	pstream&
	operator<<(pstream& out, const endpoint& rhs);

	pstream&
	operator>>(pstream& in, endpoint& rhs);

	static_assert(
		sizeof(endpoint) == sizeof(sockinet6_type),
		"bad endpoint size"
	);
	static_assert(sizeof(port_type) == 2, "bad port_type size");

	ipv4_addr::ipv4_addr(const sa_type& rhs) noexcept:
	inaddr(sys::endpoint(rhs)._addr4.sin_addr)
	{}

}

namespace std {

	template<>
	struct hash<sys::endpoint> {

		typedef size_t result_type;
		typedef sys::endpoint argument_type;

		inline size_t
		operator()(const sys::endpoint& rhs) const noexcept {
			const size_t a = rhs.family() == sys::family_type::inet
			                 ? std::hash<sys::ipv4_addr>()(rhs.addr4())
							 : std::hash<sys::ipv6_addr>()(rhs.addr6());
			return rhs.port() ^ a;
		}

	};

}

#endif // SYS_ENDPOINT_HH vim:ft=cpp
