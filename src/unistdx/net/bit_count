/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_NET_BIT_COUNT
#define UNISTDX_NET_BIT_COUNT

#include <type_traits>

#include <unistdx/config>

namespace sys {

	template<class T>
	inline unsigned int
	bit_count(T value) noexcept {
		static_assert(std::is_unsigned<T>::value, "bad value type");
		unsigned int count = 0;
		while (value > 0) {           // until all bits are zero
			if ((value & 1) == 1)     // check lower bit
				++count;
			value >>= 1;              // shift bits, removing lower bit
		}
		return count;
	}

	#if defined(UNISTDX_HAVE_BUILTIN_POPCOUNT)
	template<>
	inline unsigned int
	bit_count<unsigned int>(unsigned int value) noexcept {
		return __builtin_popcount(value);
	}
	#endif

	#if defined(UNISTDX_HAVE_BUILTIN_POPCOUNTL)
	template<>
	inline unsigned int
	bit_count<unsigned long>(unsigned long value) noexcept {
		return __builtin_popcountl(value);
	}
	#endif

	#if defined(UNISTDX_HAVE_BUILTIN_POPCOUNTLL) && \
		defined(UNISTDX_HAVE_LONG_LONG)
	template<>
	inline unsigned int
	bit_count<unsigned long long>(unsigned long long value) noexcept {
		return __builtin_popcountll(value);
	}
	#endif


}

#endif // vim:filetype=cpp
