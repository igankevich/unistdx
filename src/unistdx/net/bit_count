#ifndef UNISTDX_NET_BIT_COUNT
#define UNISTDX_NET_BIT_COUNT

#include <bitset>

#include <unistdx/config>

namespace sys {

	template<class T>
	inline unsigned int
	bit_count(T value) noexcept {
		union {
			T val;
			std::bitset<sizeof(T) * 8> bits;
		} x{};
		x.val = value;
		return x.bits.count();
	}

	#if defined(UNISTDX_HAVE_BUILTIN_POPCOUNT)
	template<>
	inline unsigned int
	bit_count<unsigned int>(unsigned int value) noexcept {
		return __builtin_popcount(value);
	}
	#endif

	#if defined(UNISTDX_HAVE_BUILTIN_POPCOUNTL)
	template<>
	inline unsigned int
	bit_count<unsigned long>(unsigned long value) noexcept {
		return __builtin_popcountl(value);
	}
	#endif

	#if defined(UNISTDX_HAVE_BUILTIN_POPCOUNTLL) && \
		defined(UNISTDX_HAVE_LONG_LONG)
	template<>
	inline unsigned int
	bit_count<unsigned long long>(unsigned long long value) noexcept {
		return __builtin_popcountll(value);
	}
	#endif

}

#endif // vim:filetype=cpp
