/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_NET_IFADDRS
#define UNISTDX_NET_IFADDRS

#include <unistdx/bits/ifaddrs>
#include <unistdx/net/ifaddrs_iterator>
#include <unistdx/net/ifaddr>

namespace sys {

	struct ifaddrs {

		typedef ifaddrs_type value_type;
		typedef ifaddrs_iterator iterator;
		typedef std::size_t size_type;

		inline
		ifaddrs() {
			UNISTDX_CHECK(::getifaddrs(&this->_addrs));
		}

		inline
		~ifaddrs() noexcept {
			if (this->_addrs) {
				::freeifaddrs(this->_addrs);
			}
		}

		inline iterator
		begin() noexcept {
			return iterator(this->_addrs);
		}

		inline iterator
		begin() const noexcept {
			return iterator(this->_addrs);
		}

		inline static constexpr iterator
		end() noexcept {
			return iterator();
		}

		inline bool
		empty() const noexcept {
			return this->begin() == this->end();
		}

		inline size_type
		size() const noexcept {
			return std::distance(this->begin(), this->end());
		}

	private:

		ifaddrs_type* _addrs = nullptr;

	};

	template<class Addr, class Result>
	inline void
	enumerate_ifaddrs(Result result) {
		typedef typename sys::ipaddr_traits<Addr> traits_type;
		sys::ifaddrs addrs;
		std::for_each(
			addrs.begin(), addrs.end(),
			[&result] (const sys::ifaddrs_type& rhs) {
				if (rhs.ifa_addr and rhs.ifa_addr->sa_family == traits_type::family) {
					const Addr addr(*rhs.ifa_addr);
					const Addr netmask(*rhs.ifa_netmask);
					*result = ifaddr<Addr>(addr, netmask);
					++result;
				}
			}
		);
	}

}

#endif // vim:filetype=cpp
