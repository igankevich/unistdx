/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_FS_PATHENTRY
#define UNISTDX_FS_PATHENTRY

#include <unistdx/fs/direntry>

namespace sys {

	struct pathentry: public direntry {

		pathentry() = default;
		pathentry(const pathentry&) = default;
		pathentry(pathentry&& rhs) = default;
		~pathentry() = default;

		inline
		pathentry(const path& dirname, const direntry& ent):
		direntry(ent),
		_dirname(dirname) {}

		inline const path&
		dirname() const noexcept {
			return this->_dirname;
		}

		inline path
		getpath() const {
			return path(this->_dirname, name());
		}

		inline bool
		operator<(const pathentry& rhs) const noexcept {
			return this->_dirname < rhs._dirname;
		}

		inline bool
		operator==(const pathentry& rhs) const noexcept {
			return this->_dirname == rhs._dirname;
		}

		inline bool
		operator!=(const pathentry& rhs) const noexcept {
			return !operator==(rhs);
		}

		inline friend std::ostream&
		operator<<(std::ostream& out, const pathentry& rhs) {
			return out << rhs.dirname() << file_separator << rhs.name();
		}

		pathentry&
		operator=(const pathentry&) = default;

		pathentry&
		operator=(pathentry&& rhs) = default;

	public:

		path _dirname;

	};

	inline sys::file_type
	get_file_type(const pathentry& rhs) {
		return rhs.has_type()
		       ? rhs.type()
			   : file_stat(rhs.getpath()).type();
	}

}

#endif // vim:filetype=cpp
