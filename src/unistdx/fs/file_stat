#ifndef UNISTDX_FS_FILE_STAT
#define UNISTDX_FS_FILE_STAT

#include <chrono>

#include <unistdx/base/check>
#include <unistdx/fs/file_mode>
#include <unistdx/fs/file_type>

namespace sys {

	namespace bits {
		template <class T>
		inline T
		timespec_to_time_point(const ::timespec& ts) {
			using std::chrono::seconds;
			using std::chrono::nanoseconds;
			return T(seconds(ts.tv_sec) + nanoseconds(ts.tv_nsec));
		}
	}

	/// Alias to \c stat system type.
	typedef struct ::stat stat_type;

	/// Alias to \c off_t system type.
	typedef ::off_t offset_type;

	typedef ::uid_t uid_type;
	typedef ::gid_t gid_type;

	/// Alias to \c dev_t system type.
	typedef ::dev_t device_type;

	/**
	\brief
	File status class that wraps \c stat system type.
	\date 2018-05-25
	\author Ivan Gankevich
	\ingroup wrapper
	*/
	class file_stat: public stat_type {

	public:
		/// Clock type used in the methods of this class.
		typedef std::chrono::system_clock clock_type;
		/// Clock time point type.
		typedef clock_type::time_point time_point;
		/// Block size type (integer).
		typedef ::blksize_t block_size_type;
		/// Block count type (integer).
		typedef ::blkcnt_t block_count_type;
		/// Hard link count type (integer).
		typedef ::nlink_t nlink_type;

		inline
		file_stat() noexcept:
		stat_type{}
		{}

		/// Construct file status for file \p filename.
		inline explicit
		file_stat(const char* filename):
		stat_type{}
		{ this->update(filename); }

		/// Get file type.
		inline file_type
		type() const noexcept {
			return file_type(this->st_mode & file_mode::type_mask);
		}

		/// Returns true, if file is regular.
		inline bool
		is_regular() const noexcept {
			return this->type() == file_type::regular;
		}

		/// Returns true, if file is a unix domain socket.
		inline bool
		is_socket() const noexcept {
			return this->type() == file_type::socket;
		}

		/// Returns true, if file is a symbolic link.
		inline bool
		is_symbolic_link() const noexcept {
			return this->type() == file_type::symbolic_link;
		}

		/// Returns true, if file is a block device.
		inline bool
		is_block_device() const noexcept {
			return this->type() == file_type::block_device;
		}

		/// Returns true, if file is a directory.
		inline bool
		is_directory() const noexcept {
			return this->type() == file_type::directory;
		}

		/// Returns true, if file is a character device.
		inline bool
		is_character_device() const noexcept {
			return this->type() == file_type::character_device;
		}

		/// Returns true, if file is a pipe.
		inline bool
		is_pipe() const noexcept {
			return this->type() == file_type::pipe;
		}

		/// Get file size in bytes.
		inline offset_type
		size() const noexcept {
			return this->st_size;
		}

		/// Get file block size in bytes.
		inline block_size_type
		block_size() const noexcept {
			return this->st_blksize;
		}

		/// Get preferred block size in bytes.
		inline block_size_type
		preferred_block_size() const noexcept {
			return this->st_blksize;
		}

		/// Get the number of 512 byte blocks allocated for the file.
		inline block_count_type
		num_blocks() const noexcept {
			return this->st_blocks;
		}

		/// Get ID of the device that contains the file.
		inline device_type
		device() const noexcept {
			return this->st_dev;
		}

		/// Get device ID (if the file is a device).
		inline device_type
		this_device() const noexcept {
			return this->st_rdev;
		}

		/// Get the number of hard links.
		inline nlink_type
		num_links() const noexcept {
			return this->st_nlink;
		}

		/// Get file mode bits.
		inline file_mode
		mode() const noexcept {
			return file_mode(this->st_mode & file_mode::mode_mask);
		}

		/// Get ID of the user that owns the file.
		inline uid_type
		owner() const noexcept {
			return this->st_uid;
		}

		/// Get ID of the group that owns the file.
		inline gid_type
		group() const noexcept {
			return this->st_gid;
		}

		/**
		Return true, if the file exists
		(previous call to \link update\endlink succeeded).
		*/
		inline bool
		exists() const noexcept {
			return this->st_ino != 0;
		}

		/**
		\brief Get file status for file \p filename.
		\see \man{stat,2}
		*/
		inline void
		update(const char* filename) {
			this->st_ino = 0;
			UNISTDX_CHECK_IF_NOT(ENOENT, ::stat(filename, this));
		}

		/// Get time of last access.
		inline time_point
		last_accessed() const noexcept {
			return bits::timespec_to_time_point<time_point>(this->st_atim);
		}

		/// Get time of last modification.
		inline time_point
		last_modified() const noexcept {
			return bits::timespec_to_time_point<time_point>(this->st_mtim);
		}

		/// Get time of last status change.
		inline time_point
		last_status_changed() const noexcept {
			return bits::timespec_to_time_point<time_point>(this->st_ctim);
		}

		friend std::ostream&
		operator<<(std::ostream& out, const file_stat& rhs);

	};

	/// Print file status for debugging (the format is similar to \man{ls,1}).
	std::ostream&
	operator<<(std::ostream& out, const file_stat& rhs);

}

#endif // vim:filetype=cpp
