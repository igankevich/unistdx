/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_FS_FILE_STAT
#define UNISTDX_FS_FILE_STAT

#include <unistdx/base/check>
#include <unistdx/fs/file_mode>
#include <unistdx/fs/file_type>

namespace sys {

	typedef struct ::stat stat_type;
	typedef ::off_t offset_type;
	typedef ::uid_t uid_type;
	typedef ::gid_t gid_type;

	struct file_stat: public stat_type {

		static const mode_type type_mask = S_IFMT;

		inline
		file_stat() noexcept:
		stat_type{}
		{}

		inline explicit
		file_stat(const char* filename):
		stat_type{}
		{ this->update(filename); }

		inline file_type
		type() const noexcept {
			return file_type(this->st_mode & type_mask);
		}

		inline bool
		is_regular() const noexcept {
			return this->type() == file_type::regular;
		}

		inline bool
		is_socket() const noexcept {
			return this->type() == file_type::socket;
		}

		inline bool
		is_symbolic_link() const noexcept {
			return this->type() == file_type::symbolic_link;
		}

		inline bool
		is_block_device() const noexcept {
			return this->type() == file_type::block_device;
		}

		inline bool
		is_directory() const noexcept {
			return this->type() == file_type::directory;
		}

		inline bool
		is_character_device() const noexcept {
			return this->type() == file_type::character_device;
		}

		inline bool
		is_pipe() const noexcept {
			return this->type() == file_type::pipe;
		}

		inline offset_type
		size() const noexcept {
			return this->st_size;
		}

		inline file_mode
		mode() const noexcept {
			return file_mode(this->st_mode & file_mode::mode_mask);
		}

		inline uid_type
		owner() const noexcept {
			return this->st_uid;
		}

		inline gid_type
		group() const noexcept {
			return this->st_gid;
		}

		inline bool
		exists() const noexcept {
			return this->st_ino != 0;
		}

		inline void
		update(const char* filename) {
			UNISTDX_CHECK_IF_NOT(ENOENT, ::stat(filename, this));
		}

		friend std::ostream&
		operator<<(std::ostream& out, const file_stat& rhs);

	};

	std::ostream&
	operator<<(std::ostream& out, const file_stat& rhs);

}

#endif // vim:filetype=cpp
