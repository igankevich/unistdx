#ifndef UNISTDX_FS_DIRSTREAM
#define UNISTDX_FS_DIRSTREAM

namespace sys {

	/**
	\brief Base class for all directory streams.
	\date 2018-05-25
	\author Ivan Gankevich
	\ingroup fs
	\details
	The class stores stream state similar to \link std::ios_base\endlink class
	for use in subclasses.
	*/
	class dirstream {

	protected:

		dirstream() = default;

		/// Copy-constructor.
		dirstream(const dirstream&) = default;

		/// Move-constructor.
		dirstream(dirstream&&) = default;

		~dirstream() = default;

	public:
		/// Directory read state bits.
		enum state {
			/// No-error state.
			goodbit = 0,
			/// Input/output error bit (application-level error).
			failbit = 1,
			/// Input/output error bit (system-level error).
			badbit = 2,
			/// End-of-file bit.
			eofbit = 4
		};

	protected:
		/// Stream state bits.
		state _state = goodbit;

	public:

		/// Returns true if the stream is in good state.
		inline explicit
		operator bool() const noexcept {
			return this->good();
		}

		/// Returns true if the stream is not in good state.
		inline bool
		operator!() const noexcept {
			return !this->operator bool();
		}

		/// Clear stream state.
		inline void
		clear() noexcept {
			this->_state = goodbit;
		}

		/// Returns true if the stream is in good state.
		inline bool
		good() const noexcept {
			return !this->_state;
		}

		/// Returns true if bad bit is set.
		inline bool
		bad() const noexcept {
			return this->_state & badbit;
		}

		/// Returns true if fail bit is set.
		inline bool
		fail() const noexcept {
			return this->_state & failbit;
		}

		/// Returns true if end-of-file bit is set.
		inline bool
		eof() const noexcept {
			return this->_state & eofbit;
		}

		/// Get stream read state.
		inline state
		rdstate() const noexcept {
			return this->_state;
		}

		/// Set individual stream read state bits.
		inline void
		setstate(state rhs) noexcept {
			this->_state = state(this->_state | rhs);
		}

	};

}

#endif // vim:filetype=cpp
