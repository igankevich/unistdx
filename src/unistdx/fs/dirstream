/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_FS_DIRSTREAM
#define UNISTDX_FS_DIRSTREAM

namespace sys {

    /**
    \brief Base class for all directory streams.
    \date 2018-05-25
    \ingroup fs
    \details
    The class stores stream state similar to \link std::ios_base \endlink class
    for use in subclasses.
    */
    class dirstream {

    protected:

        dirstream() = default;

        /// Copy-constructor.
        dirstream(const dirstream&) = default;

        /// Move-constructor.
        dirstream(dirstream&&) = default;

        ~dirstream() = default;

    public:
        /// Directory read state bits.
        enum state {
            /// No-error state.
            goodbit = 0,
            /// Input/output error bit (application-level error).
            failbit = 1,
            /// Input/output error bit (system-level error).
            badbit = 2,
            /// End-of-file bit.
            eofbit = 4
        };

    protected:
        /// Stream state bits.
        state _state = goodbit;

    public:

        /// Returns true if the stream is in good state.
        inline explicit
        operator bool() const noexcept {
            return this->good();
        }

        /// Returns true if the stream is not in good state.
        inline bool
        operator!() const noexcept {
            return !this->operator bool();
        }

        /// Clear stream state.
        inline void
        clear() noexcept {
            this->_state = goodbit;
        }

        /// Returns true if the stream is in good state.
        inline bool
        good() const noexcept {
            return !this->_state;
        }

        /// Returns true if bad bit is set.
        inline bool
        bad() const noexcept {
            return this->_state & badbit;
        }

        /// Returns true if fail bit is set.
        inline bool
        fail() const noexcept {
            return this->_state & failbit;
        }

        /// Returns true if end-of-file bit is set.
        inline bool
        eof() const noexcept {
            return this->_state & eofbit;
        }

        /// Get stream read state.
        inline state
        rdstate() const noexcept {
            return this->_state;
        }

        /// Set individual stream read state bits.
        inline void
        setstate(state rhs) noexcept {
            this->_state = state(this->_state | rhs);
        }

    };

}

#endif // vim:filetype=cpp
