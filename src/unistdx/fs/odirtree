/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_FS_ODIRTREE
#define UNISTDX_FS_ODIRTREE

#include <cassert>

#include <unistdx/fs/idirectory>
#include <unistdx/fs/idirtree>
#include <unistdx/fs/odirectory>

namespace sys {

    /// \brief The same template as basic_odirectory.
    /// \ingroup fs
    template <class Trans>
    using basic_odirtree = basic_odirectory<Trans>;

    /**
    \brief Copy files and directories recursively.
    \details
    This is the default file transformation type for
    \link odirtree \endlink.
    \ingroup fs
    */
    struct copy_recursively {

    private:
        path _src;
        path _dest;

    public:

        copy_recursively() = default;

        /**
        Construct transformation with source directory \p src
        and destination directory \p dst.
        */
        inline
        copy_recursively(const path& src, const path& dst):
        _src(src),
        _dest(dst)
        {
            // LCOV_EXCL_START
            assert(!this->_src.empty());
            assert(!this->_dest.empty());
            // LCOV_EXCL_STOP
        }

        /// Copy file name of directory \p rhs without changing it.
        inline sys::path
        operator()(const directory_entry& rhs) const {
            return sys::path(rhs.name());
        }

        /// Copy file name of directory \p rhs without changing it.
        inline sys::path
        operator()(const sys::path& prefix, const directory_entry& rhs) const {
            return make_dirs(sys::path(prefix, rhs.name()));
        }

    private:
        sys::path
        make_dirs(const sys::path& rhs) const;

    };

    /**
    \brief
    Directory entry output stream that copies
    all files and directories recursively.
    \ingroup fs
    */
    typedef basic_odirtree<copy_recursively> odirtree;

    /// \brief Directory entry output stream iterator.
    /// \ingroup fs
    template<class T>
    using odirtree_iterator = basic_ostream_iterator<odirtree, T>;

}

#endif // vim:filetype=cpp
