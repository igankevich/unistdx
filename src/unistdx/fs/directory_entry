#ifndef UNISTDX_FS_DIRENTRY
#define UNISTDX_FS_DIRENTRY

#include <dirent.h>

#include <cstring>
#include <ostream>

#include <unistdx/fs/path>
#include <unistdx/fs/file_status>

namespace sys {

	/// Alias to \c dirent system type.
	typedef struct ::dirent dirent_type;

	/// Alias to \c ino_t system type.
	typedef ::ino_t inode_type;

	/**
	\brief Directory entry.
	\date 2018-05-25
	\author Ivan Gankevich
	\ingroup wrapper fs
	\see \man{readdir,3}
	\details
	A wrapper around \c dirent system type.
	*/
	class directory_entry: public dirent_type {

	public:

		directory_entry() = default;

		/// Copy-constructor.
		directory_entry(const directory_entry&) = default;

		/// Move-constructor.
		directory_entry(directory_entry&&) = default;

		~directory_entry() = default;

		/// Get entry file name.
		inline const char*
		name() const noexcept {
			return this->d_name;
		}

		/// Get entry inode number.
		inline inode_type
		inode() const noexcept {
			return this->d_ino;
		}

		/**
		\brief Get entry file type.
		\details
		Directory entry may not have file type set.
		Always check with \link has_type\endlink.
		*/
		inline file_type
		type() const noexcept {
			#if defined(UNISTDX_HAVE_DTTOIF)
			return file_type(DTTOIF(this->d_type));
			#else
			return file_type(DT_UNKNOWN);
			#endif
		}

		/// Returns true, if entry has file type.
		inline bool
		has_type() const noexcept {
			return this->type() != file_type(DT_UNKNOWN);
		}

		/// Returns true, if entry refers to the current directory ".".
		inline bool
		is_working_dir() const noexcept {
			return !std::strcmp(this->name(), ".");
		}

		/// Returns true, if entry refers to the parent directory "..".
		inline bool
		is_parent_dir() const noexcept {
			return !std::strcmp(this->name(), "..");
		}

		/// Returns true, if the file is hidden (starts with a ".").
		inline bool
		is_hidden() const noexcept {
			return this->name()[0] == '.';
		}

		/// Compare entry file names.
		inline bool
		operator==(const directory_entry& rhs) const noexcept {
			return std::strcmp(this->name(), rhs.name()) == 0;
		}

		/// Compare entry file names.
		inline bool
		operator!=(const directory_entry& rhs) const noexcept {
			return std::strcmp(this->name(), rhs.name()) != 0;
		}

		/// Compare entry file names.
		inline bool
		operator<(const directory_entry& rhs) const noexcept {
			return std::strcmp(this->name(), rhs.name()) < 0;
		}

		/// Print entry file name.
		inline friend std::ostream&
		operator<<(std::ostream& out, const directory_entry& rhs) {
			return out << rhs.name();
		}

		/// Copy-assignment.
		directory_entry&
		operator=(const directory_entry& rhs) = default;

	};

	/**
	\brief Reliably get file type of a directory entry.
	\param dirname directory where \p entry is located
	\param entry directory entry
	\details
	Falls back to \link file_status\endlink if directory entry itself
	does not have valid file type.
	*/
	inline file_type
	get_file_type(const path& dirname, const directory_entry& entry) {
		return entry.has_type()
		       ? entry.type()
			   : file_status(path(dirname, entry.name())).type();
	}

}

#endif // vim:filetype=cpp
