#ifndef UNISTDX_FS_TEMPORARY_FILE
#define UNISTDX_FS_TEMPORARY_FILE

#include <stdlib.h>

#include <unistdx/config>
#include <unistdx/io/fildes>

namespace sys {

    class temporary_file: public fildes {

    private:
        std::string _name;

    public:
        inline explicit
        temporary_file(std::string prefix, open_flag flags=open_flag{}):
        fildes(make(prefix, flags)), _name(std::move(prefix)) {
            #if !defined(UNISTDX_HAVE_MKOSTEMP) && \
                !defined(UNISTDX_HAVE_MKSTEMP)
            this->make(flags);
            #endif
        }

        inline ~temporary_file() noexcept { std::remove(this->_name.data()); }
        inline const std::string& name() const noexcept { return this->_name; }

    private:
        static int make(std::string& name, open_flag flags) {
            name += "XXXXXX";
            #if defined(UNISTDX_HAVE_MKOSTEMP)
            int ret = ::mkostemp(&name[0], int(flags));
            UNISTDX_CHECK(ret);
            return ret;
            #elif defined(UNISTDX_HAVE_MKSTEMP)
            int ret = ::mkstemp(&name[0]);
            UNISTDX_CHECK(ret);
            return ret;
            #else
            return -1;
            #endif
        }
        #if !defined(UNISTDX_HAVE_MKOSTEMP) && \
            !defined(UNISTDX_HAVE_MKSTEMP)
        void make(open_flag flags);
        #endif

    };

}

#endif // vim:filetype=cpp
