/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_FS_FILE_MUTEX
#define UNISTDX_FS_FILE_MUTEX

#include <fcntl.h>
#include <sys/file.h>

#include <exception>

#include <unistdx/bits/no_copy_and_move>
#include <unistdx/io/fildes>

namespace sys {

	class bad_file_lock: public std::exception {

	public:
		bad_file_lock() noexcept = default;

		~bad_file_lock() noexcept = default;

		const char*
		what() const noexcept override {
			return "bad file lock";
		}

	};

	enum struct file_lock_type: int {
		read_lock = LOCK_SH,
		write_lock = LOCK_EX
	};

	class file_mutex: public fildes {

	public:
		void
		lock(file_lock_type tp=file_lock_type::write_lock);

		void
		unlock();

		bool
		try_lock(file_lock_type tp=file_lock_type::write_lock);

		file_mutex() noexcept = default;

		inline
		file_mutex(const char* filename, mode_type mode) noexcept:
		fildes() {
			this->open(filename, mode);
		}

		void
		open(const char* filename, mode_type mode) noexcept;

		UNISTDX_NO_COPY_AND_MOVE(file_mutex)

	private:

		void
		do_lock(int cmd);

	};

}

#endif // vim:filetype=cpp
