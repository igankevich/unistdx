#ifndef UNISTDX_FS_FILE_MUTEX
#define UNISTDX_FS_FILE_MUTEX

#include <fcntl.h>
#include <sys/file.h>

#include <exception>

#include <unistdx/bits/no_copy_and_move>
#include <unistdx/io/fildes>

namespace sys {

	class bad_file_lock: public std::exception {

	public:
		bad_file_lock() noexcept = default;

		~bad_file_lock() noexcept = default;

		const char*
		what() const noexcept override {
			return "bad file lock";
		}

	};

	enum struct file_lock_type: int {
		read_lock = LOCK_SH,
		write_lock = LOCK_EX
	};

	/**
	\brief File-based mutex.
	\date 2018-05-21
	\author Ivan Gankevich
	\ingroup fs mutex
	*/
	class file_mutex: public fildes {

	public:

		void
		lock(file_lock_type tp=file_lock_type::write_lock);

		void
		unlock();

		bool
		try_lock(file_lock_type tp=file_lock_type::write_lock);

		file_mutex() noexcept = default;

		inline
		file_mutex(const char* filename, open_flag flags, mode_type mode) noexcept:
		fildes() {
			this->open(filename, flags, mode);
		}

		inline
		file_mutex(const char* filename, mode_type mode) noexcept:
		fildes() {
			this->open(filename, mode);
		}

		inline void
		open(const char* filename, mode_type mode) noexcept {
			this->open(filename, open_flag::read_write, mode);
		}

		void
		open(const char* filename, open_flag flags, mode_type mode) noexcept;

		UNISTDX_NO_COPY_AND_MOVE(file_mutex)

	private:

		void
		do_lock(int cmd);

	};

}

#endif // vim:filetype=cpp
