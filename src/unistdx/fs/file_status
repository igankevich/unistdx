/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_FS_FILE_STATUS
#define UNISTDX_FS_FILE_STATUS

#include <fcntl.h>
#include <sys/stat.h>

#include <chrono>

#include <unistdx/base/check>
#include <unistdx/fs/file_mode>
#include <unistdx/fs/file_type>
#include <unistdx/fs/path_flag>
#include <unistdx/io/fd_type>
#include <unistdx/system/time>

namespace sys {

    /// Alias to \c stat system type.
    typedef struct ::stat stat_type;

    /// Alias to \c off_t system type.
    typedef ::off_t offset_type;

    typedef ::uid_t uid_type;
    typedef ::gid_t gid_type;

    /// Alias to \c dev_t system type.
    typedef ::dev_t device_type;

    /**
    \brief
    File status class that wraps \c stat system type.
    \date 2018-05-25
    \ingroup wrapper fs
    */
    class file_status: public stat_type {

    public:
        /// Clock type used in the methods of this class.
        typedef std::chrono::system_clock clock_type;
        /// Clock time point type.
        typedef clock_type::time_point time_point;
        /// Block size type (integer).
        typedef ::blksize_t block_size_type;
        /// Block count type (integer).
        typedef ::blkcnt_t block_count_type;
        /// Hard link count type (integer).
        typedef ::nlink_t nlink_type;

        inline
        file_status() noexcept:
        stat_type{}
        {}

        /// Construct file status for file \p filename.
        inline explicit
        file_status(
            const char* filename,
            path_flag flags = path_flag(0)
        ):
        file_status(AT_FDCWD, filename, flags)
        {}

        /**
        Construct file status for file \p filename located in directory
        specified by file descriptor \p dir.
        */
        inline
        file_status(
            fd_type dir,
            const char* filename,
            path_flag flags = path_flag(0)
        ):
        stat_type{}
        { this->update(dir, filename, flags); }

        /**
        Construct file status for file descriptor \p fd.
        */
        inline explicit
        file_status(fd_type fd):
        stat_type{}
        { this->update(fd); }

        /// Get file type.
        inline file_type
        type() const noexcept {
            return file_type(this->st_mode & file_mode::type_mask);
        }

        /// Returns true, if file is regular.
        inline bool
        is_regular() const noexcept {
            return this->type() == file_type::regular;
        }

        /// Returns true, if file is a unix domain socket.
        inline bool
        is_socket() const noexcept {
            return this->type() == file_type::socket;
        }

        /// Returns true, if file is a symbolic link.
        inline bool
        is_symbolic_link() const noexcept {
            return this->type() == file_type::symbolic_link;
        }

        /// Returns true, if file is a block device.
        inline bool
        is_block_device() const noexcept {
            return this->type() == file_type::block_device;
        }

        /// Returns true, if file is a directory.
        inline bool
        is_directory() const noexcept {
            return this->type() == file_type::directory;
        }

        /// Returns true, if file is a character device.
        inline bool
        is_character_device() const noexcept {
            return this->type() == file_type::character_device;
        }

        /// Returns true, if file is a pipe.
        inline bool
        is_pipe() const noexcept {
            return this->type() == file_type::pipe;
        }

        /// Get file size in bytes.
        inline offset_type
        size() const noexcept {
            return this->st_size;
        }

        /// Get file block size in bytes.
        inline block_size_type
        block_size() const noexcept {
            return this->st_blksize;
        }

        /// Get preferred block size in bytes.
        inline block_size_type
        preferred_block_size() const noexcept {
            return this->st_blksize;
        }

        /// Get the number of 512 byte blocks allocated for the file.
        inline block_count_type
        num_blocks() const noexcept {
            return this->st_blocks;
        }

        /// Get ID of the device that contains the file.
        inline device_type
        device() const noexcept {
            return this->st_dev;
        }

        /// Get device ID (if the file is a device).
        inline device_type
        this_device() const noexcept {
            return this->st_rdev;
        }

        /// Get the number of hard links.
        inline nlink_type
        num_links() const noexcept {
            return this->st_nlink;
        }

        /// Get file mode bits.
        inline file_mode
        mode() const noexcept {
            return file_mode(this->st_mode & file_mode::mode_mask);
        }

        /// Get ID of the user that owns the file.
        inline uid_type
        owner() const noexcept {
            return this->st_uid;
        }

        /// Get ID of the group that owns the file.
        inline gid_type
        group() const noexcept {
            return this->st_gid;
        }

        /**
        Return true, if the file exists.
        */
        inline bool
        exists() const noexcept {
            return this->st_ino != 0;
        }

        /**
        \brief
           Get file status for file \p filename located in directory
        specified by file descriptor \p dir.
        \returns reference to this object
        \throws bad_call
        \see \man{stat,2}
        \see std::errc
        \details
        \arg Throws exception, if the file does not exist.
        \arg Use \link path_flag::no_follow \endlink to not throw exception
        on dangling symbolic links.
        */
        inline file_status&
        update(
            fd_type dir,
            const char* filename,
            path_flag flags = path_flag(0)
        ) {
            UNISTDX_CHECK(::fstatat(dir, filename, this, int(flags)));
            return *this;
        }

        /**
        \brief Get file status for file \p filename.
        \details \copydetails update(fd_type,const char*,path_flag)
        */
        inline file_status&
        update(const char* filename, path_flag flags = path_flag(0)) {
            return this->update(AT_FDCWD, filename, flags);
        }

        /**
        \brief Get file status for file descriptor \p fd.
        \returns reference to this object
        \throws bad_call
        \see \man{stat,2}
        */
        inline file_status&
        update(fd_type fd) {
            UNISTDX_CHECK(::fstat(fd, this));
            return *this;
        }

        /// Get time of last access.
        inline time_point
        last_accessed() const noexcept {
            return time_point{time_spec{this->st_atim}.duration()};
        }

        /// Get time of last modification.
        inline time_point
        last_modified() const noexcept {
            return time_point{time_spec{this->st_mtim}.duration()};
        }

        /// Get time of last status change.
        inline time_point
        last_status_changed() const noexcept {
            return time_point{time_spec{this->st_ctim}.duration()};
        }

        friend std::ostream&
        operator<<(std::ostream& out, const file_status& rhs);

    };

    /// Print file status for debugging (the format is similar to \man{ls,1}).
    std::ostream&
    operator<<(std::ostream& out, const file_status& rhs);

}

#endif // vim:filetype=cpp
