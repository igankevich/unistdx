/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

#ifndef UNISTDX_FS_PATH
#define UNISTDX_FS_PATH

#include <memory>
#include <string>

namespace sys {

	constexpr const char file_separator = '/';
	constexpr const char path_separator = ':';

	template <class Ch, class Tr, class Alloc>
	class basic_path;

	template <class Ch, class Tr, class Alloc>
	class basic_canonical_path;

	#define MAKE_OPERATOR(op, tp1, tp2, tp3, tp4) \
	inline friend bool \
	operator op(const tp1 lhs, const tp2 rhs) \
	noexcept( \
		noexcept( \
			::std::operator op( \
				static_cast<const tp3>(lhs), \
				static_cast<const tp4>(rhs) \
			) \
		) \
	) \
	{ \
		return ::std::operator op( \
			static_cast<const tp3>(lhs), \
			static_cast<const tp4>(rhs) \
		); \
	}

	#define MAKE_OPERATOR_EQ(tp1, tp2, tp3, tp4) \
	MAKE_OPERATOR(==, tp1, tp2, tp3, tp4) \
	MAKE_OPERATOR(!=, tp1, tp2, tp3, tp4)

	#define MAKE_OPERATOR_REL(tp1, tp2, tp3, tp4) \
	MAKE_OPERATOR(<, tp1, tp2, tp3, tp4) \
	MAKE_OPERATOR(<=, tp1, tp2, tp3, tp4) \
	MAKE_OPERATOR(>, tp1, tp2, tp3, tp4) \
	MAKE_OPERATOR(>=, tp1, tp2, tp3, tp4)

	template <class Ch, class Tr=std::char_traits<Ch>, class Alloc=
				  std::allocator<Ch> >
	class basic_path: public std::basic_string<Ch,Tr,Alloc> {

	public:

		typedef std::basic_string<Ch,Tr,Alloc> string_type;
		using typename string_type::value_type;
		using typename string_type::traits_type;
		using typename string_type::allocator_type;
		using typename string_type::reference;
		using typename string_type::const_reference;
		using typename string_type::pointer;
		using typename string_type::const_pointer;
		using typename string_type::iterator;
		using typename string_type::const_iterator;
		using typename string_type::reverse_iterator;
		using typename string_type::const_reverse_iterator;
		using typename string_type::difference_type;
		using typename string_type::size_type;

		friend struct std::hash<basic_path>;
		friend class basic_canonical_path<Ch,Tr,Alloc>;

		inline
		basic_path() = default;

		inline basic_path&
		operator=(const basic_path&) = default;

		inline basic_path&
		operator=(const string_type& rhs) {
			string_type::operator=(rhs);
			return *this;
		}

		inline basic_path&
		operator=(const char* rhs) {
			string_type::operator=(rhs);
			return *this;
		}

		inline explicit
		basic_path(const char* rhs):
		string_type(rhs)
		{}

		inline explicit
		basic_path(const string_type& rhs):
		string_type(rhs)
		{}

		inline explicit
		basic_path(string_type&& rhs) noexcept:
		string_type(std::forward<string_type>(rhs))
		{}

		inline
		basic_path(const basic_path& rhs):
		string_type(rhs)
		{}

		inline
		basic_path(basic_path&& rhs):
		string_type(std::forward<string_type>(rhs))
		{}

		template <class A, class B>
		inline
		basic_path(A&& dir, B&& filename):
		string_type(std::forward<A>(dir)) {
			this->add(std::forward<B>(filename));
		}

		template <class A, class B, class ... Args>
		inline
		basic_path(A&& dir, B&& filename, Args&& ... more_filenames):
		string_type(std::forward<A>(dir)) {
			this->add(
				std::forward<B>(filename),
				std::forward<Args>(more_filenames) ...
			);
		}

		template <class T>
		inline void
		add(T&& filename) {
			this->push_back(file_separator);
			this->append(std::forward<T>(filename));
		}

		template <class T, class ... Args>
		inline void
		add(T&& filename, Args&& ... components) {
			this->push_back(file_separator);
			this->append(std::forward<T>(filename));
			this->add(std::forward<Args>(components) ...);
		}

		inline
		operator const value_type*() const noexcept {
			return this->data();
		}

		MAKE_OPERATOR_EQ(basic_path&, basic_path&, string_type&, string_type&);
		MAKE_OPERATOR_EQ(basic_path&, string_type&, string_type&, string_type&);
		MAKE_OPERATOR_EQ(string_type&, basic_path&, string_type&, string_type&);
		MAKE_OPERATOR_EQ(basic_path&, char*, string_type&, char*);
		MAKE_OPERATOR_EQ(char*, basic_path&, char*, string_type&);

		MAKE_OPERATOR_REL(basic_path&, basic_path&, string_type&, string_type&);
		MAKE_OPERATOR_REL(basic_path&, string_type&, string_type&, string_type&);
		MAKE_OPERATOR_REL(string_type&, basic_path&, string_type&, string_type&);
		MAKE_OPERATOR_REL(basic_path&, char*, string_type&, char*);
		MAKE_OPERATOR_REL(char*, basic_path&, char*, string_type&);

	private:

		inline explicit
		basic_path(std::unique_ptr<char[]> rhs):
		string_type(rhs.get())
		{}

	};

	#undef MAKE_OPERATOR
	#undef MAKE_OPERATOR_EQ
	#undef MAKE_OPERATOR_REL

	typedef basic_path<char> path;

}

namespace std {

	template <class Ch, class Tr, class Alloc>
	struct hash<sys::basic_path<Ch,Tr,Alloc> >:
		public std::hash<std::basic_string<Ch,Tr,Alloc> > {

		typedef size_t result_type;
		typedef sys::basic_path<Ch,Tr,Alloc> argument_type;

		inline size_t
		operator()(const argument_type& rhs) const noexcept {
			return std::hash<std::basic_string<Ch,Tr,Alloc> >::operator()(rhs);
		}

	};

}

#endif // vim:filetype=cpp
