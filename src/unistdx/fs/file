/*
   Copyright 2017 Ivan Gankevich

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#ifndef UNISTDX_FS_FILE
#define UNISTDX_FS_FILE

#include <unistdx/fs/direntry>

namespace sys {

	struct file: public path, public file_stat {

		file() = default;
		file(const file&) = default;
		file(file&&) = default;

		inline
		file(const path& dirname, const direntry& ent):
		path(dirname, ent.name()),
		file_stat(*this) {}

		inline bool
		is_hidden() const noexcept {
			return name()[0] == '.';
		}

		inline const char*
		name() const noexcept {
			const size_t pos = this->find_last_of(file_separator);
			return pos == std::string::npos
			       ? this->data()
				   : (this->data() + pos + 1);
		}

		inline friend std::ostream&
		operator<<(std::ostream& out, const file& rhs) {
			return out << static_cast<const file_stat&>(rhs)
			           << ' ' << static_cast<const path&>(rhs);
		}

		file&
		operator=(const file&) = default;

		file&
		operator=(file&& rhs) = default;

	};

}

#endif // vim:filetype=cpp
