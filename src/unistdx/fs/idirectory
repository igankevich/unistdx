/*
UNISTDX — C++ library for Linux system calls.
© 2017, 2018, 2019, 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNISTDX_FS_IDIRECTORY
#define UNISTDX_FS_IDIRECTORY

#include <unistd.h>

#include <unistdx/base/contracts>
#include <unistdx/fs/directory_entry>
#include <unistdx/fs/dirstream>
#include <unistdx/fs/path_flag>
#include <unistdx/it/basic_istream_iterator>
#include <unistdx/it/iterator_pair>

namespace sys {

    /// Alias to \c DIR system type.
    typedef DIR dir_type;

    typedef ::uid_t uid_type;
    typedef ::gid_t gid_type;

    /**
    \brief Directory entry input stream.
    \date 2018-05-25
    \ingroup stream fs
    \tparam FilePred file predicate type, that determines which
    directory entries to include in the stream.
    \see directory_entry
    \details
    An input stream from which directory entries are read non-recursively.
    \arg File predicate may have internal state.
    */
    template<class FilePred>
    class basic_idirectory: public dirstream {

    public:
        /// File predicate type.
        using filepred_type = FilePred;
        /// Directory entry type.
        using value_type = directory_entry;
        /// Directory entry reference.
        using reference = value_type&;
        /// Directory entry constant reference.
        using const_reference = const value_type&;
        /// Directory entry pointer.
        using pointer = value_type*;
        /// Directory entry constant pointer.
        using const_pointer = const value_type*;
        /// Directory entry stream iterator.
        using iterator = basic_istream_iterator<basic_idirectory,value_type>;

    private:
        path _dirpath;
        dir_type* _dir = nullptr;
        filepred_type _filepred;

    public:

        basic_idirectory() = default;

        /// Construct directory entry input stream for directory \p path.
        inline explicit
        basic_idirectory(const path& path) {
            this->open(path);
        }

        /// Move-constructor.
        inline
        basic_idirectory(basic_idirectory&& rhs):
        dirstream(std::forward<dirstream>(rhs)),
        _dirpath(std::move(rhs._dirpath)),
        _dir(rhs._dir),
        _filepred(std::move(rhs._filepred)) {
            rhs._dir = nullptr;
        }

        basic_idirectory(const basic_idirectory&) = delete;

        inline
        ~basic_idirectory() {
            this->close();
        }

        /**
        \brief Open directory \p p as input directory for reading entries.
        \see \man{opendir,3}
        */
        inline void
        open(const path& p) {
            this->close();
            this->_dirpath = p;
            this->_dir = ::opendir(p);
            UNISTDX_CHECK2(this->_dir, nullptr);
        }

        /**
        \brief Close input directory.
        \see \man{closedir,3}
        */
        inline void
        close() {
            if (this->_dir) {
                UNISTDX_CHECK(::closedir(this->_dir));
                this->_dir = nullptr;
            }
        }

        /// Returns true, if the directory was opened.
        inline bool
        is_open() const noexcept {
            return this->_dir != nullptr;
        }

        /// Get file predicate.
        inline const filepred_type&
        getfilepred() const noexcept {
            return this->_filepred;
        }

        /**
        \brief Set file predicate.
        \details
        This method allows for file predicate to have internal state, that
        affects which entries are included in the stream.
        */
        inline void
        setfilepred(filepred_type rhs) {
            this->_filepred = rhs;
        }

        /// Get input directory.
        inline const path&
        getpath() const noexcept {
            return this->_dirpath;
        }

        inline fd_type fd() const noexcept { return ::dirfd(this->_dir); }

        /// Get next directory entry as \link directory_entry \endlink.
        inline basic_idirectory&
        operator>>(reference rhs) {
            UNISTDX_ASSERTION(this->is_open());
            this->read_direntry(rhs);
            return *this;
        }

        inline iterator begin() { return iterator(*this); }
        inline iterator end() { return iterator(); }

        /**
        \brief Set \p filename owner.
        \date 2018-07-03
        \see \man{fchownat,2}
        */
        inline void
        owner(
            const char* filename,
            uid_type uid,
            gid_type gid,
            path_flag flags = path_flag(0)
        ) {
            UNISTDX_CHECK(::fchownat(
                ::dirfd(this->_dir),
                filename,
                uid,
                gid,
                int(flags)
            ));
        }

        /**
        \brief Set directory owner.
        \date 2018-07-03
        \see \man{fchownat,2}
        */
        inline void
        owner(uid_type uid, gid_type gid, path_flag flags = path_flag(0)) {
            this->owner("", uid, gid, flags|path_flag::empty);
        }

    private:

        inline pointer
        read_direntry() UNISTDX_NOEXCEPT {
            UNISTDX_ASSERTION(this->is_open()); // LCOV_EXCL_LINE
            return static_cast<pointer>(::readdir(this->_dir));
        }

        inline void
        read_direntry(reference rhs) {
            UNISTDX_ASSERTION(this->is_open()); // LCOV_EXCL_LINE
            if (this->good()) {
                bool success = false;
                while (!success && !this->eof()) {
                    const_pointer result = this->read_direntry();
                    if (!result) {
                        this->setstate(eofbit);
                    } else {
                        if (this->_filepred(this->_dirpath, *result)) {
                            rhs = *result;
                            success = true;
                        }
                    }
                }
            }
        }

    };

    /**
    \brief Do not include hidden file when traversing directories.
    \date 2018-05-25
    \ingroup fs
    \details
    This is the default file predicate for \link idirectory \endlink.
    */
    struct ignore_hidden_files {

        /// Returns true, if directory entry rhs is not hidden.
        template <class Entry>
        inline bool
        operator()(const path&, const Entry& rhs) const noexcept {
            return !rhs.is_hidden();
        }

    };

    /**
    \brief
    Directory entry input stream that ignores all hidden files during traversal.
    \ingroup fs
    */
    typedef basic_idirectory<ignore_hidden_files> idirectory;

    /// \brief Directory entry input stream iterator.
    /// \ingroup fs
    template<class T>
    using idirectory_iterator = basic_istream_iterator<idirectory, T>;

}

#endif // vim:filetype=cpp
