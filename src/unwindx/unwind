/*
UNISTDX — C++ library for Linux system calls.
© 2020 Ivan Gankevich

This file is part of UNISTDX.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>
*/

#ifndef UNWINDX_UNWIND
#define UNWINDX_UNWIND

#include <libunwind.h>

#include <system_error>

namespace unw {

    using word_type = ::unw_word_t;
    using context_type = ::unw_context_t;
    using cursor_type = ::unw_cursor_t;

    enum struct errc: int {
        success=UNW_ESUCCESS,
        unspecified=-UNW_EUNSPEC,
        out_of_memory=-UNW_ENOMEM,
        bad_register=-UNW_EBADREG,
        read_only_register=-UNW_EREADONLYREG,
        stop_unwinding=-UNW_ESTOPUNWIND,
        invalid_ip=-UNW_EINVALIDIP,
        bad_frame=-UNW_EBADFRAME,
        invalid_value=-UNW_EINVAL,
        bad_version=-UNW_EBADVERSION,
        no_info=-UNW_ENOINFO,
    };

    class error_category: public std::error_category {
    public:
        const char* name() const noexcept override;
        std::string message(int ev) const noexcept override;
    };

    extern error_category unwind_category;

    inline std::error_condition
    make_error_condition(errc e) noexcept {
        return std::error_condition(static_cast<int>(e), unwind_category);
    }

    inline int call(int ret) {
        if (ret < 0) { throw std::system_error(ret, unwind_category); }
        return ret;
    }

    class context {
    private:
        context_type _context{};
    public:
        inline context() { call(unw_getcontext(&this->_context)); }
        inline context_type* get() noexcept { return &this->_context; }
        inline const context_type* get() const noexcept { return &this->_context; }
        ~context() = default;
        context(const context&) = default;
        context& operator=(const context&) = default;
        context(context&&) = default;
        context& operator=(context&&) = default;
    };

    class cursor {
    public:
        using register_type = ::unw_regnum_t;
    private:
        cursor_type _cursor{};
    public:
        inline cursor(context& c) { call(unw_init_local(get(), c.get())); }
        inline cursor_type* get() noexcept { return &this->_cursor; }
        inline const cursor_type* get() const noexcept { return &this->_cursor; }
        inline int step() noexcept { return call(unw_step(get())); }
        inline void resume() noexcept { call(unw_resume(get())); }

        inline word_type read_int_register(int reg) {
            word_type value = 0;
            call(unw_get_reg(&this->_cursor, reg, &value));
            return value;
        }

        inline void write_int_register(int reg, word_type value) {
            call(unw_set_reg(&this->_cursor, reg, value));
        }

        inline void procedure_name(char* name, size_t size) {
            word_type offset = 0;
            call(unw_get_proc_name(get(), name, size, &offset));
        }

        cursor() = default;
        ~cursor() = default;
        cursor(const cursor&) = default;
        cursor& operator=(const cursor&) = default;
        cursor(cursor&&) = default;
        cursor& operator=(cursor&&) = default;

    };

    void backtrace(int fd) noexcept;

}

namespace std { template<> struct is_error_condition_enum<unw::errc>: true_type {}; }

#endif // vim:filetype=cpp
