#!/bin/guile2.2
!#

(use-modules
  (oop goops)
  (ice-9 format)
  (ice-9 ftw)
  (ice-9 popen)
  (ice-9 textual-ports)
  (srfi srfi-1)
  (slurm)
  (slurm-ci))

(define default-env
  (make <guix-environment>
    #:channels "ci/channels.scm"
    #:manifest "ci/manifest.scm"))

(define branch (getenv "CI_BUILD_BRANCH"))

(define (job-transform job env)
  (set! (job-name job)
    (string-join (list "unistdx"
                       (getenv "CI_BUILD_NUMBER")
                       (guix-environment-system env)
                       (job-name job))
                 "-"))
  (set! (job-partitions job) '("ci"))
  (guix-environment-wrap! job env))

(cond
  ;; build site
  ((and branch (string=? branch "site"))
   (let ((prefix "/var/lib/gitbucket/repositories"))
     (format (current-error-port) "Building the site\n")
     (setenv "UNISTDX_MANIFEST" "ci,site")
     (exit
       (gitbucket-run
         (list
           (job-transform
             (make <job>
               #:name "site"
               #:script
               (string-join
                 (list
                   "#!/bin/sh"
                   "set -ex"
                   "d=$(mktemp -d /tmp/gitbucket-XXXXXX)"
                   "export LANG=en_US.utf-8"
                   "meson . $d"
                   "cd $d"
                   "ninja -v doxygen-std-tagfile"
                   "ninja -v site"
                   "rsync -e 'ssh -p 22222' -acv --delete src/unistdx/site/ cmmshq.ru:/srv/unistdx/"
                   "rm -rf $d")
                 "\n")
               )
             default-env))))))
  ;; default build
  (else
    (let ()
      (define (all-jobs system)
        (append
          (map
            (lambda (lst)
              (define name (car lst))
              (define meson-arguments (cdr lst))
              (make <job>
                #:script
                (string-join
                  (list
                    "#!/bin/sh"
                    "set -ex"
                    "d=$(mktemp -d /tmp/gitbucket-$SLURM_JOB_ID-XXXXXX)"
                    (format #f "meson ~a -Dwith_debug=true . $d"
                            (string-join meson-arguments " "))
                    "cd $d"
                    "meson test --verbose --timeout-multiplier 2"
                    "rm -rf --one-file-system --preserve-root $d")
                  "\n")
                #:name name))
            `(("sanitize-none" "-Db_sanitize=none")
              ,@(if (not (string=? system "i686-linux"))
                  '(("sanitize-address" "-Db_sanitize=address"))
                  '())
              ,@(if (not (string=? system "aarch64-linux"))
                  '(("arch-native" "-Dbuildtype=release" "-Dcpp_args=-march=native"))
                  '())))
          (list
            (make <job>
              #:script
              (string-join
                (list
                  "#!/bin/sh"
                  "set -ex"
                  "outdir=$(pwd)"
                  "d=$(mktemp -d /tmp/gitbucket-XXXXXX)"
                  "meson -Db_coverage=true . $d"
                  "cd $d"
                  "ninja -v test-lcov"
                  (format #f "mv -v lcov $outdir/~a-coverage" system)
                  "rm -rf --one-file-system --preserve-root $d")
                "\n")
              #:name "coverage")
            (make <job>
              #:script
              (string-join
                (list
                  "#!/bin/sh"
                  "set -ex"
                  "outdir=$(pwd)"
                  "d=$(mktemp -d /tmp/gitbucket-XXXXXX)"
                  "meson . $d"
                  "cd $d"
                  "ninja -v clang-tidy"
                  "rm -rf --one-file-system --preserve-root $d")
                "\n")
              #:name "static-checks"))))
      (format (current-error-port) "Building the project\n")
      (setenv "UNISTDX_MANIFEST" "ci")
      (exit (gitbucket-run
              (append-map
                (lambda (system)
                  (map (lambda (job)
                         (job-transform job
                                        (make <guix-environment>
                                          #:channels "ci/channels.scm"
                                          #:manifest "ci/manifest.scm"
                                          #:system system)))
                       (all-jobs system)))
                '("x86_64-linux" "i686-linux" "aarch64-linux")))))))

;; vim:filetype=scheme
