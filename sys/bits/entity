#ifndef SYS_BITS_ENTITY
#define SYS_BITS_ENTITY

#include <sys/check>
#include <sys/unistdx_config>
#include <sys/util/group>
#include <sys/util/user>
//#undef UNISTDX_HAVE_GETPWNAM_R
//#undef UNISTDX_HAVE_GETPWUID_R
//#undef UNISTDX_HAVE_GETGRNAM_R
//#undef UNISTDX_HAVE_GETGRGID_R
#if !defined(UNISTDX_HAVE_GETPWUID_R) || \
    !defined(UNISTDX_HAVE_GETPWNAM_R) || \
    !defined(UNISTDX_HAVE_GETGRGID_R) || \
    !defined(UNISTDX_HAVE_GETGRNAM_R)
#include <mutex>
#endif
#include <algorithm>
#include <grp.h>
#include <pwd.h>
#include <stdexcept>
#include <unistd.h>
#include <vector>

namespace {

	inline long
	get_max_size(int name) {
		long n = ::sysconf(name);
		return n == -1L ? 1024L : n;
	}

	template <class Id>
	struct By {

		By(const char* name):
		_name(name),
		_byname(true)
		{}

		By(Id uid):
		_id(uid),
		_byname(false)
		{}

		inline const char*
		name() const noexcept {
			return this->_name;
		}

		inline Id
		uid() const noexcept {
			return this->_id;
		}

		inline Id
		gid() const noexcept {
			return this->_id;
		}

		inline bool
		by_name() const noexcept {
			return this->_byname;
		}

		inline bool
		by_uid() const noexcept {
			return !this->_byname;
		}

		union {
			const char* _name;
			Id _id;
		};
		bool _byname;

	};

	#if !defined(UNISTDX_HAVE_GETPWUID_R) || \
	!defined(UNISTDX_HAVE_GETPWNAM_R) || \
	!defined(UNISTDX_HAVE_GETGRGID_R) || \
	!defined(UNISTDX_HAVE_GETGRNAM_R)
	std::mutex ent_mutex;
	#endif

	template <class Entity>
	struct Entity_traits {};

	template <>
	struct Entity_traits<sys::user> {

		typedef sys::uid_type id_type;
		typedef sys::passwd_type result_type;
		typedef sys::user entity_type;

		inline static constexpr int
		conf_name() noexcept {
			return _SC_GETPW_R_SIZE_MAX;
		}

		#if defined(UNISTDX_HAVE_GETPWUID_R) || \
		defined(UNISTDX_HAVE_GETPWNAM_R)
		inline static int
		get(
			const By<id_type>& field,
			entity_type& u,
			std::string& buf,
			result_type** res
		) {
			int ret;
			if (field.by_name()) {
				#if defined(UNISTDX_HAVE_GETPWNAM_R)
				ret = ::getpwnam_r(field.name(), &u, &buf[0], buf.size(), res);
				#else
				ret = -1;
				#endif
			} else {
				#if defined(UNISTDX_HAVE_GETPWUID_R)
				ret = ::getpwuid_r(field.uid(), &u, &buf[0], buf.size(), res);
				#else
				ret = -1;
				#endif
			}
			return ret;
		}

		#endif

		inline static result_type*
		get(const By<id_type>& field) {
			result_type* res;
			if (field.by_name()) {
				res = ::getpwnam(field.name());
			} else {
				res = ::getpwuid(field.uid());
			}
			return res;
		}

		#if !defined(UNISTDX_HAVE_GETPWUID_R) || \
		!defined(UNISTDX_HAVE_GETPWNAM_R)
		inline static void
		copy(result_type* pw, entity_type& u, std::string& buf) {
			buf.clear();
			const size_t pos_name = buf.size();
			buf.append(pw->pw_name);
			buf.push_back('\0');
			const size_t pos_passwd = buf.size();
			buf.append(pw->pw_passwd);
			buf.push_back('\0');
			#if defined(UNISTDX_HAVE_GECOS)
			const size_t pos_gecos = buf.size();
			buf.append(pw->pw_gecos);
			buf.push_back('\0');
			#endif
			const size_t pos_dir = buf.size();
			buf.append(pw->pw_dir);
			buf.push_back('\0');
			const size_t pos_shell = buf.size();
			buf.append(pw->pw_shell);
			buf.push_back('\0');
			u.pw_name = &buf[0] + pos_name;
			u.pw_passwd = &buf[0] + pos_passwd;
			u.pw_uid = pw->pw_uid;
			u.pw_gid = pw->pw_gid;
			#if defined(UNISTDX_HAVE_GECOS)
			u.pw_gecos = &buf[0] + pos_gecos;
			#endif
			u.pw_dir = &buf[0] + pos_dir;
			u.pw_shell = &buf[0] + pos_shell;
		}

		#endif

	};

	template <>
	struct Entity_traits<sys::group> {

		typedef sys::gid_type id_type;
		typedef sys::group_type result_type;
		typedef sys::group entity_type;

		inline static constexpr int
		conf_name() noexcept {
			return _SC_GETGR_R_SIZE_MAX;
		}

		#if defined(UNISTDX_HAVE_GETGRGID_R) || \
		defined(UNISTDX_HAVE_GETGRNAM_R)
		inline static int
		get(
			const By<id_type>& field,
			entity_type& u,
			std::string& buf,
			result_type** res
		) {
			int ret;
			if (field.by_name()) {
				#if defined(UNISTDX_HAVE_GETGRNAM_R)
				ret = ::getgrnam_r(field.name(), &u, &buf[0], buf.size(), res);
				#else
				ret = -1;
				#endif
			} else {
				#if defined(UNISTDX_HAVE_GETGRGID_R)
				ret = ::getgrgid_r(field.gid(), &u, &buf[0], buf.size(), res);
				#else
				ret = -1;
				#endif
			}
			return ret;
		}

		#endif

		inline static result_type*
		get(const By<id_type>& field) {
			result_type* res;
			if (field.by_name()) {
				res = ::getgrnam(field.name());
			} else {
				res = ::getgrgid(field.gid());
			}
			return res;
		}

		#if !defined(UNISTDX_HAVE_GETGRGID_R) || \
		!defined(UNISTDX_HAVE_GETGRNAM_R)
		inline static void
		copy(result_type* gr, entity_type& u, std::string& buf) {
			typedef sys::group::iterator iterator;
			buf.clear();
			const size_t pos_name = buf.size();
			buf.append(gr->gr_name);
			buf.push_back('\0');
			const size_t pos_passwd = buf.size();
			buf.append(gr->gr_passwd);
			buf.push_back('\0');
			std::vector<size_t> pos_mem;
			std::for_each(
				iterator(gr->gr_mem),
				iterator(),
				[&] (char* mem) {
				    pos_mem.emplace_back(buf.size());
				    buf.append(mem);
				    buf.push_back('\0');
				}
			);
			// pad buffer to align group members addresses
			const size_t padding = buf.size() % sizeof(gr->gr_mem);
			buf.resize(buf.size() + padding);
			buf.reserve(buf.size() + (pos_mem.size() + 1)*sizeof(gr->gr_mem));
			u.gr_name = &buf[0] + pos_name;
			u.gr_passwd = &buf[0] + pos_passwd;
			u.gr_gid = gr->gr_gid;
			u.gr_mem = reinterpret_cast<char**>(&buf[0] + buf.size());
			union Bytes {
				char* ptr;
				char chars[sizeof(ptr)];
			};
			for (size_t pos : pos_mem) {
				Bytes bytes;
				bytes.ptr = &buf[0] + pos;
				buf.append(bytes.chars, sizeof(bytes.chars));
			}
			Bytes last;
			last.ptr = nullptr;
			buf.append(last.chars, sizeof(last.chars));
		}

		#endif // if !defined(UNISTDX_HAVE_GETGRGID_R) ||
		// !defined(UNISTDX_HAVE_GETGRNAM_R)

	};
	#if !defined(UNISTDX_HAVE_GETPWUID_R) || \
	!defined(UNISTDX_HAVE_GETPWNAM_R) || \
	!defined(UNISTDX_HAVE_GETGRGID_R) || \
	!defined(UNISTDX_HAVE_GETGRNAM_R)
	template <class Id, class Entity>
	bool
	find_entity_nr(By<Id> field, Entity& u, std::string& buf) {
		using namespace sys;
		typedef Entity_traits<Entity> traits_type;
		typedef typename traits_type::result_type result_type;
		bool found;
		std::lock_guard<std::mutex> lock(ent_mutex);
		errno = 0;
		result_type* res = traits_type::get(field);
		if (!res) {
			if (errno) {
				UNISTDX_THROW_BAD_CALL();
			} else {
				found = false;
			}
		} else {
			found = true;
		}
		if (found) {
			traits_type::copy(res, u, buf);
		}
		return found;
	}

	#endif

	#if defined(UNISTDX_HAVE_GETPWUID_R) || \
	defined(UNISTDX_HAVE_GETPWNAM_R) || \
	defined(UNISTDX_HAVE_GETGRGID_R) || \
	defined(UNISTDX_HAVE_GETGRNAM_R)
	template <class Id, class Entity>
	bool
	find_entity_r(By<Id> field, Entity& u, std::string& buf) {
		using namespace sys;
		typedef Entity_traits<Entity> traits_type;
		typedef typename traits_type::result_type result_type;
		bool found;
		result_type* res;
		buf.resize(get_max_size(traits_type::conf_name()));
		int ret, i = 0;
		const int max_iterations = 22;
		do {
			ret = traits_type::get(field, u, buf, &res);
			if (!res) {
				if (ret == 0) {
					found = false;
				} else if (errno == ERANGE) {
					buf.resize(buf.size()*2);
				} else {
					UNISTDX_THROW_BAD_CALL();
				}
			} else {
				found = true;
			}
		} while (ret == -1 && ++i < max_iterations);
		if (ret == -1 && i == max_iterations) {
			throw std::runtime_error("find_entity_r: max iterations reached");
		}
		return found;
	}

	#endif

}

#endif // SYS_BITS_ENTITY vim:ft=cpp
